<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySql高级</title>
    <link href="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql高级"><a href="#Mysql高级" class="headerlink" title="Mysql高级"></a>Mysql高级</h1><h2 id="一、逻辑架构"><a href="#一、逻辑架构" class="headerlink" title="一、逻辑架构"></a>一、逻辑架构</h2><h4 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. 逻辑架构剖析"></a>1. 逻辑架构剖析</h4><h5 id="1-1-服务器处理客户端请求"><a href="#1-1-服务器处理客户端请求" class="headerlink" title="1.1 服务器处理客户端请求"></a>1.1 服务器处理客户端请求</h5><p>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢?这里以查询请求为例展示:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702205138894.png" alt="image-20230702205138894" style="zoom:50%;"><p>下面具体展开看一下:</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702205358121.png" alt="image-20230702205358121"></p><h5 id="1-2-第一层-连接层"><a href="#1-2-第一层-连接层" class="headerlink" title="1.2 第一层: 连接层"></a>1.2 第一层: 连接层</h5><p>系统(客户端)访问 MySQL 服务器前，做的第一件事就是建立 TCP 连接。 经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依 赖于此时读到的权限</li></ul><p>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后 面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h5 id="1-3-第二层-服务层"><a href="#1-3-第二层-服务层" class="headerlink" title="1.3 第二层:服务层"></a>1.3 第二层:服务层</h5><ul><li><p><span style="color:red;">SQL Interface: SQL接口</span></p><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface</li><li>MySQL支持DML(数据操作语言)、DDL(数据定义语言)、存储过程、视图、触发器、自定 义函数等多种SQL语言接口</li></ul></li><li><p><span style="color:red;">Parser: 解析器</span></p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构 传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错 误，那么就说明这个SQL语句是不合理的。</li></ul></li><li><p><span style="color:red;">Optimizer: 查询优化器</span></p><ul><li><p>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <strong>执行计划</strong> 。</p></li><li><p>这个执行计划表明应该 使用<strong>哪些索引</strong> 进行查询(全表检索还是使用索引检索)，表之间的连 接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将 查询结果返回给用户。</p></li><li><p>它使用“ <strong>选取-投影-连接</strong> ”策略进行查询。例如:</p><pre><code class="hljs"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT id,name FROM student WHERE gender = &#x27;女&#x27;;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>这个SELECT查询先根据WHERE语句进行 <strong>选取</strong> ，而不是将表全部查询出来以后再进行gender过 滤。 这个SELECT查询先根据id和name进行属性 <strong>投影</strong> ，而不是将属性全部取出以后再进行过 滤，将这两个查询条件 <strong>连接</strong> 起来生成最终查询结果</p></li><li><p><span style="color:red;">Caches &amp; Buffers: 查询缓存组件</span></p><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结 果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过 程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在 不同客户端之间共享 。</li><li>从MySQL 5.7.20开始，不推荐使用查询缓存，<strong>并在 MySQL 8.0中删除</strong> 。</li></ul></li></ul><h5 id="1-4-第三层-引擎层"><a href="#1-4-第三层-引擎层" class="headerlink" title="1.4 第三层:引擎层"></a>1.4 第三层:引擎层</h5><p>插件式存储引擎层( Storage Engines)，<strong>真正的负责了MySQL中数据的存储和提取</strong>，<strong>对物理服务器级别 维护的底层数据执行操作</strong> ，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样 我们可以根据自己的实际需要进行选取。</p><h5 id="1-5-第四层-存储层"><a href="#1-5-第四层-存储层" class="headerlink" title="1.5 第四层:存储层"></a>1.5 第四层:存储层</h5><p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在 文件系统 上，以 文件 的方式存 在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设 备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p><blockquote><p>小结</p></blockquote><p>MySQL架构图本节开篇所示。下面为了熟悉SQL执行流程方便，我们可以简化如下:</p> <img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702214245169.png" alt="image-20230702214245169" style="zoom:50%;"><p>简化为三层结构:</p><ol><li>连接层:客户端和服务器端建立连接，客户端发送 SQL 至服务器端;</li><li>SQL 层(服务层):对 SQL 语句进行查询处理;与数据库文件的存储方式无关;</li><li>存储引擎层:与数据库文件打交道，负责数据的存储和读取。</li></ol><h2 id="二、SQL执行流程"><a href="#二、SQL执行流程" class="headerlink" title="二、SQL执行流程"></a>二、SQL执行流程</h2><h3 id="2-1-MySQL-中的-SQL执行流程"><a href="#2-1-MySQL-中的-SQL执行流程" class="headerlink" title="2.1 MySQL 中的 SQL执行流程"></a>2.1 MySQL 中的 SQL执行流程</h3><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702214602277.png" alt="image-20230702214602277" style="zoom:50%;"><p><strong><span style="color:red;">MySQL的查询流程:</span></strong></p><ol><li><strong><span style="color:red;">查询缓存:</span></strong> Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端;如果没有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃 了这个功能。</li></ol><p>​<span style="color:red;"><strong>大多数情况查询缓存就是个鸡肋，为什么呢?</strong></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name FROM employees WHERE employee_id = 101;<br></code></pre></td></tr></table></figure><p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。两个查询请求在任何字符上的不同(例如:空格、注释、 大小写)，都会导致缓存不会命中。因此 MySQL 的  <strong>查询缓存命中率不高</strong>。</p><p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。以某些系统函数 举例，可能同样的函数的两次调用会产生不一样的结果，比如函数NOW，每次调用都会产生最新的当前 时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次 查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询 的结果就是错误的!</p><p>此外，既然是缓存，那就有它缓存失效的情况。MySQL的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了INSERT、UPDATE、DELETE、TRUNCATE TABLE、ALTER TABLE、DROP TABLE语句.那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除!对于更新压力过大的数据库来说,查询缓存的命中率会非常低。</p><ol start="2"><li><span style="color:red;"><strong>解析器:</strong></span>在解析器中对 SQL 语句进行语法分析、语义分析</li></ol><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702215841007.png" alt="image-20230702215841007" style="zoom:50%;"><p>分析器先做“ <strong>词法分析</strong> ”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。 MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语 句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>接着，要做“ <strong>语法分析</strong> ”。根据词法分析的结果，语法分析器(比如:Bison)会根据语法规则，判断你输 入的这个SQL语句是否<strong>满足 MySQL 语法</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select department_id,job_id,avg(salary) from employees group by department_id;<br></code></pre></td></tr></table></figure><p>如果SQL语句正确，则会生成一个这样的语法树:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702220432990.png" alt="image-20230702220432990" style="zoom:50%;"><ol start="3"><li><span style="color:red;"><strong>优化器:</strong></span>在优化器中会确定 SQL 语句的执行路径，比如是根据 全表检索 ，还是根据 索引检索 等。 举例:如下语句是执行两个表的 join:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from test1 join test2 using(ID)<br>where test1.name=&#x27;zhangwei&#x27; and test2.name=&#x27;./Mysql高级课程&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">方案<span class="hljs-number">1</span>:可以先从表 test1 里面取出 <span class="hljs-keyword">name</span>=<span class="hljs-string">&#x27;zhangwei&#x27;</span>的记录的 ID 值，再根据 ID 值关联到表 test2，再判 断 test2 里面 <span class="hljs-keyword">name</span>的值是否等于 <span class="hljs-string">&#x27;./Mysql高级课程&#x27;</span>。<br><br>方案<span class="hljs-number">2</span>:可以先从表 test2 里面取出 <span class="hljs-keyword">name</span>=<span class="hljs-string">&#x27;./Mysql高级课程&#x27;</span> 的记录的 ID 值，再根据 ID 值关联到 test1， 再判断 test1 里面 <span class="hljs-keyword">name</span>的值是否等于 zhangwei。<br><br>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化<br>器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。<br>如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等。后面讲到索引我们再谈。<br></code></pre></td></tr></table></figure><p>在查询优化器中，可以分为 <strong>逻辑查询</strong> 优化阶段和 <strong>物理查询</strong> 优化阶段。</p><ol start="4"><li><span style="color:red;"><strong>执行器:</strong></span></li></ol><p>截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 <strong>执行器阶段</strong> 。</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702221820015.png" alt="image-20230702221820015" style="zoom:50%;"><p>在执行之前需要判断该用户是否 <strong>具备权限</strong> 。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from test where id=1;<br></code></pre></td></tr></table></figure><p>比如:表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是<span class="hljs-number">1</span>，如果不是则跳过，如果是则将这行存在结果集中<span class="hljs-comment">; 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</span><br><br>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。<br></code></pre></td></tr></table></figure><p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p><p>SQL 语句在 MySQL 中的流程是: SQL语句→查询缓存→解析器→优化器→执行器 。</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702222020863.png" alt="image-20230702222020863"></p><h3 id="2-2-SQL语法顺序"><a href="#2-2-SQL语法顺序" class="headerlink" title="2.2 SQL语法顺序"></a>2.2 SQL语法顺序</h3><p>随着Mysql版本的更新换代，其优化器也在不断的升级，优化器会分析不同执行顺序产生的性能消耗不同</p><p>而动态调整执行顺序。 需求:查询每个部门年龄高于20岁的人数且高于20岁人数不能少于2人，显示人数最多的第一名部门信息 下面是经常出现的查询顺序:</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702222604812.png" alt="image-20230702222604812"></p><h2 id="三、数据库缓冲池-buffer-pool"><a href="#三、数据库缓冲池-buffer-pool" class="headerlink" title="三、数据库缓冲池(buffer pool)"></a>三、数据库缓冲池(buffer pool)</h2><p><strong>Innodb</strong>存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页 面(包括读页面、写页面、创建新页面等操作)。而磁盘 I&#x2F;O 需要消耗的时间很多，而在内存中进行操 作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会<strong>申请占用内存作为数据的缓冲池</strong>，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的<strong>Buffer Pool</strong>之后才可以访 问。</p><p>这样做的好处是可以让磁盘活动最小化，<strong>从而减少磁盘IO次数</strong> 。要知道，这种策略对提 升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p><h3 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a>3.1 缓冲池 vs 查询缓存</h3><p><span style="color:red;"><strong>缓冲池和查询缓存是一个东西吗?不是。</strong></span></p><blockquote><p>缓冲池(Buffer Pool)</p></blockquote><p>首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。</p><p>在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种 数据的缓存，如下图所示:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224021722.png" alt="image-20230702224021722" style="zoom:50%;"><p>从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典 信息等。</p><blockquote><p>查询缓存</p></blockquote><p>那么什么是查询缓存呢?</p><p>查询缓存是提前把 <strong>查询结果缓存</strong> 起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表 发生变化，查询缓存就会失效，因此命中率低。</p><h3 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3.2 缓冲池如何读取数据"></a>3.2 缓冲池如何读取数据</h3><p>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。</p><p>缓存在数据库中的结构和作用如下图所示:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224232744.png" alt="image-20230702224232744" style="zoom:50%;"><p><strong>如果我们执行 SQL 语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗?</strong></p><h3 id="3-3-查看-设置缓冲池的大小"><a href="#3-3-查看-设置缓冲池的大小" class="headerlink" title="3.3 查看&#x2F;设置缓冲池的大小"></a>3.3 查看&#x2F;设置缓冲池的大小</h3><p>如果你使用的是InnoDB存储引擎，可以通过查看 innodb_buffer_pool_size 变量来查看缓冲池的大 小。命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;innodb_buffer_pool_size&#x27;;<br></code></pre></td></tr></table></figure><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224323248.png" alt="image-20230702224323248" style="zoom:50%;"><p>你能看到此时 InnoDB 的缓冲池大小只有 134217728&#x2F;1024&#x2F;1024&#x3D;128MB。我们可以修改缓冲池大小，比如 改为256MB，方法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global innodb_buffer_pool_size = 268435456;<br></code></pre></td></tr></table></figure><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224348834.png" alt="image-20230702224348834" style="zoom:50%;"><p>或者:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[server]</span><br><span class="hljs-attr">innodb_buffer_pool_size</span> = <span class="hljs-number">268435456</span><br></code></pre></td></tr></table></figure><p>然后再来看下修改后的缓冲池大小，此时已成功修改成了 256 MB:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224545465.png" alt="image-20230702224545465" style="zoom:50%;"><h3 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a>3.4 多个Buffer Pool实例</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[server]</span><br><span class="hljs-attr">innodb_buffer_pool_instances</span> = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这样就表明我们要创建2个 Buffer Pool 实例。 </p><p>我们看下如何查看缓冲池的个数，使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;innodb_buffer_pool_instances&#x27;;<br></code></pre></td></tr></table></figure><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702224635740.png" alt="image-20230702224635740" style="zoom:50%;"><p>那每个 Buffer Pool 实例实际占多少内存空间呢?其实使用这个公式算出来的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">innodb_buffer_pool_size/innodb_buffer_pool_instances<br></code></pre></td></tr></table></figure><p>也就是总共的大小除以实例的个数，结果就是每个 Buffer Pool 实例占用的大小。</p><h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><blockquote><p>为什么使用索引</p></blockquote><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702233218281.png" alt="image-20230702233218281"></p><p>假如给数据使用 二叉树 这样的数据结构进行存储，如下图所示</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702233322881.png" alt="image-20230702233322881" style="zoom:50%;"><h3 id="4-1-索引及其优缺点"><a href="#4-1-索引及其优缺点" class="headerlink" title="4.1 索引及其优缺点"></a>4.1 索引及其优缺点</h3><blockquote><p>索引概述</p></blockquote><p>MySQL官方对索引的定义为: <strong>索引(Index)是帮助MySQL高效获取数据的数据结构 。</strong></p><p><strong>索引的本质: 索引是数据结构。</strong>你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。</p><p>这些数据结构以某种方式指向数据， 这样就可以在这些数据结构的基础上<strong>实现高级查找算法</strong></p><blockquote><p>优点</p></blockquote><p>(1)类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本, 这也是创建索引的原因</p><p>(2)通过创建唯一索引，可以保证数据库表中每一行数据的唯一性</p><p>(3)参考完整性方面，可以加速表与表直接的连接速度 。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度</p><p>(4)在使用分组和排序子句进行数据查询时，可以显著提高查询与分组的速度, 降低了cpu的消耗</p><blockquote><p>缺点</p></blockquote><p>增加索引也有许多不利的方面，主要表现在如下几个方面:</p><p>(1)创建索引和维护索引要消耗时间 ，并 且随着数据量的增加，所耗费的时间也会增加。</p><p>(2)索引需要占磁盘空间，除了数据表占数据空间之 外，每一个索引还要占一定的物理空间，存储在磁盘上 ，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</p><p>(3)虽然索引大大提高了查询速度，同时却会降低表的更新速度 。当对表 中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</p><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><h3 id="4-2-索引的数据结构推演"><a href="#4-2-索引的数据结构推演" class="headerlink" title="4.2 索引的数据结构推演"></a>4.2 索引的数据结构推演</h3><p>先来看一个精确匹配的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT [列名列表] FROM 表名 WHERE 列名 = xxx;<br></code></pre></td></tr></table></figure><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录 所在的页，所以只能 沿着 一直往下找，在每一个页中根据我们上面的查找方式去查 找指定的记录。因为要遍历所有的数据页，所以这种方式显然是 的。如果一个表有一亿条记录 呢?此时索引应运而生。</p><blockquote><p>设计索引</p></blockquote><p>建一个表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE index_demo(<br>-&gt; c1 INT,<br>-&gt; c2 INT,<br>    -&gt;     c3 CHAR(1),<br>    -&gt;     PRIMARY KEY(c1)<br>    -&gt; ) ROW_FORMAT = Compact;<br></code></pre></td></tr></table></figure><p>这个新建的index_demo 表中有2个INT类型的列，1个CHAR(1)类型的列，而且我们规定了c1列为主键， 这个表使用Compact行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702234605609.png" alt="image-20230702234605609" style="zoom:50%;"><p>我们只在示意图里展示记录的这几个部分:</p><ul><li><p>record_type :记录头信息的一项属性，表示记录的类型， 0 表示普通记录、 2 表示最小记录、 3 表示最大记录、 1 暂时还没用过，下面讲。</p></li><li><p>next_record :记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用箭头来表明下一条记录是谁。</p></li><li><p>各个列的值: 这里只记录在 index_demo 表中的三个列，分别是 c1 、 c2 和 c3 。</p></li><li><p>其他信息: 除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</p></li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702234814768.png" alt="image-20230702234814768" style="zoom:50%;"><p>把一些记录放到页里的示意图就是:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702235235390.png" alt="image-20230702235235390" style="zoom:50%;"><blockquote><p>一个简单的索引设计方案</p></blockquote><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢?因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们想快速定位到需要查找的记录在哪些数据页中该咋办?我们可以为快速定位记录所在的数据页而想快速的定位到需要查找的记录在哪些数据页建立一个目录，建这个目录必须完成下边这些事:</p><ul><li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</li><li>给所有的页建立一个目录项。</li></ul><p>所以我们为上边几个页做好的目录就像这样子:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702235554193.png" alt="image-20230702235554193" style="zoom:50%;"><p>以 页28 为例，它对应目录项2 ，这个目录项中包含着该页的页号 28 以及该页中用户记录的最小主键值 5 。我们只需要把几个目录项在物理存储器上连续存储(比如:数组)，就可以实现根据主键 值快速查找某条记录的功能了。比如:查找主键值为 20 的记录，具体查找过程分两步:</p><ol><li>先从目录项中根据 二分法 快速确定出主键值为 20 的记录在 目录项3 中(因为 12 &lt; 20 &lt; 209 )，它对应的页是 页9 。</li><li>再根据前边说的在页中查找记录的方式去 页9 中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为 索引 。</p><blockquote><p>迭代1次:目录项纪录的页</p></blockquote><p>我们把前边使用到的目录项放到数据页中的样子就是这样:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230702235841547.png" alt="image-20230702235841547" style="zoom:50%;"><p>从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调目录项纪录和普通的用户记录的不同点:</p><ul><li>目录项记录的record_type 值是1，而普通用户记录的record_type值是0。</li><li>目录项记录只有两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列 ，另外还有InnoDB自己添加的隐藏列。</li><li>了解:记录头信息里还有一个叫min_rec_mask的属性，只有在存储目录项纪录的页中的主键值最小的目录项记录的min_rec_mask值为 1 ，其他别的记录的min_rec_mask值都是 0 。</li></ul><p>**相同点:**两者用的是一样的数据页，都会为主键值生成 Page Directory (页目录)，从而在按照主键 值进行查找时可以使用 二分法 来加快查询速度。</p><p>现在以查找主键为 20 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步:</p><ol><li><p>先到存储目录项记录的页，也就是页30中通过 二分法 快速定位到对应目录项，因为 12 &lt; 20 &lt; 209 ，所以定位到对应的记录所在的页就是页9。</p></li><li><p>再到存储用户记录的页9中根据 二分法 快速定位到主键值为 20 的用户记录。</p></li></ol><blockquote><p>迭代2次:多个目录项纪录的页</p></blockquote><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703000712685.png" alt="image-20230703000712685" style="zoom:50%;"><p>从图中可以看出，我们插入了一条主键值为320的用户记录之后需要两个新的数据页:</p><ul><li>为存储该用户记录而新生成了 页31 。</li><li>因为原先存储目录项记录的 页30的容量已满 (我们前边假设只能存储4条目录项记录)，所以不得 不需要一个新的 页32 来存放 页31 对应的目录项。</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要3个步骤，以查找主键值为 20 的记录为例:</p><ol><li>确定 目录项记录页</li></ol><p>​我们现在的存储目录项记录的页有两个，即 页30 和 页32 ，又因为页30表示的目录项的主键值的 范围是 [1, 320) ，页32表示的目录项的主键值不小于 320 ，所以主键值为 20 的记录对应的目 录项记录在 页30 中。</p><ol start="2"><li><p>通过目录项记录页 确定用户记录真实所在的页 。</p><p>在一个存储 目录项记录 的页中通过主键值定位一条目录项记录的方式说过了。</p></li><li><p>在真实存储用户记录的页中定位到具体的记录。</p></li></ol><blockquote><p>迭代3次:目录项记录页的目录页</p></blockquote><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703001029859.png" alt="image-20230703001029859" style="zoom:50%;"><p>如图，我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表页30和页32，如果用 户记录的主键值在 [1, 320) 之间，则到页30中查找更详细的目录项记录，如果主键值 不小于320 的 话，就到页32中查找更详细的目录项记录。</p><p>我们可以用下边这个图来描述它:</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703002026722.png" alt="image-20230703002026722" style="zoom:50%;"><p>这个数据结构，它的名称是 B+树 。</p><blockquote><p>B+Tree</p></blockquote><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第 0 层， 之后依次往上加。之前我们做了一个非常极端的假设:存放用户记录的页 最多存放3条记录 ，存放目录项 记录的页 最多存放4条记录 。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录 的叶子节点代表的数据页可以存放 100条用户记录 ，所有存放目录项记录的内节点代表的数据页可以存 放 1000条目录项记录 ，那么:</p><ul><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放 100 条记录。</li><li>如果B+树有2层，最多能存放 1000x100&#x3D;10,0000 条记录。</li><li>如果B+树有3层，最多能存放  1000x1000x100&#x3D;10000,0000 条记录。</li><li>如果B+树有4层，最多能存放 1000x1000x1000x100&#x3D;1000,0000,0000条记录。相当多的记录!!!</li></ul><p>你的表里能存放 100000000000 条记录吗?所以一般情况下，我们 用到的B+树都不会超过4层 ，那我们 通过主键值去查找某条记录最多只需要做4个页面内的查找(查找3个目录项页和一个用户记录页)，又 因为在每个页面内有所谓的 Page Directory (页目录)，所以在页面内也可以通过 二分法 实现快速 定位记录。</p><h3 id="4-3-常见索引概念"><a href="#4-3-常见索引概念" class="headerlink" title="4.3 常见索引概念"></a>4.3 常见索引概念</h3><p>索引按照物理实现方式，索引可以分为 2 种:聚簇(聚集)和非聚簇(非聚集)索引。我们也把非聚集索引称为二级索引或者辅助索引。</p><blockquote><p>聚簇索引</p></blockquote><p><strong>特点:</strong></p><ol><li>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义:</li></ol><ul><li>页内 的记录是按照主键的大小顺序排成一个 单向链表 。</li><li>各个存放用户记录页也是根据页中用户记录的主键大小顺序排成一个双向链表 。</li><li>存放目录页记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排出一个双向链表</li></ul><ol start="2"><li>B+树的 叶子节点 存储的是完整的用户记录。</li></ol><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值(包括隐藏列)。</p><p><strong>优点:</strong></p><ul><li><strong>数据访问更快</strong> ，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非 聚簇索引更快</li><li>聚簇索引对于主键的 排序查找 和 范围查找 速度非常快</li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多 个数据块中提取数据，所以 节省了大量的io操作 。</li></ul><p><strong>缺点:</strong></p><ul><li>插入速度严重依赖于插入顺序 ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个 <strong>自增的ID列为主键</strong></li><li>更新主键的代价很高 ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为 不可更新</li><li>二级索引访问需要两次索引查找 ，第一次找到主键值，第二次根据主键值找到行数据</li></ul><blockquote><p> 二级索引(辅助索引、非聚簇索引)</p></blockquote><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703003213262.png" alt="image-20230703003213262" style="zoom:50%;"><p>**概念:**回表 我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根 据c2列的值查找到完整的用户记录的话，仍然需要到 <strong>聚簇索引</strong> 中再查一遍，这个过程称为 回表 。也就 是根据c2列的值查询一条完整的用户记录需要使用到 2 棵B+树!</p><p>**问题:**为什么我们还需要一次 <strong>回表</strong> 操作呢?直接把完整的用户记录放到叶子节点不OK吗?</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703003407727.png" alt="image-20230703003407727" style="zoom:50%;"><blockquote><p> 联合索引</p></blockquote><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照 c2和c3列 的大小进行排序，这个包含两层含义:</p><ul><li>先把各个记录和页按照c2列进行排序</li><li>在记录的c2列相同的情况下，采用c3列进行排序</li></ul><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为 联合索引 ，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下:</p><ul><li>建立 <strong>联合索引</strong> 只会建立如上图一样的1棵B+树。</li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树。</li></ul><blockquote><p>MyISAM 与 InnoDB对比</p></blockquote><p><span style="color:red;"><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含1个聚簇索引是不同的。小结两种引擎中索引的区别:</strong></span></p><ol><li>在InnoDB存储引擎中，我们只需要根据主键值对 聚簇索引 进行一次查找就能找到对应的记录，而在 MyISAM 中却需要进行一次 回表 操作，意味着MyISAM中建立的索引相当于全部都是 二级索引 。</li><li>InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是 分离的 ，索引文件仅保存数 据记录的地址。</li><li>InnoDB的非聚簇索引data域存储相应记录 主键的值 ，而MyISAM索引记录的是 地址 。换句话说， InnoDB的所有非聚簇索引都引用主键作为data域。</li><li>MyISAM的回表操作是十分 快速 的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通 过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</li><li>InnoDB要求表 必须有主键 ( MyISAM可以没有 )。如果没有显式指定，则MySQL系统会自动选择一个 可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐 含字段作为主键，这个字段长度为6个字节，类型为长整型。</li></ol><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703004201465.png" alt="image-20230703004201465" style="zoom:50%;"><h3 id="4-4-索引的代价"><a href="#4-4-索引的代价" class="headerlink" title="4.4 索引的代价"></a>4.4 索引的代价</h3><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗:</p><ul><li>空间上的代价</li></ul><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会 占用 16KB 的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p><ul><li>时间上的代价</li></ul><p>每次对表中的数据进行 操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每 层节点都是按照索引列的值 而组成了 双向链表 。不论是叶子节点中的记录，还 是内节点中的记录(也就是不论是用户记录还是目录项记录)都是按照索引列的值从小到大的顺序 而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需 要额外的时间进行一些 记录移位 ， 页面分裂 、 页面回收 等操作来维护好节点和记录的排序。如果 我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p><h3 id="4-5-索引的声明与使用"><a href="#4-5-索引的声明与使用" class="headerlink" title="4.5 索引的声明与使用"></a>4.5 索引的声明与使用</h3><blockquote><p>索引的分类</p></blockquote><p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p><ul><li>从功能上说，索引主要有 4 种，分别是<ul><li>普通索引: 不加任何限制条件，只为提高查询效率的索引。</li><li>唯一索引: 限制该索引的值必须是唯一的，但允许有空值，一张表可以有多个唯一索引</li><li>主键索引: 一种特殊的唯一索引，增加了不为空的约束，一张表最多只有一个主键索引。</li><li>全文索引: 利用<code>分词技术</code>等多种算法分析关键词的频率和重要性筛选，适合大型数据集。</li></ul></li><li>根据物理实现方式来说，索引可以分为 2 种:<ul><li>聚簇索引: 针对主键构建的索引，是一种数据存储方式，表的数据行都存放在索引树的叶子页中。</li><li>非聚簇索引: 针对非主键构建的索引，它不保存完整记录，且按照索引列排序</li></ul></li><li>按照作用字段进行划分，分成:<ul><li>单列索引: 单个列上创建的索引，可以是普通索引、唯一索引、主键索引等</li><li>联合索引: 多个字段组合创建的索引，使用联合索引时遵循 最左前缀原则。</li></ul></li></ul><p>小结:不同的存储引擎支持的索引类型也不一样 InnoDB :支持 B-tree、Full-text 等索引，不支持 Hash 索引; MyISAM : 支持 B-tree、Full-text 等索引，不支持 Hash 索引; Memory :支持 B-tree、Hash 等 索引，不支持 Full-text 索引; NDB :支持 Hash 索引，不支持 B-tree、Full-text 等索引; Archive :不支 持 B-tree、Hash、Full-text 等索引;</p><blockquote><p>创建索引</p></blockquote><p>创建表的时候创建索引</p><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept(<br>dept_id INT PRIMARY KEY AUTO_INCREMENT,<br>dept_name VARCHAR(20)<br>);<br><br>CREATE TABLE emp(<br>emp_id INT PRIMARY KEY AUTO_INCREMENT,<br>emp_name VARCHAR(20) UNIQUE,<br>dept_id INT,<br>CONSTRAINT emp_dept_id_fk FOREIGN KEY(dept_id) REFERENCES dept(dept_id)<br>);<br></code></pre></td></tr></table></figure><p>但是，如果显式创建表时创建索引的话，基本语法格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE table_name [col_name data_type]<br>[UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY] [index_name] (col_name [length]) [ASC |<br>DESC]<br></code></pre></td></tr></table></figure><ul><li><code>UNIQUE</code>、 <code>FULLTEXT</code> 和 <code>SPATIAL</code> 为可选参数，分别表示唯一索引、全文索引和空间索引; 与 KEY 为同义词，两者的作用相同，用来指定创建索引;</li><li><code>INDEX</code> 与<code>KEY</code>为同义词，两者的作用相同，用来指定创建索引;</li><li><code>index_name</code>指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名;</li><li><code>col_name</code>为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择;</li><li><code>length</code>为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度;</li><li><code>ASC</code>和<code>DESC</code>指定升序或者降序的索引值存储。</li></ul><ol><li>创建普通索引</li></ol><p>在book表中的year_publication字段上建立普通索引，SQL语句如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE book(<br>book_id INT ,<br>book_name VARCHAR(100),<br>authors VARCHAR(100),<br>info VARCHAR(100) ,<br>comment VARCHAR(100),<br>year_publication YEAR,<br>INDEX(year_publication)<br>);<br></code></pre></td></tr></table></figure><ol start="2"><li>创建唯一索引</li></ol><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test1(<br>id INT NOT NULL,<br>name varchar(30) NOT NULL,<br>UNIQUE INDEX uk_idx_id(id)<br>);<br></code></pre></td></tr></table></figure><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW INDEX FROM test1 \G<br></code></pre></td></tr></table></figure><ol start="3"><li>主键索引</li></ol><p>设定为主键后数据库会自动建立索引，innodb为聚簇索引，语法:</p><ul><li>随表一起建索引:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student (<br>  id INT(10) UNSIGNED  AUTO_INCREMENT ,<br>  student_no VARCHAR(200),<br>  student_name VARCHAR(200),<br>  PRIMARY KEY(id)<br>);<br></code></pre></td></tr></table></figure><ul><li>删除主键索引:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student<br>drop PRIMARY KEY ;<br></code></pre></td></tr></table></figure><ul><li>修改主键索引:必须先删除掉(drop)原索引，再新建(add)索引</li></ul><ol start="4"><li>创建单列索引</li></ol><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test2(<br>id INT NOT NULL,<br>name CHAR(50) NULL,<br>INDEX single_idx_name(name(20))<br>);<br></code></pre></td></tr></table></figure><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW INDEX FROM test2 \G<br></code></pre></td></tr></table></figure><ol start="5"><li>创建组合索引</li></ol><p>举例:创建表test3，在表中的id、name和age字段上建立组合索引，SQL语句如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test3(<br>id INT(11) NOT NULL,<br>name CHAR(30) NOT NULL,<br>age INT(11) NOT NULL,<br>info VARCHAR(255),<br>INDEX multi_idx(id,name,age)<br>);<br></code></pre></td></tr></table></figure><p>该语句执行完毕之后，使用SHOW INDEX 查看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW INDEX FROM test3 \G<br></code></pre></td></tr></table></figure><ol start="6"><li>创建全文索引</li></ol><p>举例1:创建表test4，在表中的info字段上建立全文索引，SQL语句如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test4(<br>id INT NOT NULL,<br>name CHAR(30) NOT NULL,<br>age INT NOT NULL,<br>info VARCHAR(255),<br>FULLTEXT INDEX futxt_idx_info(info)<br>) ENGINE=MyISAM;<br></code></pre></td></tr></table></figure><p>举例2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE articles (<br>    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,<br>    title VARCHAR (200),<br>    body TEXT,<br>    FULLTEXT index (title, body)<br>) ENGINE = INNODB ;<br></code></pre></td></tr></table></figure><p>创建了一个给title和body字段添加全文索引的表。</p><p>举例3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `papers` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `title` varchar(200) DEFAULT NULL,<br>  `content` text,<br>  PRIMARY KEY (`id`),<br>  FULLTEXT KEY `title` (`title`,`content`)<br>) ENGINE=MyISAM DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>不同于like方式的的查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM papers WHERE content LIKE ‘%查询字符串%’;<br></code></pre></td></tr></table></figure><p>全文索引用match+against方式查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM papers WHERE MATCH(title,content) AGAINST (‘查询字符串’);<br></code></pre></td></tr></table></figure><blockquote><p>注意点</p></blockquote><ol><li><p>使用全文索引前，搞清楚版本支持情况;</p></li><li><p>全文索引比 like + % 快 N 倍，但是可能存在精度问题;</p></li><li><p>如果需要全文索引的是大量数据，建议先添加数据，再创建索引</p></li><li><p>创建空间索引</p></li></ol><p>空间索引创建中，要求空间类型的字段必须为 <strong>非空</strong> 。</p><p> 举例:创建表test5，在空间类型为GEOMETRY的字段上创建空间索引，SQL语句如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test5(<br>geo GEOMETRY NOT NULL,<br>SPATIAL INDEX spa_idx_geo(geo)<br>) ENGINE=MyISAM;<br></code></pre></td></tr></table></figure><p>在已经存在的表上创建索引:</p><p>在已经存在的表中创建索引可以使用ALTER TABLE语句或者CREATE INDEX语句。</p><ol><li>使用ALTER TABLE语句创建索引 ALTER TABLE语句创建索引的基本语法如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">ALTER TABLE table_name ADD [UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY]<br>[index_name] (col_name[length],...) [ASC | DESC]<br></code></pre></td></tr></table></figure><ol start="2"><li>使用CREATE INDEX创建索引 CREATE INDEX语句可以在已经存在的表上添加索引，在MySQL中， CREATE INDEX被映射到一个ALTER TABLE语句上，基本语法结构为:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name<br>ON table_name (col_name[length],...) [ASC | DESC]<br></code></pre></td></tr></table></figure><blockquote><p> 删除索引</p></blockquote><ol><li>使用ALTER TABLE删除索引 ALTER TABLE删除索引的基本语法格式如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE table_name DROP INDEX index_name;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用DROP INDEX语句删除索引 DROP INDEX删除索引的基本语法格式如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP INDEX index_name ON table_name;<br></code></pre></td></tr></table></figure><p>提示: 删除表中的列时，如果要删除的列为索引的组成部分，则该列也会从索引中删除。如果组成 索引的所有列都被删除，则整个索引将被删除。</p><h3 id="4-6-索引的设计原则"><a href="#4-6-索引的设计原则" class="headerlink" title="4.6 索引的设计原则"></a>4.6 索引的设计原则</h3><blockquote><p>适合创建索引的情况</p></blockquote><ul><li>唯一性约束的字段</li><li>频繁使用where查询的字段</li><li>经常GROUP BY 和 ORDER BY 的列</li><li>UPDATE，DELETE 时的 where 条件列</li><li>DISTINCT的字段</li><li>多表JOIN连接时创建索引注意<ul><li>连接表的数量尽量不超过3张，每加一张表就相当于嵌套一次循环</li><li>对 where 条件创建索引</li><li>用于连接的字段创建索引</li></ul></li></ul><ul><li>尽量给数据类型小的列添加索引，节省空间，让一页存在更多记录，比较速度页更快</li><li>使用区分度高的列作为索引</li><li>联合索引时，使用最频繁的列放在联合索引的左侧</li></ul><blockquote><p>不适合创建索引的情况</p></blockquote><ul><li><p>where，group by ，orderby 条件使用不到的字段不要加索引</p></li><li><p>数据量小的表不要添加索引</p></li><li><p>有大量重复数据的列不要添加索引</p></li><li><p>经常更新的表尽量少创建索引</p></li><li><p>不建议使用无序的值作为索引</p></li><li><p>不再使用或很少使用的索引及时删除</p></li></ul><h3 id="4-7-索引失效场景"><a href="#4-7-索引失效场景" class="headerlink" title="4.7 索引失效场景"></a>4.7 索引失效场景</h3><ol><li><strong>最佳左前缀规则</strong></li></ol><ul><li>在MySQL建立联合索引时会遵守最佳左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</li><li>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">结论：MySQL可以为多个字段创建索引，一个索引可以包括<span class="hljs-number">16</span>个字段<span class="hljs-comment">(默认)</span>。对于多列索引，过滤条件要使用索引必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法被使用。如果查询条件中没有使用这些字段中第<span class="hljs-number">1</span>个字段时，多列<span class="hljs-comment">(或联合)</span>索引不会被使用。<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>主键插入顺序</strong></li></ol><ul><li>对于一个使用InnoDB存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在<code>聚簇索 引的叶子节点的。</code></li><li>而记录又是存储在数据页中的，数据页和记录又是<code>按照记录主键值从小到大的顺序进行排序</code>，所以如果我们插入的记录的主键值是依次增大的话，那我们每插满一个数据页就换到下一个数据页继续插</li><li>而如果我们插入的主键值忽大忽小的话，就会造成把一条数据插入一个已经满了的数据页，<code>产生页分裂</code>，造成性能损耗，所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的主键值依次递增。</li></ul><ol start="3"><li><strong>计算，函数，类型转换导致索引失效</strong></li></ol><p>比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) = &#x27;abc&#x27;; <br><br>SELECT SQL_NO_CACHE id, stuno, NAME FROM student WHERE stuno+1 = 900001;<br># NAME 为VARCHAR，转成 123 int<br>SELECT SQL_NO_CACHE * FROM student WHERE NAME = 123; <br></code></pre></td></tr></table></figure><p>这种SQL必须经过全表扫描，然后才能那每条数据来计算转换，根本使用不到索引</p><ol start="4"><li><strong>范围条件右边的列索引失效</strong></li></ol><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># age,classId,NAME 联合索引<br>CREATE INDEX idx_age_classId_name ON student(age,classId,NAME);<br><br>SELECT SQL_NO_CACHE * FROM student <br>WHERE student.age=30 AND student.classId&gt;20 AND student.name = &#x27;abc&#x27; ; <br></code></pre></td></tr></table></figure><p>下边这条查询语句就只能用到age,classId索引，name就没有用到，<code>因为 classId&gt;20 为范围条件</code>，它右边的索引列会失效。</p><p><strong>所以在创建索引时，务必把涉及范围查找的字段放在最后</strong></p><ol start="5"><li><strong>不等于索引失效</strong></li></ol><p>这个很简单，对于不等于查询，我们只能一个个比较，使用不到索引</p><ol start="6"><li><strong>is null可以使用索引，is not null无法使用索引</strong></li></ol><p>和等于不等于有点像，is null 就相当于等于，is not null 就相当于不等于</p><p><strong>结论：最好在设计数据表的时候就将字段设置为NOT NULL约束，如果有些字段就是要为null，可以设置默认值，比如你可以将 INT 类型的字段，默认值设置为0，将字符类型的默认值设置为空字符串(‘’)。</strong></p><ol start="7"><li><strong>like以通配符%开头索引失效</strong></li></ol><p>like以确定字符开头，是可以使用索引的，但是以通配符%开头无法使用，因为它上来就不知道怎么查，就只能先全表查了</p><ol start="8"><li><strong>OR 前后存在非索引的列，索引失效</strong></li></ol><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># age 索引<br>CREATE INDEX idx_age ON student(age);<br><br>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 10 OR classid = 100;<br></code></pre></td></tr></table></figure><p>下边这条查询语句，一个有索引，一个没索引，OR 还是要全表扫描，索性就没有用。</p><h3 id="4-8-关联查询、子查询和排序相关优化"><a href="#4-8-关联查询、子查询和排序相关优化" class="headerlink" title="4.8 关联查询、子查询和排序相关优化"></a>4.8 关联查询、子查询和排序相关优化</h3><blockquote><p>关联查询优化</p></blockquote><p>情况1：左外连接(和右外连接相似)</p><p>对于左外连接来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SQL_NO_CACHE * FROM a LEFT JOIN b ON a.字段 = b.字段;<br></code></pre></td></tr></table></figure><ul><li>如果不加索引，他们两个表都会进行全表扫描，MySQL会自动使用上<code>缓存</code>提高效率。</li></ul><ul><li>如果只添加一个索引，一定要<code>给被驱动表</code>，也就是 b 表加， 因为 a 为主表，无论加与不加都会全表扫描出来。</li><li>但 a，b 表的那俩条件字段一定要相同类型，否则<code>类型转换</code>会导致索引失效。</li></ul><p>情况2：内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SQL_NO_CACHE * FROM a INNER JOIN b ON a.字段 = b.字段;<br></code></pre></td></tr></table></figure><ul><li>对于内连接来说，查询优化器可以决定谁作为驱动表，谁作为被驱动表出现的</li><li>如果表的连接条件中只能有一个字段有索引，则有索引的字段所在的表会被作为被驱动表出现。</li><li>在两个表的连接条件都存在索引的情况下，会选择小表作为驱动表。<code>小表驱动大表</code></li></ul><blockquote><p>join语句原理</p></blockquote><ul><li><p>JOIN 方式连接多个表，本质是各个表之间数据的<code>循环匹配</code>。</p></li><li><p>MySQL5.5版本之前，MySQL只支持一种表间关联方式，就是<code>嵌套循环</code>(Nested Loop Join)。如果关联表的数据量很大，则 JOIN 关联的执行时间会非常长。</p></li><li><p>在MySQL5.5以后的版本中，MySQL通过引入BNLJ算法来优化嵌套执行。</p></li></ul><p>如下：</p><ul><li>驱动表就是主表，被驱动表就是从表、非驱动表。</li><li>简单嵌套循环<ul><li>两个表都没有索引，每次从主表A取一条数据，遍历从表B匹配，将匹配到的数据放到 result</li></ul></li></ul><ul><li><p>索引嵌套循环</p><ul><li><p>其优化的思路主要是<code>为了减少内层表数据的匹配次数</code>，所以要求被驱动表上必须有索引才行。</p></li><li><p>通过外层表匹配条件直接与内层表索引进行匹配，避免和内层表的每条记录去进行比较，这样极大的减少了对内层表的匹配次数。</p></li><li><p>如果被驱动表加索引，效率是非常高的，但如果索引不是主键索引，所以还得进行一次<code>回表</code>查询。相比，<code>被驱动表的索引是主键索引，效率会更高</code>。</p></li></ul></li><li><p>块嵌套循环连接</p><ul><li><p>如果存在索引，那么会使用index的方式进行join，如果join的列没有索引，被驱动表要扫描的次数太多了。每次访问被驱动表，其表中的记录都会被加载到内存中，然后再从驱动表中取一条与其匹配，匹配结束后清除内存，然后再从驱动表中加载一条记录，然后把被驱动表的记录在加载到内存匹配，这样周而复始，<code>大大增加了1O的次数</code>。</p></li><li><p>为了减少被驱动表的IO次数，就出现了块嵌套循环连接的方式。</p></li></ul><ul><li>不再是逐条获取驱动表的数据，而是一块一块的获取，引入了join buffer缓冲区，将驱动表join相关的部分数<br>据列大小缓存到join bufferr中，然后全表扫描被驱动表，被驱动表的每一条记录一次性和join buffer中的所有驱动表记录进行匹配（内存中操作），将简单嵌套循环中的多次比较合并成一次，降低了被驱动表的访问频率。<br><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703102832651.png" alt="image-20230703102832651"></li></ul></li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">缓存时不光缓存关联表的列，select 的列也会缓存起来，所以，查询时尽量减少不必要的字段。`<br>`注意：小表驱动大表的含义——小的结果集驱动大的结果集，为了减少内存循环次数。<br></code></pre></td></tr></table></figure><p>从MySQL8.0开始，废弃了BNLJ（块嵌套查询），加入了 hash join，hash join是大数据集连接时的常用方式，但他只能应用于等值连接。</p><blockquote><p>子查询优化</p></blockquote><ul><li>使用子查询可以进行SELECT语句的<code>嵌套查询</code>，即一个SELECT查询的结果作为另一个SELECT语句的条件。</li><li>子查询可以<code>一次性完成很多逻辑上需要多个步骤才能完成的SQL操作</code>。</li></ul><ul><li><p>子查询是MySQL的一项重要的功能，可以帮助我们通过一个SQL语句实现比较复杂的查询。但是，子查询的执行效率不高。原因：</p><ul><li>①执行子查询时，MySQL需要为内层查询语句的查询结果建立一个<code>临时表</code>，然后外层查询语句从临时表中查询记录。查询完毕后，再<code>撤销这些临时表</code>。这样会消耗更多的CPU和I&#x2F;O资源，产生大量的慢查询。</li><li>②子查询的结果集存储的临时表，<code>不论是内存临时表还是磁盘临时表都不会存在索引</code>，所以查询性能会受到一定的影响。</li><li>③对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</li></ul></li><li><p>在MySQL中，可以使用连接（JOIN）查询来替代子查询。<code>连接查询不需要建立临时表</code>，其速度比子查询要快，如果查询中使用索引的话，性能就会更好。</p></li></ul><blockquote><p>排序相关优化</p></blockquote><p>问题：WHERE条件上加了索引，为什么还要在 ORDER BY字段加索引？</p><ul><li>在MySQL中，支持两种排序方式，分别是 FileSort 和 Index 排序。</li><li>lndex排序中，索引可以保证数据的有序性，不需要再进行排序，效率更高。</li><li>FileSort排序则一般在内存中进行排序，占用CPU较多。如果待排结果较大，会产生临时文件I&#x2F;O到磁盘进行排序的情况，效率较低。</li></ul><p>优化建议：</p><ol><li>SQL中，可以在 WHERE 子句 和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中避免全表扫描，在ORDER BY子句避免使用 FileSort 排序。</li><li>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列,如果不同就使用联合索引。</li><li>无法使用lndex时，需要对 FileSort 方式进行调优。</li></ol><p><strong>其实具体是否使用索引，还是由优化器根据数据量计算决定的，我们添加索引，最起码是提供了一种方案。</strong></p><p><strong>总之，在两个索引同时存在时，MySQL会自动选择最优的方案，但是，随着数据量的变化，选择的索引也会随之变化。</strong><br><strong>当 范围条件 和 GROUP BY 或者 ORDER BY 字段出现二选一时，优先观察条件字段的过滤数量，如果过滤的足够多，而需要排序的数据不多时，优先把索引放在范围字段，反之亦然。</strong></p><blockquote><p>优化Group by</p></blockquote><ul><li>group by使用索引的原则几乎跟order by一致，group by即使没有过滤条件用到索引，也可以直接使用索引。</li><li>group by 先排序再分组，遵照索引建的最佳左前缀法则</li><li>where效率高于having，能写在where限定的条件就不要写在having中了</li><li>减少使用order by，能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct 这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li><li>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li></ul><h3 id="4-9-覆盖索引"><a href="#4-9-覆盖索引" class="headerlink" title="4.9 覆盖索引"></a>4.9 覆盖索引</h3><blockquote><p> 什么是覆盖索引?</p></blockquote><ul><li><p>解释一:</p><ul><li><p>索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。</p></li><li><p><strong>毕竟索引叶子节点存储了它们索引的数据，当能通过读取索引就可以得到想要的数据时，那就不需要回表了。</strong><br><strong>一个索引包含了满足查询结果的数据就叫做覆盖索引。</strong></p></li><li><p>覆盖索引一定是二级索引</p></li></ul></li><li><p>解释二：</p><ul><li><code>非聚簇复合索引的一种形式</code>，它包括在查询里的SELECT、JOIN和WHERE子句用到的所有列（即建索引的字段正好是覆盖查询条件中所涉及的字段）。<br>简单说就是，索引列＋主键包含SELECT到FROM之间查询的列。</li></ul></li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># id为主键，创建一个age,NAME联合索引<br>CREATE INDEX idx_age_name ON student (age,NAME);<br><br># 前边我们学习过，不等于会使索引失效，但是下边会打破这个规则，因为优化器根据执行成本选择到底使不使用<br><br># 这条语句就用不到索引，因为 SELECT * ，反之会回表操作，就没有必要使用索引了<br>EXPLAIN SELECT * FROM student WHERE age &lt;&gt; 20;<br><br># 这条就可以，因为查询的字段刚好就是索引字段，不需要回表<br>EXPLAIN SELECT age,NAME FROM student WHERE age &lt;&gt; 20;<br></code></pre></td></tr></table></figure><blockquote><p> 覆盖索引的好处</p></blockquote><p><strong>避免lnnodb表进行索引的二次查询（回表）</strong></p><ul><li>lnnodb是以聚集索引的顺序来存储的，对于lnnodb来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据，在查找到相应的键值后，还需通过主键进行二次查询才能获取我们真实所需要的数据。</li><li>在覆盖索引中，二级索引的键值中可以获取所要的数据，<strong>避免了对主键的二次查询</strong>，减少了IO操作，提升了查询效率</li></ul><p><strong>可以把随机 IO 变成顺序 IO 加快查询效率</strong></p><ul><li>由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。</li></ul><p><strong>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</strong></p><h3 id="4-10-索引下推"><a href="#4-10-索引下推" class="headerlink" title="4.10 索引下推"></a>4.10 索引下推</h3><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># key1是索引，如下查询<br>EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND key1 LIKE &#x27;%a&#x27;;<br></code></pre></td></tr></table></figure><ul><li>按照我们之前的学习，like以通配符%开头索引失效，应该是先用索引查询条件 key1 &gt; ‘z’，然后进行回表，在查到的记录中在查找条件 key1 LIKE ‘%a’</li><li>其实并不是的，优化器会 <strong>先用索引查询条件 key1 &gt; ‘z’，不回表，继续在这些索引中过滤条件 key1 LIKE ‘%a’，最后只回表一次，这就是索引条件下推。</strong></li></ul><p>ICP 默认是开启的，可以选择手动关闭</p><blockquote><p>ICP的使用条件</p></blockquote><ul><li>如果表访问的类型为range、ref、eq＿ref 和 ref＿or＿null 可以使用ICP</li><li>ICP可以用于 InnoDB 和 MyISAM 表，包括分区表 InnoDB 和 MyISAM 表</li><li>对于InnoDB表，ICP仅用于二级索引。I<strong>CP的目标是减少全行读取次数，从而减少I／O操作。</strong></li><li><strong>当SQL使用覆盖索引时，不支持ICP</strong>。因为这种情况下使用ICP不会减少 I&#x2F;O。</li><li>相关子查询的条件不能使用ICP。</li></ul><h3 id="4-11-其他相关策略"><a href="#4-11-其他相关策略" class="headerlink" title="4.11 其他相关策略"></a>4.11 其他相关策略</h3><blockquote><p>普通索引vs唯一索引</p></blockquote><p>假设，执行查询的语句是 select id from test where k&#x3D;5。</p><p>对于普通索引来说，查找到满足条件的第一个记录(5,500)后，需要查找下一个记录，直到碰到第一 个不满足k&#x3D;5条件的记录。 对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检 索。</p><p>那么，这个不同带来的性能差距会有多少呢?答案是， 微乎其微 。</p><blockquote><p>EXISTS 和 IN的选择</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM A WHERE cc IN（SELECT cc FROM B）<br><br>SELECT * FROM A WHERE EXISTS(SELECT cc FROM B WHERE B．cc＝A．cc)<br></code></pre></td></tr></table></figure><ul><li>当 A 小于 B 时，使用 EXISTS，因为 EXISTS 执行相当于一个嵌套循环，每次拿 A 的一条数据，去 B 里边循环比较。</li><li>当 B小于 A 时，使用 IN，因为 B 表较小，IN先计算出 IN 中语句的结果，然后外层直接精确匹配。</li></ul><p><strong>总结就是：小表驱动大表</strong></p><blockquote><p>COUNT(*) ，COUNT(1) 和 COUNT(字段)</p></blockquote><ul><li>COUNT(*) 和 COUNT(1)<ul><li>这两本质上没有什么区别，执行效率相差不多。</li><li>如果是在 MyISAM 中，统计表行数只需要O(1)复杂度，因为每张 MyISAM 表都有一个 meta 存储了row_count。</li><li>如果是InnoDB，需要全表扫描，因为 它支持事物，采用行级锁和MVCC机制，无法维护row_count，时间复杂度是O(n)。</li></ul></li></ul><ul><li>COUNT(字段)<ul><li>在 InnoDB 中，<code>要尽量采用二级索引</code>，因为聚簇索引包含信息较多。</li><li>对于COUNT(*) 和 COUNT(1)，其实系统会自动选择较小的二级索引来统计。</li></ul></li></ul><blockquote><p> 关于SELECT(*)</p></blockquote><ul><li>不建议使用：<ul><li>MySQL在解析的过程中，会<code>通过查询数据字典将 “ * ” 按序转换成所有列名</code>，这会大大的耗费资源和时间。</li><li>无法使用覆盖索引。</li></ul></li></ul><blockquote><p>关于LIMIT 1</p></blockquote><ul><li>针对的是会扫描全表的SQL语句，如果你可以确定结果集只有一条，那么加上 LIMIT 1 的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。</li><li>如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上LIMIT 1了。</li></ul><h2 id="五、性能分析工具使用"><a href="#五、性能分析工具使用" class="headerlink" title="五、性能分析工具使用"></a>五、性能分析工具使用</h2><h3 id="5-1-数据库服务器的优化步骤"><a href="#5-1-数据库服务器的优化步骤" class="headerlink" title="5.1 数据库服务器的优化步骤"></a>5.1 数据库服务器的优化步骤</h3><p>当我们遇到数据库调优问题的时候，该如何思考呢？这里把思考的流程整理成下面这张图。</p><p>整个流程划分成了<code>观察（Show status）</code>和<code>行动（Action）</code>两个部分。字母 S 的部分代表观察（会使用相应的分析工具），字母 A 代表的部分是行动（对应分析可以采取的行动）。</p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230703091218885.png" alt="image-20230703091218885" style="zoom:67%;"><p>我们可以通过观察了解数据库整体的运行状态，通过性能分析工具可以让我们了解执行慢的SQL都有哪些，查看具体的SQL执行计划，甚至是SQL执行中的每一步的成本代价，这样才能定位问题所在，找到了问题，再采取相应的行动。</p><p><strong>详细解释一下这张图:</strong></p><p>首先在S1部分，我们需要观察服务器的状态是否存在周期性的波动。如果<code>存在周期性波动</code>，有可能是周期性节点的原因，比如双十一、促销活动等。这样的话，我们可以通过A1这一步骤解决，也就是加缓存，或者更改缓存失效策略。</p><p>如果缓存策略没有解决，或者不是周期性波动的原因，我们就需要进一步<code>分析查询延迟和卡顿的原因</code>。接下来进入<br>S2这一-步，我们需要<code>开启慢查询</code>。慢查询可以帮我们定位执行慢的SQL语句。我们可以通过设置<code>long_query_time</code>参数定义“慢”的阈值，如果SQL执行时间超过了<code>long_query_time</code>，则会认为是慢查询。当收集上来这些慢查询之后，我们就可以通过分析工具对慢查询日志进行分析。</p><p>在S3这一步骤中，我们就知道了执行慢的SQL，这样就可以针对性地用<code>EXPLAIN</code>查看对应SQL语句的执行计划，或者使用<code>show profile</code>查看SQL中每一个步骤的时间成本。这样我们就可以了解SQL查询慢是因为执行时间长，还是等待时间长。</p><p>​    如果是SQL等待时间长，我们进入A2步骤。在这一步骤中，我们可以<code>调优服务器的参数</code>，比如适当增加数据库缓冲池等。如果是SQL执行时间长，就进入A3步骤，这一步中我们需要考虑是索引设计的问题?还是查询关联的数据表过多?还是因为数据表的字段设计问题导致了这一现象。然后在这些维度上进行对应的调整。</p><p>如果A2和A3都不能解决问题，我们需要考虑数据库自身的SQL查询性能是否已经达到了瓶颈，如果确认没有达到性能瓶颈，就需要重新检查，重复以上的步骤。如果已经达到了<code>性能瓶颈</code>，进入A4阶段，需要考虑<code>增加服务器</code>，采用读写分离的架构，或者考虑对数据库进行<code>分库分表</code>，比如垂直分库、垂直分表和水平分表等。</p><p>以上就是数据库调优的流程思路。如果我们发现执行SQL时存在不规则延迟或卡顿的时候，就可以采用分析工具帮我们定位有问题的SQL，这三种分析工具你可以理解是SQL调优的三个步骤:<code>慢查询、</code> <code>EXPLAIN</code>和 <code>SHOWPROFILING</code>。</p><p><strong>小结：</strong></p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325180029352.png" alt="image-20220325180029352"></p><h3 id="5-2-定位执行慢的-SQL：慢查询日志"><a href="#5-2-定位执行慢的-SQL：慢查询日志" class="headerlink" title="5.2 定位执行慢的 SQL：慢查询日志"></a>5.2 定位执行慢的 SQL：慢查询日志</h3><p>MySQL的慢查询日志，用来记录在MySQL中<code>响应时间超过阀值</code>的语句，具体指运行时间超过<code>long_query_time</code>值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为<code>10</code>，意思是运行10秒以上(不含10秒)的语句，认为是超出了我们的最大忍耐时间值。|</p><p>它的主要作用是，帮助我们发现那些执行时间特别长的SQL查询，并且有针对性地进行优化，从而提高系统的整体效率。当我们的数据库服务器发生阻塞、运行变慢的时候，检查一下慢查询日志，找到那些慢查询，对解决问题很有帮助。比如一条sq|执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合explain进行全面分析。</p><p>默认情况下，MySQL数据库<code>没有开启慢查询日志</code>，需要我们手动来设置这个参数。<strong>如果不是调优需要的话，一般不建议启动该参数</strong>，因为开启慢查询日志会或多或少带来一定的性能影响</p><p>慢查询日志支持将日志记录写入文件。</p><blockquote><p>开启慢查询日志参数</p></blockquote><p><strong>1.开启slow_query_log</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; show variables like &#x27;%slow_query_log%&#x27;;<br>mysql &gt; set global slow_query_log=&#x27;ON&#x27;;<br></code></pre></td></tr></table></figure><p>然后我们再来查看下慢查询日志是否开启，以及慢查询日志文件的位置：</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325181405473.png" alt="image-20220325181405473"></p><p>你能看到这时慢查询分析已经开启，同时文件保存在 <code>/var/lib/mysql/atguigu02-slow.log</code> 文件<br>中。</p><p><strong>2. 修改long_query_time阈值</strong></p><p>接下来我们来看下慢查询的时间阈值设置，使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; show variables like &#x27;%long_query_time%&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325181420603.png" alt="image-20220325181420603"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 测试发现：设置global的方式对当前session的long_query_time失效。对新连接的客户端有效。所以可以一并执行下述语句<br>mysql&gt; set global long_query_time = 1 ;<br>mysql&gt; show global variables like &#x27; %long-query_time% &#x27;;<br><br># 即更改global 也更改了session变量<br>mysql&gt; set long_query_time=1;<br>mysql&gt; show variables like &#x27;%long_query_time%&#x27;;  <br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325181712981.png" alt="image-20220325181712981"></p><p><strong>补充:配置文件中一并设置参数</strong></p><p>如下的方式相较于前面的命令行方式，可以看作是永久设置的方式。</p><p>修改<code>my.cnf</code> 文件，<code>[mysqld]下</code>增加或修改参数<code>long_query_time</code>、<code>slow_query_log</code>和<code>slow_query_log_file</code>后，然后重启MySQL服务器。|</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-string">ON #开启慢查询日志的开关</span><br><span class="hljs-attr">slow_query_log_file</span>=<span class="hljs-string">/var/lib/mysql/my-slow.log #慢查询日志的目录和文件名信息</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-string">3 #设置慢查询的阈值为3秒，超出此设定值的SQL即被记录到慢查询日志</span><br><span class="hljs-attr">log_output</span>=<span class="hljs-string">FILE</span><br></code></pre></td></tr></table></figure><p>如果不指定存储路径，查询日志将默认存储到MySQL数据库的数据文件夹下。如果不指定文件名，默认文件名为hostname-slow.log。</p><blockquote><p>查看慢查询数目</p></blockquote><p>查询当前系统中有多少条慢查询记录  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW GLOBAL STATUS LIKE &#x27;%Slow_queries%&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>案例演示  </p></blockquote><p><strong>步骤1. 建表</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `student` (<br>`id` INT(11) NOT NULL AUTO_INCREMENT,<br>`stuno` INT NOT NULL ,<br>`name` VARCHAR(20) DEFAULT NULL,<br>`age` INT(3) DEFAULT NULL,<br>`classId` INT(11) DEFAULT NULL,<br>PRIMARY KEY (`id`)<br>) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p><strong>步骤2：设置参数 log_bin_trust_function_creators</strong>  </p><p>创建函数，假如报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">This function has none of DETERMINISTIC......<br></code></pre></td></tr></table></figure><p>命令开启：允许创建函数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global log_bin_trust_function_creators=1; # 不加global只是当前窗口有效。<br></code></pre></td></tr></table></figure><p><strong>步骤3：创建函数</strong></p><p>随机产生字符串：（同上一章）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE FUNCTION rand_string(n INT)<br>RETURNS VARCHAR(255) #该函数会返回一个字符串<br>BEGIN<br>    DECLARE chars_str VARCHAR(100) DEFAULT<br>    &#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;;<br>    DECLARE return_str VARCHAR(255) DEFAULT &#x27;&#x27;;<br>    DECLARE i INT DEFAULT 0;<br>WHILE i &lt; n DO<br>        SET return_str =CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));<br>        SET i = i + 1;<br>END WHILE;<br>RETURN return_str;<br>END //<br>DELIMITER ;<br><br></code></pre></td></tr></table></figure><p>产生随机数值：（同上一章）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#测试<br>SELECT rand_string(10);<br><br>DELIMITER //<br>CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT(11)<br>BEGIN<br>DECLARE i INT DEFAULT 0;<br>SET i = FLOOR(from_num +RAND()*(to_num - from_num+1)) ;<br>RETURN i;<br>END //<br>DELIMITER ;<br><br>#测试：<br>SELECT rand_num(10,100);<br></code></pre></td></tr></table></figure><p><strong>步骤4：创建存储过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE insert_stu1( START INT , max_num INT )<br>BEGIN<br>DECLARE i INT DEFAULT 0;<br>    SET autocommit = 0; #设置手动提交事务<br>    REPEAT #循环<br>    SET i = i + 1; #赋值<br>    INSERT INTO student (stuno, NAME ,age ,classId ) VALUES<br>    ((START+i),rand_string(6),rand_num(10,100),rand_num(10,1000));<br>    UNTIL i = max_num<br>    END REPEAT;<br>    COMMIT; #提交事务<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>步骤5：调用存储过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#调用刚刚写好的函数, 4000000条记录,从100001号开始<br><br>CALL insert_stu1(100001,4000000);<br></code></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM student WHERE stuno = 3455655;<br>+---------+---------+--------+------+---------+<br>|    id   |  stuno  |  name  |  age | classId |<br>+---------+---------+--------+------+---------+<br>| 3523633 | 3455655 | oQmLUr |  19  |    39   |<br>+---------+---------+--------+------+---------+<br>1 row in set (2.09 sec)<br><br>mysql&gt; SELECT * FROM student WHERE name = &#x27;oQmLUr&#x27;;<br>+---------+---------+--------+------+---------+<br>|    id   |  stuno  |  name  |  age | classId |<br>+---------+---------+--------+------+---------+<br>| 1154002 | 1243200 | OQMlUR |  266 |   28    |<br>| 1405708 | 1437740 | OQMlUR |  245 |   439   |<br>| 1748070 | 1680092 | OQMlUR |  240 |   414   |<br>| 2119892 | 2051914 | oQmLUr |  17  |   32    |<br>| 2893154 | 2825176 | OQMlUR |  245 |   435   |<br>| 3523633 | 3455655 | oQmLUr |  19  |   39    |<br>+---------+---------+--------+------+---------+<br><br>6 rows in set (2.39 sec)<br></code></pre></td></tr></table></figure><p>从上面的结果可以看出来，查询学生编号为“3455655”的学生信息花费时间为2.09秒。查询学生姓名为“oQmLUr”的学生信息花费时间为2.39秒。已经达到了秒的数量级，说明目前查询效率是比较低的，下面<br>的小节我们分析一下原因  。</p><p><strong>2.分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show status like &#x27;slow_queries&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>补充说明:</strong></p><p>除了上述变量，控制慢查询日志的还有一个系统变量: min_examined_row_limit。这个变量的意思是，查询<code>扫描过的最少记录数</code>。这个变量和查询执行时间，共同组成了判别一个查询是否是慢查询的条件。如果查询扫描过的记录数大于等于这个变量的值，并且查询执行时间超过long_query_time的值，那么，这个查询就被记录到慢查询日志中; 反之，则不被记录到慢查询日志中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;min%&#x27;;<br>+------------------------+-------+<br>| Variable_name          | Value |<br>+------------------------+-------+<br>| min_examined_row_limit | 0     |<br>+------------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>你也可以根据需要，通过修改“my.ini”文件，来修改”min_examined_row_limit”的值。</p></blockquote><blockquote><p>慢查询日志分析工具：mysqldumpslow</p></blockquote><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具<code>mysqldumpslow</code> 。</p><p>查看mysqldumpslow的帮助信息  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqldumpslow --help<br></code></pre></td></tr></table></figure><p>mysqldumpslow 命令的具体参数如下：</p><ul><li>-a: 不将数字抽象成N，字符串抽象成S</li><li><strong>-s: 是表示按照何种方式排序：</strong><ul><li>c: 访问次数</li><li>l: 锁定时间</li><li>r: 返回记录</li><li><strong>t: 查询时间</strong></li><li>al:平均锁定时间</li><li>ar:平均返回记录数</li><li>at:平均查询时间 （默认方式）</li><li>ac:平均查询次数</li></ul></li><li><strong>-t: 即为返回前面多少条的数据；</strong>  </li><li><strong>-g: 后边搭配一个正则匹配模式，大小写不敏感的</strong></li></ul><p>举例：我们想要按照查询时间排序，查看前五条 SQL 语句，这样写即可：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqldumpslow -s t -t 5 /var/lib/mysql/atguigu01-slow.log<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@bogon ~]# mysqldumpslow -s t -t 5 /var/lib/mysql/atguigu01-slow.log<br><br>Reading mysql slow query log from /var/lib/mysql/atguigu01-slow.log<br>Count: 1 Time=2.39s (2s) Lock=0.00s (0s) Rows=13.0 (13), root[root]@localhost<br>SELECT * FROM student WHERE name = &#x27;S&#x27;<br><br>Count: 1 Time=2.09s (2s) Lock=0.00s (0s) Rows=2.0 (2), root[root]@localhost<br>SELECT * FROM student WHERE stuno = N<br><br>Died at /usr/bin/mysqldumpslow line 162, &lt;&gt; chunk 2.<br></code></pre></td></tr></table></figure><p><strong>工作常用参考：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#得到返回记录集最多的10个SQL<br>mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log<br><br>#得到访问次数最多的10个SQL<br>mysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log<br><br>#得到按照时间排序的前10条里面含有左连接的查询语句<br>mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/atguigu-slow.log<br><br>#另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况<br>mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more<br></code></pre></td></tr></table></figure><blockquote><p>关闭慢查询日志  </p></blockquote><p><strong>除了调优需要开，正常还是不要开了</strong></p><p>MySQL服务器停止慢查询日志功能有两种方法：</p><p><strong>方式1：永久性方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>slow_query_log=OFF<br></code></pre></td></tr></table></figure><p>或者，把slow_query_log一项注释掉 或 删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqld]<br>#slow_query_log =OFF<br></code></pre></td></tr></table></figure><p>重启MySQL服务，执行如下语句查询慢日志功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW VARIABLES LIKE &#x27;%slow%&#x27;; #查询慢查询日志所在目录<br>SHOW VARIABLES LIKE &#x27;%long_query_time%&#x27;; #查询超时时长<br></code></pre></td></tr></table></figure><p><strong>方式2：临时性方式</strong>  </p><p>使用SET语句来设置。 （1）停止MySQL慢查询日志功能，具体SQL语句如下。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET GLOBAL slow_query_log=off;<br></code></pre></td></tr></table></figure><p>（2）<strong>重启MySQL服务</strong>，使用SHOW语句查询慢查询日志功能信息，具体SQL语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW VARIABLES LIKE &#x27;%slow%&#x27;;<br>#以及<br>SHOW VARIABLES LIKE &#x27;%long_query_time%&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>删除慢查询日志</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%slow_query_log%&#x27;;<br>+---------------------+----------------------------+<br>| Variable_name       | Value                      |<br>+---------------------+----------------------------+<br>| slow_query_log      | ON                         |<br>| slow_query_log_file | /var/lib/mysql/my-slow.log |<br>+---------------------+----------------------------+<br>2 rows in set (0.07 se<br></code></pre></td></tr></table></figure><p>从执行结果可以看出，慢查询日志的目录默认为MySQL的数据目录，在该目录下<code>手动删除慢查询日志文件</code>即可。使用命令<code>mysqladmin flush-logs</code> 来重新生成查询日志文件，具体命令如下，执行完毕会在数据目录下重新生成慢查询日志文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 不使用这个命令，没办法自己创建<br>mysqladmin -uroot -p flush-logs slow <br><br>## 这个命令可以重置其他日志 例如undo日志<br></code></pre></td></tr></table></figure><blockquote><p>提示</p><p>慢查询日志都是使用mysqladmin flush-logs命令来删除重建的。使用时-定要注意，一旦执行了这个命令，慢<br>查询日志都只存在新的日志文件中，如果需要旧的查询日志，就必须事先备份。</p></blockquote><h3 id="5-3-分析查询语句：EXPLAIN"><a href="#5-3-分析查询语句：EXPLAIN" class="headerlink" title="5.3 分析查询语句：EXPLAIN"></a>5.3 分析查询语句：EXPLAIN</h3><blockquote><p>概述</p></blockquote><p><strong>定位了查询慢的SQL之后，我们就可以使用EXPLAIN或DESCRIBE工具做针对性的分析查询语句。</strong>DESCRIBE语句的使用方法与EXPLAIN语句是一样的，并且分析结果也是一样的。</p><p>MySQL中有专门负责优化SELECT语句的优化器模块，主要功能: 通过计算分析系统中收集到的统计信息，为客户端请求的Query提供它认为最优的<code>执行计划</code>（他认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)。</p><p>这个执行计划展示了接下来具体执行查询的方式，比如多表连接的顺序是什么，对于每个表采用什么访问方法来具体执行查询等等。MySQL为我们提供了<code>EXPLAIN</code>语句来帮助我们查看某个查询语句的具体执行计划，大家看懂<code>EXPLAIN</code>语句的各个输出项，可以有针对性的提升我们查询语句的性能。</p><p><strong>1.能做什么?</strong></p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型。</li><li>哪些索引可以使用</li><li><strong>哪些索引被实际使用</strong></li><li>表之间的引用</li><li><strong>每张表有多少行被优化器查询</strong></li></ul><p><strong>版本情况</strong></p><ul><li>MySQL 5.6.3以前只能 EXPLAIN SELECT ；MYSQL 5.6.3以后就可以 <code>EXPLAIN</code> <code>SELECT</code>，<code>UPDATE</code>，<code>DELETE</code></li><li>在5.7以前的版本中，想要显示 <code>partitions</code> 需要使用 <code>explain partitions</code> 命令；想要显示<code>filtered</code> 需要使用 <code>explain extended</code> 命令。在5.7版本后，默认explain直接显示partitions和filtered中的信息。</li></ul><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325195048342.png" alt="image-20220325195048342"></p><blockquote><p>基本语法</p></blockquote><p>EXPLAIN 或 DESCRIBE语句的语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT select_options<br># 或者 两个是一样的<br>DESCRIBE SELECT select_options<br></code></pre></td></tr></table></figure><p>如果我们想看看某个查询的执行计划的话，可以在具体的查询语句前边加一个 <code>EXPLAIN</code> ，就像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT 1;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326113218648.png" alt="image-20220326113218648"></p><p><code>EXPLAIN</code> 语句输出的各个列的作用如下  </p><table><thead><tr><th>列名</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>在一个大的查询语句中每个SELECT关键字都对应一个 唯一的id</td></tr><tr><td>select_type</td><td>SELECT关键字对应的那个查询的类型</td></tr><tr><td>table</td><td>表名</td></tr><tr><td>partitions</td><td>匹配的分区信息</td></tr><tr><td><strong>type</strong></td><td><strong>针对单表的访问方法</strong>（重要）</td></tr><tr><td>possible_keys</td><td>可能用到的索引</td></tr><tr><td><strong>key</strong></td><td><strong>实际上使用的索引</strong></td></tr><tr><td><strong>key_len</strong></td><td><strong>实际使用到的索引长度</strong></td></tr><tr><td>ref</td><td>当使用索引列等值查询时，与索引列进行等值匹配的对象信息</td></tr><tr><td><strong>rows</strong></td><td><strong>预估的需要读取的记录条数</strong></td></tr><tr><td>filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分比</td></tr><tr><td>Extra</td><td>一些额外的信 息</td></tr></tbody></table><blockquote><p>数据准备</p></blockquote><p><strong>1.建表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE s1 (<br>id INT AUTO_INCREMENT,<br>key1 VARCHAR(100), <br>key2 INT, <br>key3 VARCHAR(100), <br>key_part1 VARCHAR(100),<br>key_part2 VARCHAR(100),<br>key_part3 VARCHAR(100),<br>common_field VARCHAR(100),<br>PRIMARY KEY (id),<br>INDEX idx_key1 (key1),<br>UNIQUE INDEX idx_key2 (key2),<br>INDEX idx_key3 (key3),<br>INDEX idx_key_part(key_part1, key_part2, key_part3)<br>) ENGINE=INNODB CHARSET=utf8;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE s2 (<br>    id INT AUTO_INCREMENT,<br>    key1 VARCHAR(100),<br>    key2 INT,<br>    key3 VARCHAR(100),<br>    key_part1 VARCHAR(100),<br>    key_part2 VARCHAR(100),<br>    key_part3 VARCHAR(100),<br>    common_field VARCHAR(100),<br>    PRIMARY KEY (id),<br>    INDEX idx_key1 (key1),<br>    UNIQUE INDEX idx_key2 (key2),<br>    INDEX idx_key3 (key3),<br>INDEX idx_key_part(key_part1, key_part2, key_part3)<br>) ENGINE=INNODB CHARSET=utf8;<br></code></pre></td></tr></table></figure><p><strong>2. 设置参数 log_bin_trust_function_creators</strong></p><p>创建函数，假如报错，需开启如下命令：允许创建函数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global log_bin_trust_function_creators=1; # 不加global只是当前窗口有效。<br></code></pre></td></tr></table></figure><p><strong>3. 创建函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE FUNCTION rand_string1 ( n INT ) <br>RETURNS VARCHAR ( 255 ) #该函数会返回一个字符串<br>BEGIN<br>DECLARE<br>chars_str VARCHAR ( 100 ) DEFAULT &#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;;<br>DECLARE<br>return_str VARCHAR ( 255 ) DEFAULT &#x27;&#x27;;<br>DECLARE<br>i INT DEFAULT 0;<br>WHILE<br>i &lt; n DO<br><br>SET return_str = CONCAT(<br>return_str,<br>SUBSTRING( chars_str, FLOOR( 1+RAND ()* 52 ), 1 ));<br><br>SET i = i + 1;<br><br>END WHILE;<br>RETURN return_str;<br><br>END // <br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>4. 创建存储过程</strong></p><p>创建往s1表中插入数据的存储过程：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE insert_s1 (IN min_num INT (10),IN max_num INT (10))<br>BEGIN<br>    DECLARE i INT DEFAULT 0;<br>    SET autocommit = 0;<br>    REPEAT<br>    SET i = i + 1;<br>    INSERT INTO s1 VALUES(<br>    (min_num + i),<br>    rand_string1(6),<br>    (min_num + 30 * i + 5),<br>    rand_string1(6),<br>    rand_string1(10),<br>    rand_string1(5),<br>    rand_string1(10),<br>    rand_string1(10));<br>    UNTIL i = max_num<br>    END REPEAT;<br>    COMMIT;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>创建往s2表中插入数据的存储过程：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE insert_s2 (IN min_num INT ( 10 ),IN max_num INT ( 10 )) <br>BEGIN<br>DECLARE i INT DEFAULT 0;<br>SET autocommit = 0;<br>REPEAT<br> SET i = i + 1;<br>INSERT INTO s2 VALUES(<br>( min_num + i ),<br>rand_string1 ( 6 ),<br>( min_num + 30 * i + 5 ),<br>rand_string1 ( 6 ),<br>rand_string1 ( 10 ),<br>rand_string1 ( 5 ),<br>rand_string1 ( 10 ),<br>rand_string1 ( 10 ));<br>UNTIL i = max_num <br>END REPEAT;<br>COMMIT;<br><br>END // <br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>5. 调用存储过程</strong></p><p>s1表数据的添加：加入1万条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL insert_s1(10001,10000); # id 10002~20001<br></code></pre></td></tr></table></figure><p>s2表数据的添加：加入1万条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL insert_s2(10001,10000);# id 10002~20001<br></code></pre></td></tr></table></figure><blockquote><p>EXPLAIN各列作用</p></blockquote><p>为了让大家有比较好的体验，我们调整了下 <code>EXPLAIN</code> 输出列的顺序。</p><h4 id="1-table"><a href="#1-table" class="headerlink" title="1. table"></a>1. table</h4><p>表名</p><p>不论我们的查询语句有多复杂，里边儿 <code>包含了多少个表</code> ，到最后也是需要对每个表进行 <code>单表访问</code> 的，所<br>以MySQL规定<strong>EXPLAIN语句输出的每条记录都对应着某个单表的访问方法</strong>，该条记录的table列代表着该<br>表的表名（有时不是真实的表名字，可能是简称）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1. table：表名<br>#查询的每一行记录都对应着一个单表<br>explain select count(*) from s1;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326120805996-8347999.png" alt="image-20220326120805996"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#s1:驱动表  s2:被驱动表<br>EXPLAIN SELECT * FROM s1 INNER JOIN s2;<br># 驱动表和被驱动表是 优化器决定的，他认为哪个比较好久用哪个<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326121611806-8347999.png" alt="image-20220326121611806"></p><blockquote><p>用到多少个表，就会有多少条记录</p></blockquote><h4 id="2-id"><a href="#2-id" class="headerlink" title="2. id"></a>2. id</h4><p>正常来说一个select 一个id ，也有例外的可能，查询优化器做了优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326122616487.png" alt="image-20220326122616487"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326122717663.png" alt="image-20220326122717663"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326122751920.png" alt="image-20220326122751920"></p><p><strong>查询优化器优化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">######查询优化器可能对涉及子查询的查询语句进行重写,转变为多表查询的操作########<br>EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key2 FROM s2 WHERE common_field = &#x27;a&#x27;);<br></code></pre></td></tr></table></figure><p>运行结果： id 只有一个，原因是查询优化器做了优化</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326122857145.png" alt="image-20220326122857145"></p><p> <strong>Union去重</strong></p><p>原本想的1个select 一个 id , 预计两个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #Union去重<br># union 去重，union all 不去重<br>EXPLAIN SELECT * FROM s1 UNION SELECT * FROM s2;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326123056983.png" alt="image-20220326123056983"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># union all 不去重  所以不需要放在临时表里面<br>mysql&gt; EXPLAIN SELECT * FROM s1 UNION ALL SELECT * FROM s2;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326123147690.png" alt="image-20220326123147690"></p><p><strong>小结:</strong>  </p><ul><li>id如果相同，可以认为是一组，从上往下顺序执行</li><li>在所有组中，id值越大，优先级越高，越先执行</li><li>关注点：id号每个号码，表示一趟独立的查询, 一个sql的查询趟数越少越好</li></ul><h4 id="3-select-type"><a href="#3-select-type" class="headerlink" title="3. select_type"></a>3. select_type</h4><p>一条大的查询语句里边可以包含若干个SELECT关键字，<code>每个SELECT关键字代表着一个小的查询语句</code>，而每个SELECT关键字的FROM子句中都可以包含若干张表(这些表用来做连接查询)，<code>每一张表都对应着执行计划输出中的一条记录</code>，对于在同一个SELECT关键字中的表来说，它们的id值是相同的。</p><p>MySQL为每一个SELECT关键字代表的小查询都定义了一个称之为<code>select_type</code>的属性，意思是我们只要知道了某个小查询的<code>select_type属性</code>，就知道了这个<code>小查询在整个大查询中扮演了一个什么角色</code>，我们看一下<br><code>select_type</code>都能取哪些值，请看官方文档:</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SIMPLE</td><td>Simple  SELECT (not using UNION or subqueries)</td></tr><tr><td>PRIMARY</td><td>Outermost  SELECT</td></tr><tr><td>UNION</td><td>Second  or later SELECT statement in a UNION</td></tr><tr><td>UNION RESULT</td><td>Result  of a UNION</td></tr><tr><td>SUBQUERY</td><td>First  SELECT in subquery</td></tr><tr><td>DEPENDENT     SUBQUERY</td><td>First  SELECT in subquery, dependent on outer query</td></tr><tr><td>DEPENDENT     UNION</td><td>Second  or later SELECT statement in a UNION, dependent on outer query</td></tr><tr><td>DERIVED</td><td>Derived  table</td></tr><tr><td>MATERIALIZED</td><td>Materialized  subquery</td></tr><tr><td>UNCACHEABLE     SUBQUERY</td><td>A  subquery for which the result cannot be cached and must be re-evaluated  for     each row of the outer query</td></tr><tr><td>UNCACHEABLE     UNION</td><td>The  second or later select in a UNION that belongs to an uncacheable  subquery     (see UNCACHEABLE SUBQUERY)</td></tr></tbody></table><ul><li><p><code>SIMPLE</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询语句中不包含`UNION`或者子查询的查询都算作是`SIMPLE`类型<br>EXPLAIN SELECT * FROM s1;<br><br> #连接查询也算是`SIMPLE`类型<br>EXPLAIN SELECT * FROM s1 INNER JOIN s2;<br></code></pre></td></tr></table></figure></li><li><p><code>PRIMARY</code> 与 <code>UNION</code>与 <code>UNION RESULT</code></p><ul><li><p><code>UNION RESULT</code></p><p>MySQL选择使用临时表来完成<code>UNION</code>查询的去重工作，针对该临时表的查询的<code>select_type</code>就是<code>UNION RESULT</code>，例子上边有。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#对于包含`UNION`或者`UNION ALL`或者子查询的大查询来说，它是由几个小查询组成的，其中最左边的那个<br>#查询的`select_type`值就是`PRIMARY`<br> <br>#对于包含`UNION`或者`UNION ALL`的大查询来说，它是由几个小查询组成的，其中除了最左边的那个小查询<br>#以外，其余的小查询的`select_type`值就是`UNION`<br><br>#`MySQL`选择使用临时表来完成`UNION`查询的去重工作，针对该临时表的查询的`select_type`就是`UNION RESULT` <br></code></pre></td></tr></table></figure><p>测试sql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 UNION SELECT * FROM s2;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326125611904.png" alt="image-20220326125611904"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 UNION ALL SELECT * FROM s2;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326125627303.png" alt="image-20220326125627303"></p></li><li><p><code>SUBQUERY</code></p><p>如果包含子查询的查询语句不能够转为对应的<code>semi-join</code>的形式，并且该子查询是不相关子查询，并且查询优化器决定采用将该子查询物化的方案来执行该子查询时，该子查询的第个<code>SELECT</code> 关键字代表的那个查询<br>的<code>select_type</code>就是 <code>SUBQUERY</code>，比如下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#子查询：<br>#如果包含子查询的查询语句不能够转为对应的`semi-join`的形式，并且该子查询是不相关子查询。<br>#该子查询的第一个`SELECT`关键字代表的那个查询的`select_type`就是`SUBQUERY`<br>EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326122751920.png" alt="image-20220326122751920"></p></li><li><p><code>DEPENDENT SUBQUERY</code></p><p>dependent subquery</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#如果包含子查询的查询语句不能够转为对应的`semi-join`的形式，并且该子查询是相关子查询，<br>#则该子查询的第一个`SELECT`关键字代表的那个查询的`select_type`就是`DEPENDENT SUBQUERY`<br>EXPLAIN SELECT * FROM s1 <br>WHERE key1 IN (SELECT key1 FROM s2 WHERE s1.key2 = s2.key2) OR key3 = &#x27;a&#x27;;<br>#注意的是，select_type为`DEPENDENT SUBQUERY`的查询可能会被执行多次。<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326130111650.png" alt="image-20220326130111650"></p></li><li><p><code>DEPENDENT UNION</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#在包含`UNION`或者`UNION ALL`的大查询中，如果各个小查询都依赖于外层查询的话，那除了<br>#最左边的那个小查询之外，其余的小查询的`select_type`的值就是`DEPENDENT UNION`。<br>EXPLAIN SELECT * FROM s1 <br>WHERE key1 IN (SELECT key1 FROM s2 WHERE key1 = &#x27;a&#x27; UNION SELECT key1 FROM s1 WHERE key1 = &#x27;b&#x27;);<br><br># 这里优化器会重构成exist<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326130433291.png" alt="image-20220326130433291"></p></li><li><p><code>DERIVED</code></p><p>derived : 衍生，派生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#对于包含`派生表`的查询，该派生表对应的子查询的`select_type`就是`DERIVED`<br>EXPLAIN SELECT * <br>FROM (SELECT key1, COUNT(*) AS c FROM s1 GROUP BY key1) AS derived_s1 WHERE c &gt; 1;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326141653065.png" alt="image-20220326141653065"></p></li><li><p><code>MATERIALIZED</code></p><p>materialized: 英 [məˈtɪəri:əˌlaɪzd] 具体化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当查询优化器在执行包含子查询的语句时，选择将子查询物化之后与外层查询进行连接查询时，<br>#该子查询对应的`select_type`属性就是`MATERIALIZED`<br>EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2); #子查询被转为了物化表 <br><br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326142034981.png" alt="image-20220326142034981"></p><blockquote><p>不理解： 为啥上面的子查询，没有雾化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 = &#x27;a&#x27;;<br># 这个怎么不物化<br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>UNCACHEABLE SUBQUERY</code></p><p>uncacheable </p></li><li><p><code>UNCACHEABLE UNION</code></p></li></ul><h4 id="4-partitions-可略"><a href="#4-partitions-可略" class="headerlink" title="4. partitions (可略)"></a>4. partitions (可略)</h4><ul><li>代表分区表中的命中情况，非分区表，该项为NULL。一般情况下我们的查询语句的执行计划的partitions列的值都是NULL。</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/alter-table-partition-operations.html">https://dev.mysql.com/doc/refman/5.7/en/alter-table-partition-operations.html</a></li><li>如果想详细了解，可以如下方式测试。创建分区表：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建分区表，<br>-- 按照id分区，id&lt;100 p0分区，其他p1分区<br>CREATE TABLE user_partitions (<br>    id INT auto_increment,<br>    NAME VARCHAR(12),PRIMARY KEY(id))<br>    PARTITION BY RANGE(id)(<br>    PARTITION p0 VALUES less than(100),<br>    PARTITION p1 VALUES less than MAXVALUE<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC SELECT * FROM user_partitions WHERE id&gt;200;<br></code></pre></td></tr></table></figure><p>查询id大于200（200&gt;100，p1分区）的记录，查看执行计划，partitions是p1，符合我们的分区规则</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220325201510359.png" alt="image-20220325201510359"></p><h4 id="5-type-☆"><a href="#5-type-☆" class="headerlink" title="5. type ☆"></a>5. type ☆</h4><p>执行计划的一条记录就代表着MySQL对某个表的<code>执行查询时的访问方法</code>，又称”访问类型”，其中的<code>type</code>列就表明了这个访问方法是啥，是较为重要的一个指标。比如，看到<code>type</code>列的值是<code>ref</code>，表明MySQL即将使用<code>ref</code>访问方法来执行对<code>s1</code>表的查询。</p><p>完整的访问方法如下： <code>system</code> ， <code>const</code> ， <code>eq_ref</code> ， <code>ref</code> ， <code>fulltext</code> ， <code>ref_or_null</code> ，<code>index_merge</code> ， <code>unique_subquery</code> ， <code>index_subquery</code> ， <code>range</code> ， <code>index</code> ， <code>ALL</code> 。</p><p>我们详细解释一下：</p><ul><li><p><code>system</code>  </p><p>当表中<code>只有一条记录</code>并且该表使用的存储引擎的统计数据是精确的，比如MyISAM、Memory，那么对该表的访问方法就是<code>system</code>。比方说我们新建一个<code>MyISAM</code>表，并为其插入一条记录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE t(i int) Engine=MyISAM;<br>Query OK, 0 rows affected (0.05 sec)<br><br>mysql&gt; INSERT INTO t VALUES(1);<br>Query OK, 1 row affected (0.01 sec)<br></code></pre></td></tr></table></figure><p>然后我们看一下查询这个表的执行计划：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM t;<br>+----+-------------+-------+------------+--------+<br>| id | select_type | table | partitions | type   |<br>+----+-------------+-------+------------+--------+<br>|  1 | SIMPLE      | t     | NULL       | system |<br>+----+-------------+-------+------------+--------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><blockquote><p>这里如果是 innodb 会变成ALL ， 因为innodb系统不会存条数字段。。MyISAM会存储这么一个字段</p></blockquote></li><li><p><code>const</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当我们根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是`const`<br>EXPLAIN SELECT * FROM s1 WHERE id = 10005;<br><br>EXPLAIN SELECT * FROM s1 WHERE key2 = &#x27;10066&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><code>eq_ref</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问的<br>#（如果该主键或者唯一二级索引是联合索引的话，所有的索引列都必须进行等值比较），则<br>#对该被驱动表的访问方法就是`eq_ref`<br>EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id = s2.id;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id = s2.id;<br>+----+------------+------+--------+---------+---------+------------------+------+<br>| id | select_type| table| type   | key     | key_len | ref              | rows |<br>+----+------------+------+--------+---------+---------+------------------+------+<br>|  1 | SIMPLE     | s1   | ALL    | NULL    | NULL    | NULL             | 9895 |<br>|  1 | SIMPLE     | s2   | eq_ref | PRIMARY | 4       | atguigudb1.s1.id |    1 |<br>+----+------------+------+--------+---------+---------+------------------+------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>从执行计划的结果中可以看出，MySQL打算将s2作为驱动表，s1作为被驱动表，重点关注s1的访问<br>方法是 <code>eq_ref</code> ，表明在访问s1表的时候可以 <code>通过主键的等值匹配</code> 来进行访问。  </p></li><li><p><code>ref</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是`ref`<br>EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27;;<br>+----+-------+------+---------------+----------+---------+<br>| id | table | type | possible_keys | key      | key_len |<br>+----+-------+------+---------------+----------+---------+<br>|  1 | s1    | ref  | idx_key1      | idx_key1 | 303     |<br>+----+-------+------+---------------+----------+---------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><blockquote><p>tips: 类型相同才可以走索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE key2 = 10066;<br># 这个是不会走索引的 因为key2 是字符串<br># 类型不一样，mysql会加函数，进行隐式转换，一旦加上函数，就不会走索引了。<br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>fulltext</code></p><p>全文索引</p></li><li><p><code>ref_or_null</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当对普通二级索引进行等值匹配查询，该索引列的值也可以是`NULL`值时，那么对该表的访问方法<br>#就可能是`ref_or_null`<br>EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27; OR key1 IS NULL;<br></code></pre></td></tr></table></figure></li><li><p><code>index_merge</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#单表访问方法时在某些场景下可以使用`Intersection`、`Union`、<br>#`Sort-Union`这三种索引合并的方式来执行查询<br>EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27; OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27; OR key3 = &#x27;a&#x27;;<br>+---+-------+------------+-------------------+--------+-------------------------------+<br>| id| table | type       | key               | key_len| Extra<br>+---+-------+------------+-------------------+--------+-------------------------------+<br>|  1| s1    | index_merge| idx_key1,idx_key3 | 303,303| Using union(idx_key1,idx_key3)|<br>+---+-------+------------+-------------------+--------+-------------------------------+<br>1 row in set, 1 warning (0.01 sec)<br><br></code></pre></td></tr></table></figure><p>从执行计划的 <code>type</code> 列的值是 <code>index_merge</code> 就可以看出，MySQL 打算使用索引合并的方式来执行<br>对 <code>s1</code> 表的查询。  </p></li><li><p><code>unique_subquery</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#`unique_subquery`是针对在一些包含`IN`子查询的查询语句中，如果查询优化器决定将`IN`子查询<br>#转换为`EXISTS`子查询，而且子查询可以使用到主键进行等值匹配的话，那么该子查询执行计划的`type`<br>#列的值就是`unique_subquery`<br>EXPLAIN SELECT * FROM s1 <br>WHERE key2 IN (SELECT id FROM s2 WHERE s1.key1 = s2.key1) OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><code>index_subquery</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE common_field IN (SELECT key3 FROM s2 where<br>s1.key1 = s2.key1) OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><code>range</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#如果使用索引获取某些`范围区间`的记录，那么就可能使用到`range`访问方法<br>EXPLAIN SELECT * FROM s1 WHERE key1 IN (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);<br><br>#同上<br>EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;a&#x27; AND key1 &lt; &#x27;b&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><code>index</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当我们可以使用索引覆盖，但需要扫描全部的索引记录时，该表的访问方法就是`index`<br>EXPLAIN SELECT key_part2 FROM s1 WHERE key_part3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>索引覆盖，<code>INDEX idx_key_part(key_part1, key_part2, key_part3）</code> 这3个构成一个复合索引</p><p>key_part3 在复合索引里面，，查询的字段也在索引里面，干脆就直接遍历索引查出数据</p><p>思考： 好处，索引存的数据少，数据少页就少，这样可以减少io。</p></blockquote></li><li><p><code>ALL</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1;<br></code></pre></td></tr></table></figure><p>一般来说，这些访问方法中除了<code>All</code>这个访问方法外，其余的访问方法都能用到索引，除了<code>index_merge</code>访问方法外，其余的访问方法都最多只能用到一个索引。</p><p><strong>小结:</strong></p><p><strong>结果值从最好到最坏依次是：</strong></p><p><font color="blue">system &gt; const &gt; eq_ref &gt; ref &gt;</font></p><p><font color="red">fulltext &gt; ref_or_null &gt; index_merge &gt;unique_subquery &gt; index_subquery &gt; range &gt; </font></p><p><font color="green">index &gt; ALL </font></p><p><strong>SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，最好是 consts级别。（阿里巴巴<br>开发手册要求）</strong>  </p><h4 id="6-possible-keys和key"><a href="#6-possible-keys和key" class="headerlink" title="6. possible_keys和key"></a><strong>6. possible_keys和key</strong></h4><p>在EXPLAIN语句输出的执行计划中， <code>possible_keys</code>列表示在某个查询语句中，对某个表执行<code>单表查询时可能用</code>到的索引有哪些。一般查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。<code>key</code>列表示<code>实际用到</code>的索引有哪些，如果为NULL，则没有使用索引。比方说下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND key3 = &#x27;a&#x27;;<br>+----+-------------+------+------+-------------------+----------+<br>| id | select_type | table| type | possible_keys     | key      |<br>+----+-------------+------+------+-------------------+----------+<br>|  1 | SIMPLE      | s1   | ref  | idx_key1,idx_key3 | idx_key3 |<br>+----+-------------+------+------+-------------------+----------+<br>1 row in set, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><p>上述执行计划的possible_keys列的值是<code>idx_key1,idx_key3</code>，表示该查询可能使用到<code>idx_key1</code> , <code>idx_key3</code>两个索引，然后key列的值是<code>idx_key3</code>，表示经过查询优化器计算使用不同索引的成本后，最后决定使用<code>idx_key3</code></p><blockquote><p>索引只能用一个。所以他要选一个出来用。查看上面 <code>index_merge  </code>  or 的话  会走索引合并。</p></blockquote><h4 id="7-key-len-☆"><a href="#7-key-len-☆" class="headerlink" title="7. key_len ☆"></a><strong>7. key_len ☆</strong></h4><ul><li><p>key_len：实际使用到的索引长度(即：字节数)</p></li><li><p>key_len越小 索引效果越好 这是前面学到的只是，短一点效率更高</p></li><li><p><strong>但是在联合索引里面，命中一次key_len加一次长度。越长代表精度越高，效果越好</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#7. <br>EXPLAIN SELECT * FROM s1 WHERE id = 10005;<br><br>## 结果key_len =4<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key2 = 10126;<br><br>## 结果key_len = 5<br></code></pre></td></tr></table></figure><p>key2 是int 类型 unique 索引。。因为还可能有一个null值，所以 null占一个字段。4+1 &#x3D; 5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27;;<br><br>## 结果key_len = 303 <br></code></pre></td></tr></table></figure><p>原因： <code>idx_key_part(key_part1, key_part2, key_part3）</code> 是3个100的字段合起来的。每一个字段可以为空，所以是101*3 &#x3D; 303</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key_part1 = &#x27;a&#x27;;<br>+----+------------+------+---------------+--------------+---------+-------+------+<br>| id | select_type| type | possible_keys | key          | key_len | ref   | rows |<br>+----+------------+------+---------------+--------------+---------+-------+------+<br>|  1 | SIMPLE     | ref  | idx_key_part  | idx_key_part | 303     | const |    1 |<br>+----+------------+------+---------------+--------------+---------+-------+------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果key_len是303</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key_part1 = &#x27;a&#x27; AND key_part2 = &#x27;b&#x27;;<br>+----+------------+-----+---------------+--------------+---------+------------<br>| id | select_type|type | possible_keys | key          | key_len | ref        <br>+----+------------+-----+---------------+--------------+---------+------------<br>|  1 | SIMPLE     |ref  | idx_key_part  | idx_key_part | 606     | const,const<br>+----+------------+-----+---------------+--------------+---------+------------<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果key_606</p><p><strong>这里命中了两次联合索引，精度更高，效果更好</strong></p><p><strong>练习：</strong></p><p><strong>key_len的长度计算公式：</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">varchar(10)变长字段且允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)+2(变长字段)<br><br>varchar(10)变长字段且不允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+2(变长字段)<br><br>char(10)固定字段且允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)+1(NULL)<br><br>char(10)固定字段且不允许NULL = 10 * ( character set：utf8=3,gbk=2,latin1=1)<br></code></pre></td></tr></table></figure><h4 id="8-ref"><a href="#8-ref" class="headerlink" title="8. ref"></a>8. ref</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 8. ref：当使用索引列等值查询时，与索引列进行等值匹配的对象信息。<br>#比如只是一个常数或者是某个列。<br> <br>mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27;;<br>+----+-------------+------+------+---------------+----------+---------+-------+<br>| id | select_type | table| type | possible_keys | key      | key_len | ref   |<br>+----+-------------+------+------+---------------+----------+---------+-------+<br>|  1 | SIMPLE      | s1   | ref  | idx_key1      | idx_key1 | 303     | const |<br>+----+-------------+------+------+---------------+----------+---------+-------+<br></code></pre></td></tr></table></figure><p>类型是type &#x3D;ref，与const（常量）比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id = s2.id;<br>+---+------+--------+---------------+--------+------------------+-----<br>| id| table| type   | possible_keys | key    | ref              | rows<br>+---+------+--------+---------------+--------+------------------+-----<br>|  1| s1   | ALL    | PRIMARY       | NULL   | NULL             | 9895<br>|  1| s2   | eq_ref | PRIMARY       | PRIMARY| atguigudb1.s1.id |    1<br>+---+------+--------+---------------+--------+------------------+-----<br></code></pre></td></tr></table></figure><p>类型是type &#x3D;eq_ref ， 与 atguigudb1.s1.id   比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s2.key1 = UPPER(s1.key1);                         <br>+----+------+------+---------------+----------+---------+------+------+----------------------+<br>| id | table| type | possible_keys | key      | key_len | ref  | rows |Extra                 |<br>+----+------+------+---------------+----------+---------+------+------+----------------------+<br>|  1 | s1   | ALL  | NULL          | NULL     | NULL    | NULL | 9895 |NULL                  |<br>|  1 | s2   | ref  | idx_key1      | idx_key1 | 303     | func |    1 |Using index condition |<br>+----+------+------+---------------+----------+---------+------+------+----------------------+<br></code></pre></td></tr></table></figure><p>与一个方法比较<code>func</code></p><h4 id="9-rows-☆"><a href="#9-rows-☆" class="headerlink" title="9. rows ☆"></a>9. rows ☆</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 9. rows：预估的需要读取的记录条数<br># `值越小越好`<br># 通常与filtered 一起使用<br>EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27;;<br></code></pre></td></tr></table></figure><p>rows 值越小，代表，数据越有可能在一个页里面，这样io就会更小。</p><h4 id="10-filtered"><a href="#10-filtered" class="headerlink" title="10. filtered"></a>10. filtered</h4><p><strong>越大越好</strong></p><p>filtered 的值指返回结果的行占需要读到的行(rows 列的值)的百分比。</p><blockquote><p>自己的理解： 比如读了100 rows. filtered  是10% 那么就说明还要对着100条进行过滤。。。。。。。。。这个是自己意淫的完全没有根据，只能先这么理解了。</p></blockquote><p> 如果使用的是索引执行的单表扫描，那么计算时需要估计出满足除使用到对应索引的搜索条件外的其他搜索条件的记录有多少条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND common_field = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326170537304.png" alt="image-20220326170537304"></p><p><strong>对于单表查询来说，这个filtered列的值没什么意义</strong>，我们<code>更关注在连接查询中驱动表对应的执行计划记录的filtered值</code>，它决定了被驱动表要执行的次数(即：rows * filtered)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key1 WHERE s1.common_field = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326171219278.png" alt="image-20220326171219278"></p><h4 id="11-Extra-☆"><a href="#11-Extra-☆" class="headerlink" title="11. Extra ☆"></a>11. Extra ☆</h4><p>顾名思义，<code>Extra</code>列是用来说明一些额外信息的，包含不适合在其他列中显示但十分重要的额外信息。我们可以通过这些额外信息来<code>更准确的理解MySQL到底将如何执行给定的查询语句</code>。MySQL提供的额外信息有好几十个，一下捡重点介绍</p><ul><li><p><code>No tables used</code> </p><p>当查询语句的没有FROM子句时将会提示该额外信息，比如:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT 1;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326172022150.png" alt="image-20220326172022150"></p><ul><li><code>Impossible WHERE</code></li></ul><p> 查询语句的<code>WHERE</code>子句永远为<code>FALSE</code>时将会提示该额外信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE 1 != 1;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326172126970.png" alt="image-20220326172126970"></p><ul><li><p>Using where</p><p>当我们使用全表扫描来执行对某个表的查询，并且该语句的<code>WHERE</code>子句中有针对该表的搜索条件时，在<code>Extra</code>列中会提示上述额外信息。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE common_field = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326172256011.png" alt="image-20220326172256011"></p><p>当条件除了索引，还有其他条件，也会是这个提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#当使用索引访问来执行对某个表的查询，并且该语句的`WHERE`子句中<br>#有除了该索引包含的列之外的其他搜索条件时，在`Extra`列中也会提示上述额外信息。<br>explain SELECT * FROM s1 WHERE key1 = &#x27;fUhcQU&#x27; and  common_field = &#x27;uDHCOnalcF&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326172802426.png" alt="image-20220326172802426"></p><ul><li><code>No matching min/max row</code></li></ul><p> 当查询列表处有<code>MIN</code>或者<code>MAX</code>聚合函数，但是并没有符合<code>WHERE</code>子句中的搜索条件的记录时，将会提示该额外信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 数据库不存在 QLjKYOx<br>EXPLAIN SELECT MIN(key1) FROM s1 WHERE key1 = &#x27;QLjKYOx&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326173156258.png" alt="image-20220326173156258"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 数据库存在 QLjKYO<br>EXPLAIN SELECT MIN(key1) FROM s1 WHERE key1 = &#x27;QLjKYO&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326173338273.png" alt="image-20220326173338273"></p><ul><li><code>Using index</code></li></ul><p> 当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用覆盖索引的情况下，在<code>Extra</code>列将会提示该额外信息。</p><p>比方说下边这个查询中只需要用到<code>idx_key1</code>而不需要回表操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT key1 FROM s1 WHERE key1 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326173520015.png" alt="image-20220326173520015"></p><ul><li><p><code>Using index condition</code></p><p>有些搜索条件中虽然出现了索引列，但却不能使用到索引看课件理解索引条件下推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND key1 LIKE &#x27;%a&#x27;;<br>mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#x27;z&#x27; AND key1 LIKE &#x27;%a&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326173622086.png" alt="image-20220326173622086"></p><blockquote><p>步骤1. 这里key1 &gt; ‘z’ 走了索引，查出了378条数据。。。</p><p>步骤2.  key1 LIKE ‘%b’; 这个条件依然是 key1 索引，，，所以接下来只要在遍历这378个索引。哪些符合 ‘%a’</p><p>步骤3.  通过步骤2  过滤出了有效 索引。。 这就是Using index condition 。</p><p>步骤4. 把符合条件的索引，进行回表查询。</p></blockquote><p>完整的说明：</p><p>其中的<code>key1 &gt; &#39;z&#39;</code>可以使用到索引，但是<code>key1 LIKE &#39;%a &#39;</code>却无法使用到索引，在以前版本的MySQL中，是按照下边步骤来执行这个查询的:</p><ul><li>先根据key1 &gt; ‘z’这个条件，从二级索引<code>idx_key1</code>中获取到对应的二级索引记录。</li><li>根据上一步骤得到的二级索引记录中的主键值进行回表，找到完整的用户记录再检测该记录是否符合<code>key1 LIKE &#39;%a&#39;</code>这个条件，将符合条件的记录加入到最后的结果集。</li></ul><p>但是虽然<code>key1 LIKE ‘%a&#39;</code>不能组成范围区间参与<code>range</code>访问方法的执行，但这个条件毕竟只涉及到了<code>key1</code>列，所以MySQL把上边的步骤改进了一下:</p><ul><li><p>先根据<code>key1 &gt; &#39;z&#39;</code>这个条件，定位到二级索引<code>idx_key1</code>中对应的二级索引记录。</p></li><li><p>对于指定的二级索引记录，先不着急回表，而是先检测一下该记录是否满足<code>key1 LIKE ‘%a&#39;</code>这个条件，如果这个条件不满足，则该二级索引记录压根儿就没必要回表。</p></li><li><p>对于满足<code>key1 LIKE &#39;%a&#39;</code>这个条件的二级索引记录执行回表操作。</p></li></ul><p>我们说回表操作其实是一个随机IO，比较耗时，所以上述修改虽然只改进了一点点，但是可以省去好多回表操作的成本。MySQL把他们的这个改进称之为<code>索引条件下推</code> (英文名: Index Condition Pushdown )。如果在查询语句的执行过程中将要使用<code>索引条件下推</code>这个特性，在Extra列中将会显示<code>Using index condition</code></p></li><li><p><code>Using join buffer (Block Nested Loop)</code>  </p><p>没有索引的字段进行表关联。</p><p> 在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，MySQL一般会为其分配一块名叫<code>join buffer</code>的内存块来加快查询速度，也就是我们所讲的<code>基于块的嵌套循环算法</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.common_field = s2.common_field;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326173721122.png" alt="image-20220326173721122"></p></li><li><p><code>Not exists</code></p><p>当我们使用左（外）连接时，如果<code>WHERE</code>子句中包含要求被驱动表的某个列等于<code>NULL</code>值的搜索条件，而且那个列又是不允许存储<code>NULL</code>值的，那么在该表的执行计划的Extra列就会提示<code>Not exists</code>额外信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.id IS NULL;<br># 都表关联了，，关联字段怎么会等于 is null<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326182016458.png" alt="image-20220326182016458"></p></li><li><p><code>Using intersect(...) 、 Using union(...) 和 Using sort_union(...)</code>  </p><ul><li><p>如果执行计划的<code>Extra</code>列出现了<code>Using intersect(...)</code>提示，说明准备使用<code>Intersect</code>索引</p></li><li><p>合并的方式执行查询，括号中的<code>...</code>表示需要进行索引合并的索引名称；</p></li><li><p>如果出现了<code>Using union(...)</code>提示，说明准备使用<code>Union</code>索引合并的方式执行查询；</p></li><li><p>出现了<code>Using sort_union(...)</code>提示，说明准备使用<code>Sort-Union</code>索引合并的方式执行查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 WHERE key1 = &#x27;a&#x27; OR key3 = &#x27;a&#x27;;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326182155207.png" alt="image-20220326182155207"></p></li><li><p><code>Zero limit</code></p></li><li><p><code>Using filesort</code></p><p>有一些情况下对结果集中的记录进行排序是可以使用到索引的，比如下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 ORDER BY key1 LIMIT 10;<br></code></pre></td></tr></table></figure><p>这个查询语句可以利用<code>idx_key1</code>索引直接取出key1列的10条记录，然后再进行回表操作就好了。但是很多情况下排序操作无法使用到索引，只能在内存中(记录较少的时候）或者磁盘中(记录较多的时候）进行排序，MySQL把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名: <code>filesort</code>)。如果某个查询需要使用文件排序的方式执行查询，就会在执行计划的Extra列中显示<code>Using filesort</code>提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT * FROM s1 ORDER BY common_field LIMIT 10;<br></code></pre></td></tr></table></figure></li><li><p><code>Using temporary</code>  </p><p>在许多查询的执行过程中，MySQL可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含<code>DISTINCT</code>、<code>GROUP BY</code>、<code>UNION</code>等子句的查询过程中，如果不能有效利用索引来完成查询，MySQL很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的<code>Extra</code>列将会显示<code>Using temporary</code>提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">EXPLAIN SELECT DISTINCT common_field FROM s1;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326183048710.png" alt="image-20220326183048710"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#执行计划中出现`Using temporary`并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以<br>#我们`最好能使用索引来替代掉使用临时表`。比如：扫描指定的索引idx_key1即可<br>EXPLAIN SELECT key1, COUNT(*) AS amount FROM s1 GROUP BY key1;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20220326183135116.png" alt="image-20220326183135116"></p></li></ul><h4 id="12-小结"><a href="#12-小结" class="headerlink" title="12. 小结"></a>12. 小结</h4><ul><li>EXPLAIN不考虑各种Cache</li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li><li>部分统计信息是估算的，并非精确值</li></ul><h2 id="六、事务日志"><a href="#六、事务日志" class="headerlink" title="六、事务日志"></a>六、事务日志</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><ul><li><p>事务有4种特性：原子性、一致性、隔离性和持久性。</p></li><li><p>事务的隔离性由锁机制实现，而事务的 原子性、一致性和持久性 由事务的 <code>redo日志</code> 和 <code>undo日志</code> 来保证。</p></li><li><p>REDO LOG ： 重做日志，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持久性。</p></li><li><p>UNDO LOG ： 回滚日志，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。</p></li><li><p>REDO 和 UNDO 都可以视为是一种恢复操作，区别如下：</p></li><li><p>redo log：是存储引擎层（innodb）生成的日志，记录的是物理级别上的页修改操作，比如某页号、某偏移量写入了什么数据，主要为了保证数据的可靠性</p></li><li><p>undo log：也是存储引擎层（innodb）生成的日志，记录的是逻辑操作日志，比如对某一行数据进行了INSERT语句操作，那么 undo log 就记录一条与之相反的 DELETE 操作。主要用于事务的 回滚（undo log记录的是每个修改操作的逆操作）和 一致性非锁定读。</p></li></ul><h3 id="6-2-redolog"><a href="#6-2-redolog" class="headerlink" title="6.2 redolog"></a>6.2 redolog</h3><blockquote><p>为什么需要redolog</p></blockquote><ul><li><p>InnoDB存储引擎是<code>以页为单位</code>来管理存储空间的。在真正访问页面之前，需要把在磁盘上的页<code>缓存到内存中的 Buffer Pool</code>之后才可以访问。</p></li><li><p>所有的变更都必须先更新缓冲池中的数据，然后缓冲池中的脏页会以<strong>一定的频率被刷入磁盘</strong>（checkPoint机制），通过缓冲池来优化CPU和磁盘之间的鸿沟，这样就可以保证整体的性能不会下降太快。</p></li><li><p>但是，因为checkPoint不是每次变更就触发，如果在commit之后刚写完缓冲池数据库宕机了，那么这部分数据就丢失了。</p></li><li><p>这样就不能保证持久性，想要尽可能保证持久性，我们可以简单粗暴的，当内存中的数据修改了，我们就马上去更新磁盘，但是这样存在两个问题：</p><ul><li>1.InnoDB以页为单位进行磁盘IO，这就造成，当我们仅仅修改一个字节时，也不得不将一个完整的页刷新到磁盘。</li><li>2.一条update语句可能修改很多页面，这些页面可能并不相邻，<strong>这时就需要进行很多的随机IO，随机IO刷新较慢</strong></li></ul></li><li><p>怎样更好的解决上边的问题呢？ 这时redo日志就来了。</p></li><li><p><strong>我们只是想要当事物提交之后，内存中的数据肯定改了，这时磁盘的数据也一定要能改。我们的思路就是不频繁刷盘，而是先将所做的修改保存到一个文件里边，这个文件起名叫做 redo日志，这样的话，就算修改内存还没来得及刷新磁盘宕机了，重启后也可以根据 redo日志 来恢复，以此来保证持久性。</strong></p></li><li><p>InnoDB引擎的事务采用了WAL技术（Write－Ahead Logging），这种技术的思想就是先写日志，再写磁盘，只有日志写入成功，才算事务提交成功，这里的日志就是redo log，当发生宕机且数据未刷到磁盘的时候，可以通过redo log来恢复，以保证ACID中的D。</p></li></ul><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230704091236416.png" alt="image-20230704091236416"></p><blockquote><p>redolog的特点</p></blockquote><ul><li>降低的刷盘频率</li><li>占用空间小，刷盘快</li><li>顺序写入，顺序IO比随机IO快</li><li>事务过程中，redo log不断记录</li></ul><blockquote><p>redolog和binlog的区别</p></blockquote><p>redo log是存储引擎层产生的，而bin log是数据库层产生的。</p><p>一个事物过程中，会一直不断的往redo log顺序记录，而bin log不会记录，直到这个事务提交，才会一次写入到bin log文件中。</p><blockquote><p>redolog的整体步骤</p></blockquote><p>redo log 整体流程大致分为四步：</p><ul><li>第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝；</li><li>第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值；</li><li>第3步：当事务commit时，将redo log buffer中的内容刷新到redo log file，对redo log file采用追加写的方式</li><li>第4步：定期将内存中修改的数据刷新到磁盘中<br><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230704091632501.png" alt="image-20230704091632501"></li></ul><blockquote><p>redo log 的刷盘策略</p></blockquote><p>redo log 的刷盘策略，指的是将redo log buffer中的内容刷新到redo log file这一步，虽然它不是真正的将数据刷新到磁盘，但是，只要这一步不出现问题，就可以保证我们的持久化成功了</p><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230704091859240.png" alt="image-20230704091859240"></p><p>redo log 的刷盘策略由 innodb＿flush＿log＿at＿trx＿commit 这个参数控制，值可以为 0，1，2，代表三种策略，默认为 1。</p><p>三种策略如下：</p><ul><li>值为0：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日志的同步）</li><li>值为1：表示每次事务提交时都将进行同步刷盘操作（默认）</li><li>值为2：表示每次事务提交时都只把redo log buffer内容写入page cache，不进行同步。由OS自己决定什么时候同步到磁盘文件。</li></ul><h3 id="6-3-undolog"><a href="#6-3-undolog" class="headerlink" title="6.3 undolog"></a>6.3 undolog</h3><blockquote><p>什么是undo日志</p></blockquote><ul><li>其实，在事务更新数据之前，有一步写入 undo log 的操作，undo log 用来保证事务的原子性。</li><li>当事务执行过程中出现各种错误时，这个事务需要回滚，把数据改回原先的样子，所以就需要 undo 日志 来记录旧值。</li><li>此外，undo log 的产生会伴随着 redo log 的产生，因为 undo log 也需要持久性保护。</li></ul><blockquote><p>undolog的作用</p></blockquote><ul><li>回滚数据</li><li>MVCC（当用户读取一行记录时，若该记录已经被其他事务占用，当前事务可以通过undo读取之前的行版本信息，以此实现非锁定读取。）</li></ul><blockquote><p>undolog和undolog页</p></blockquote><ul><li>写 undo log 时，会申请一个undo 页，在页中进行写入；</li><li>但是为每一个事务分配一个页，是非常浪费内存的，所以undo页被设计为是可以重用的；</li><li>当事务提交时，并不会立刻删除undo页，而是判断是否可以重用；</li><li>undo log 在 commit 后，会被放到一个链表中，然后判断undo页的使用空间是否小于3／4，如果小于3／4的话，则表示当前的 undo页 可以被重用，那么它</li><li>就不会被回收，其他事务的 undo log 可以记录在当前undo页的后面。</li><li>由于undo log是离散的，所以清理对应的磁盘空间时，效率不高。</li></ul><blockquote><p>主流程</p></blockquote><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230704092747844.png" alt="image-20230704092747844"></p><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。</p><p> redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程。</p><h2 id="七、锁"><a href="#七、锁" class="headerlink" title="七、锁"></a>七、锁</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><ul><li>事务的隔离性就是由锁来实现。</li><li>锁是计算机协调多个进程或线程并发访问某一资源的机制。和在开发中加锁以保证数据的一致性一样，这个思想在数据库领域中同样很重要。</li><li>在数据库中，数据是一种供许多用户共享的资源，为保证数据的一致性，需要对并发操作进行控制，因此产生了锁。同时锁机制也为实现MySQL的各个隔离级别提供了保证。</li></ul><blockquote><p>MySQL并发事物访问相同记录的几种情况？</p></blockquote><p>对于两个事务，我们把<code>增删改叫做写操作，查询叫做读操作</code>，有以下几种情况：</p><ol><li>读–读情况</li></ol><ul><li>读操作不会对记录有任何影响，所以存在任何的问题</li></ul><ol start="2"><li>写–写情况</li></ol><ul><li>这种情况就会出现脏写的情况，是不允许发生的</li><li>所以在多个未提交事物对同一条记录改动时，需要让他们排队执行，这就使用到了锁机制</li><li>在事务执行前本来是没有锁的，也就是说一开始是没有锁结构和记录进行关联</li><li>当一个事务想对这条记录做改动时，首先会看内存中有没有与这条记录关联的锁结构，当没有的时候就会在内存中生成一个锁结构与之关联。</li></ul><ol start="3"><li>读–写情况（写–读情况）</li></ol><ul><li>这种情况可能会出现 脏读、不可重复读和幻读</li><li>对于这些情况，就出现了对应的隔离级别</li></ul><ol start="4"><li>怎么解决这些问题呢？</li></ol><p>方案一：读操作使用多版本并发控制（MVCC,后边会讲），写操作进行加锁<br>方案二：读操作和写操作都进行加锁</p><p>方案一性能更好，因为读写操作不冲突，而方案二读写操作需要排队执行</p><h3 id="7-2-从不同的角度对锁进行分类"><a href="#7-2-从不同的角度对锁进行分类" class="headerlink" title="7.2 从不同的角度对锁进行分类"></a>7.2 从不同的角度对锁进行分类</h3><blockquote><p>操作类型划分</p></blockquote><ul><li><p>读锁：也称为共享锁、英文用s表示。<br>针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞。<br>读锁可以是共享的，也可以是排他的</p></li><li><p>写锁：也称为排他锁、英文用x表示。<br>当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</p></li></ul><blockquote><p>根据粒度划分</p></blockquote><p>为了尽可能的提高数据的并发度，每次锁定的数据范围越小越好，但是管理锁却是一件很耗资源的事情，锁粒度就是用来平衡高并发响应和系统性能的。</p><p>表锁:</p><ul><li>该锁会锁定整张表，什么存储引擎的表锁策略都相同</li><li>因为<code>表锁的粒度比较大，所以它的开销比较小，可以很好的避免死锁，但并发性较差</code></li></ul><ol><li>表级别的S锁、X锁</li></ol><ul><li><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的S锁或者X锁的。</p></li><li><p>而在对某个表执行一些诸如ALTER TABLE、DROP TABLE这类的DDL语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。</p></li><li><p>同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行DDL语句也会发生阻塞。</p></li><li><p><strong>这个过程其实是通过在server层使用一种称之为元数据锁结构来实现的。</strong></p></li><li><p>一般情况下，不会使用InnoDB存储引擎提供的表级别的S锁和X锁。只会在一些特殊情况下，比方说崩溃恢复过程中用到。</p></li><li><p><strong>应尽量避免在使用InnoDB存储引擎的表上使用LOCK TABLES这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。InnoDB的特殊之处还是实现了更细粒度的行锁。</strong></p></li></ul><ol start="2"><li>表的意向锁</li></ol><ul><li><p>lnnoDB支持多粒度锁，它允许行级锁与表级锁共存，而意向锁就是其中的一种表锁。</p><ul><li>意向锁的存在是为了<code>协调行锁和表锁的关系</code>，支持多粒度（表锁与行锁）的锁并存。</li><li>意向锁是一种<code>不与行级锁冲突表级锁</code>，这一点非常重要。</li><li>表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</li></ul></li><li><p>意向锁分为两种：</p><ul><li>意向共享锁：事务有意向对表中的某些行加共享锁（S锁）</li><li>意向排他锁：事务有意向对表中的某些行加排他锁（X锁）</li></ul></li></ul><p><strong>意向锁在保证并发性的前提下，实现了行锁和表锁共存且满足事务隔离性的要求。</strong></p><p>意向锁是由存储引擎自己维护的，用户无法手动操作意向锁，在为数据行加共享／排他锁之前，InooDB会先获取该数据行所在数据表的对应意向锁。</p><ol start="3"><li>自增锁</li></ol><ul><li>自增锁是<strong>当向使用含有AUTO＿INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁</strong>，在执行插入语句时就在表级别加一个自增锁，然后为每条待插入记录的AUTO＿INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把锁释放掉。</li><li>一个事务在持有自增锁的过程中，<strong>其他事务的插入语句都要被阻塞</strong>，可以保证一个语句中分配的递增值是连续的。</li><li>所以，其并发性并不高，当我们向一个有AUTO＿INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争，所以InnoDB通过&#x3D;&#x3D;innodb＿autoinc＿lock＿mode（0，1，2）&#x3D;&#x3D;的不同取值来提供不同的锁定机制，来提高SQL语句的可伸缩性和性能。</li></ul><ol start="4"><li>元数据锁（MDL锁）</li></ol><ul><li>元数据锁的作用是保证读写的正确性。</li><li>比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，增加了一列，那么查询线程拿到的结果跟表结构对不上，这肯定是不行的。</li><li>因此，当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。</li><li>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。</li><li>它不需要显式使用，在访问一个表的时候会被自动加上。</li></ul><p>行锁:</p><ul><li>优点：锁定力度小，发生锁冲突概率低，可以实现的并发度高。</li><li>缺点：对于锁的开销比较大，加锁会比较慢，容易出现死锁情况。</li><li>InnoDB与MylSAM的最大不同有两点：一是支持事务；二是采用了行级锁。</li></ul><ol><li>记录锁</li></ol><ul><li>记录锁就是仅仅把一条记录锁上，对周围的数据没有影响。</li><li>记录锁分为S型记录锁和X型记录锁。<ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul></li></ul><ol start="2"><li>间隙锁</li></ol><ul><li>幻读的解决方案有两种，第一可以使用MVCC方案解决，第二也可以采用加锁方案解决。</li><li>但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁。</li><li>InnoDB提出了一种称之为Gap Locks的锁（间隙锁），不允许别的事务在间隙锁记录前边的间隙插入新记录。</li><li>gap锁的提出仅仅是为了防止插入幻影记录而提出的。虽然有共享gap锁和独占gap锁，但是它们起到的作用是相同的。如果对一条记录加了gap锁（不论是共享还是独占），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</li></ul><ol start="3"><li>临键锁</li></ol><ul><li>有时候我们既想锁住某条记录，又想阻止其他事务在该记录前边的间隙插入新记录，所以InnoDB就提出了一种临建锁。</li><li>临键锁是在存储引擎Innodb、事务级别在可重复读的情况下使用的数据库锁，Innodb默认的锁就是临键锁。</li><li>他就相当于记录锁和间隙锁的合体。</li></ul><ol start="4"><li>插入意向锁</li></ol><ul><li>一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了gap锁，如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。</li><li>但是lnnoDB规定事务在等待的时候也需要在内存中生成一个锁结构，表明有事务想在某个间隙中插入新录，但是现在在等待。InnoDB就把这种类型的锁命名为插入意向锁。</li><li>插入意向锁是一种Gap锁，不是意向锁，在insert操作时产生。</li><li>插入意向锁是在插入一条记录行前，由INSERT操作产生的一种间隙锁。该锁用以表示插入意向，当多个事务在同一区间插入位置不同的多条数据时，事务之间不需要互相等待。</li><li><strong>插入意向锁的特性：</strong><ul><li>插入意向锁是一种特殊的间隙锁，间隙锁可以锁定开区间内的部分记录。</li><li>插入意向锁之间互不排斥，所以即使多个事务在同一区间插入多条记录，只要记录本身不冲突，那么事务之间就不会出现冲突等待。</li></ul></li></ul><p>虽然插入意向锁中含有意向锁三个字，但是它并不属于意向锁而属于间隙锁，因为意向锁是表锁，而插入意向锁是行锁。</p><p>页锁:</p><ul><li>页锁就是在页的粒度上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。</li><li>页锁的开销介于表锁和行锁之间，会出现死锁，锁定粒度介于表锁和行锁之间。</li></ul><h2 id="八、MVCC多版本并发控制原理剖析"><a href="#八、MVCC多版本并发控制原理剖析" class="headerlink" title="八、MVCC多版本并发控制原理剖析"></a>八、MVCC多版本并发控制原理剖析</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><ul><li>MVCC（Multiversion Concurrency Control）多版本并发控制。</li><li><strong>就是通过数据行的多个版本管理来实现数据库的并发控制。</strong></li><li>这项技术使得在InnoDB的事务隔离级别下执行一致性读操作有了保证。</li><li>换句话说，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁。</li></ul><h3 id="8-2-快照读与当前读"><a href="#8-2-快照读与当前读" class="headerlink" title="8.2 快照读与当前读"></a>8.2 快照读与当前读</h3><ol><li>快照读</li></ol><ul><li>快照读又叫一致性读，读取的是快照数据。</li><li>不加锁的简单的SELECT都属于快照读，即不加锁的非阻塞读</li><li>之所以出现快照读，是基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下，避免了加锁操作，降低了开销。</li><li>既然是基于多版本，那么快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。</li><li>快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读</li></ul><ol start="2"><li>当前读</li></ol><ul><li>当前读读取的是记录的最新版本，最新数据，读取时还要保证其他并发事务不能修改。</li><li>当前记录会对读取的记录进行加锁。加锁的SELECT，或者对数据进行增删改都会进行当前读。</li></ul><p>在以前学习隔离级别时，对于SQL标准中，可重复读 解决了脏读，不可重复读的问题，没有解决幻读。但是在MySQL中，因为MVCC，读的时候其实读的是快照，所以也不会出现幻读。</p><h3 id="8-3-MVCC实现原理"><a href="#8-3-MVCC实现原理" class="headerlink" title="8.3 MVCC实现原理"></a>8.3 MVCC实现原理</h3><p><strong>MVCC 的实现依赖于：隐藏字段，Undo Log、Read View</strong></p><ol><li>隐藏字段</li></ol><ul><li>对于使用InnoDB存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列。<ul><li>trx＿id：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务id赋值给trx＿id隐藏列。</li><li>roll＿pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。（每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll＿pointer属性，可以将这些undo日志都连起来，串成一个链表，就是版本链）</li></ul></li></ul><p><img src="/2023/07/02/Mysql%E9%AB%98%E7%BA%A7/image-20230704100613460.png" alt="image-20230704100613460"></p><p><code>insert undo 只在事物回滚时起作用，当事物提交后，该类型的undo日志就没有用了，就会被系统回收。</code></p><ol start="2"><li>Read View</li></ol><p>在MVCC机制中，多个事务对同一个行记录进行更新会产生多个历史快照，这些历史快照保存在Undo Log里。如果一个事务想要查询这个行记录，需要读取哪个版本的行记录，就需要用到ReadView了，它帮我们解决了行的可见性问题。</p><p><strong>ReadView就是一个事务在使用MVCC机制进行快照读操作时产生的读视图。</strong>当事务启动时，会生成数据库系统当前的一个快照，InnoDB为每个事务构造了一个数组，用来记录并维护系统当前<code>活跃事务的ID</code>（“活跃”指的就是，启动了但还没提交）。</p><ol start="3"><li>思路设计</li></ol><p>使用 READ UNCOMMITTED 隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</p><p>使用 SERIALIZABLE 隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p>所以，以上两个隔离级别READ UNCOMMITTED、SERIALIZABLE是用不着MVCC的。</p><p><strong>使用 READ COMMITTED 和 REPEATABLE READ 隔离级别的事务，都必须保证读到已经提交了的事务修改过的记录，他俩就用到了MVCC机制。</strong></p><p>假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</p><ul><li>ReadView中主要的参数：<ul><li>creator_trx_id：创建这个ReadView的事物ID</li><li>trx_ids：创建ReadView时当前系统的活跃的读写事物列表</li><li>up_limit_id：活跃事物中最小的ID</li><li>low_limit_id：已提交事物最大的事物ID（1，2，3事物，1、2未提交3已提交，最大事物ID为3+1&#x3D;4）</li></ul></li></ul><ol start="4"><li>ReadView使用规则</li></ol><ul><li>如果被访问版本的trx＿id属性值与ReadView中的creator＿trx＿id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx＿id属性值小于ReadView中的up＿limit＿id值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx＿id属性值大于或等于ReadView中的low＿limit＿id值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。<ul><li>如果被访问版本的trx＿id属性值在ReadView的up＿limit＿id和low＿limit＿id之间，那就需要判断一下trx＿id 属性值是不是在trx＿ids列表中。</li><li>如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问。</li><li>如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</li></ul></li></ul><ol start="5"><li>MVCC整体操作流程<br>比如现在执行一条查询语句：</li></ol><ul><li><p>1.首先获取事务自己的版本号，也就是事务ID；</p></li><li><p>2.获取ReadView；</p></li><li><p>3.查询得到的数据，然后与ReadView中的事务版本号进行比较；</p></li><li><p>4.如果不符合ReadView规则，就需要从Undo Log中获取历史快照（顺着版本链向下找，如果直到最后一个版本还不可见的话，就意味着这条记录对该事物完全不可见，查询结果就不包含该记录）；</p></li><li><p>5.最后返回符合规则的数据。</p><p>隔离级别为读已提交时，一个事物每次select都会重新获取一次ReadView<br>隔离级别为可重复读时，一个事物只在第一次select时获取一次ReadView</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用工具类</title>
    <link href="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的工具类"><a href="#常用的工具类" class="headerlink" title="常用的工具类"></a>常用的工具类</h1><h2 id="一、httpclient"><a href="#一、httpclient" class="headerlink" title="一、httpclient"></a>一、httpclient</h2><p>这个工具类可以帮助我们来发送http请求</p><ol><li>使用jdk自带的URLConnection</li></ol><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpsUtils</span> &#123;<br><br>    <span class="hljs-comment">/*请求url获取返回的内容*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getReturn</span><span class="hljs-params">(HttpURLConnection connection)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//将返回的输入流转换成字符串</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(inputStreamReader);)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((str = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                buffer.append(str);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> buffer.toString();<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//post请求的方法重载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getReturn</span><span class="hljs-params">(HttpURLConnection connection,String jsr)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            <span class="hljs-type">byte</span>[] bytes = jsr.getBytes();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> connection.getOutputStream();<br>            outputStream.write(bytes);<br>            outputStream.flush();<br>            outputStream.close();<br><br>            <span class="hljs-comment">//将返回的输入流转换成字符串</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(inputStreamReader);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((str = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                buffer.append(str);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> buffer.toString();<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;postUrlConnection出错&quot;</span>,e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>使用案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://xxx-你的请求地址&quot;</span>;<br><span class="hljs-type">URL</span> <span class="hljs-variable">serverUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br><span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> (HttpURLConnection) serverUrl.openConnection();<br><span class="hljs-comment">// 设置是否向connection输出，因为这个是post请求，参数要放在</span><br><span class="hljs-comment">// http正文内，因此需要设为true</span><br>conn.setDoOutput(Boolean.TRUE);<br>conn.setDoInput(Boolean.TRUE);<br><span class="hljs-comment">//请求方式是POST</span><br>conn.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br><span class="hljs-comment">// Post 请求不能使用缓存</span><br>conn.setUseCaches(<span class="hljs-literal">false</span>);<br>conn.setRequestProperty(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><span class="hljs-comment">//必须设置false，否则会自动redirect到重定向后的地址</span><br>conn.setInstanceFollowRedirects(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//建立连接</span><br>conn.connect();<br><span class="hljs-comment">//设置请求体</span><br>HashMap map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">//key-value的形式设置请求参数</span><br>map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(map);<br><span class="hljs-comment">//获取了返回值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpsUtils.getReturn(conn,s);<br><span class="hljs-comment">//如果返回值是标准的JSON字符串可以像我这样给他进行转换</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(result);<br><br></code></pre></td></tr></table></figure><ol start="2"><li>使用HttpClient</li></ol><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>封装工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpPost;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpRequestBase;<br><span class="hljs-keyword">import</span> org.apache.http.entity.ContentType;<br><span class="hljs-keyword">import</span> org.apache.http.entity.StringEntity;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.http.message.BasicNameValuePair;<br><span class="hljs-keyword">import</span> org.apache.http.util.EntityUtils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 发送http请求工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/07/02 3:31 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpsUtils</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送GET请求</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> url    请求的url路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> params 请求参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 响应结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sendGet</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params)</span> &#123;<br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      httpClient = HttpClientBuilder.create().build();<br>      httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>      <span class="hljs-comment">// 设置参数</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != params &amp;&amp; params.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        List&lt;BasicNameValuePair&gt; pairList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        params.forEach((x, y) -&gt; pairList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(x, y)));<br>        <span class="hljs-type">UrlEncodedFormEntity</span> <span class="hljs-variable">urlEncodedFormEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlEncodedFormEntity</span>(pairList, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 将参数转成page=1&amp;limit=5格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> EntityUtils.toString(urlEncodedFormEntity, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url + <span class="hljs-string">&quot;?&quot;</span> + param);<br>      &#125;<br>      response = httpClient.execute(httpGet);<br>      result = EntityUtils.toString(response.getEntity());<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      close(response, httpGet, httpClient);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送POST请求(QueryParams的方式)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> url    请求路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> params 请求参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 响应结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sendPostRequest</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params)</span> &#123;<br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      httpClient = HttpClientBuilder.create().build();<br>      httpPost = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>      <span class="hljs-comment">// 设置参数</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != params &amp;&amp; params.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        List&lt;BasicNameValuePair&gt; pairList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        params.forEach((x, y) -&gt; pairList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(x, y)));<br>        <span class="hljs-type">UrlEncodedFormEntity</span> <span class="hljs-variable">urlEncodedFormEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlEncodedFormEntity</span>(pairList, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        httpPost.setEntity(urlEncodedFormEntity);<br>      &#125;<br>      response = httpClient.execute(httpPost);<br>      result = EntityUtils.toString(response.getEntity());<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      close(response, httpPost, httpClient);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送POST请求(json的方式)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> url  请求路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> params 请求参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 响应结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPostJson</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params)</span> &#123;<br>    <span class="hljs-keyword">return</span> doPostJson(url, JSON.toJSONString(params));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送POST请求(json的方式)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> url  请求路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> json 请求参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 响应结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPostJson</span><span class="hljs-params">(String url, String json)</span> &#123;<br>    <span class="hljs-comment">// 创建Httpclient对象</span><br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 创建Http Post请求</span><br>      httpPost = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>      <span class="hljs-comment">// 创建请求内容</span><br>      <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(json, ContentType.APPLICATION_JSON);<br>      httpPost.setEntity(entity);<br>      <span class="hljs-comment">// 执行http请求</span><br>      response = httpClient.execute(httpPost);<br>      resultString = EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      close(response, httpPost, httpClient);<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultString;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 关闭流</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response        response流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> httpRequestBase httpPost/Get流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> httpClient      HttpClient流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(CloseableHttpResponse response, HttpRequestBase httpRequestBase,</span><br><span class="hljs-params">      CloseableHttpClient httpClient)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>        response.close();<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (httpRequestBase != <span class="hljs-literal">null</span>) &#123;<br>        httpRequestBase.releaseConnection();<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (httpClient != <span class="hljs-literal">null</span>) &#123;<br>        httpClient.close();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>测试案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test &#123;<br>        <span class="hljs-comment">// 打开浏览器</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClientBuilder.create().build();<br>        <span class="hljs-comment">// 输入url地址</span><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>);<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 敲回车，发送请求，获取响应</span><br>            response = httpClient.execute(httpGet);<br>            <span class="hljs-comment">// 获取内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>            System.out.println(result);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>)&#123;<br>                    response.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (httpGet != <span class="hljs-literal">null</span>)&#123;<br>                    httpGet.releaseConnection();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (httpClient!= <span class="hljs-literal">null</span>)&#123;<br>                    httpClient.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>发送GET请求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendGet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        client = HttpClientBuilder.create().build();<br>        <span class="hljs-comment">// 构建参数列表【BasicNameValuePair】</span><br>        List&lt;BasicNameValuePair&gt; pairs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        pairs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(<span class="hljs-string">&quot;page&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>        pairs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(<span class="hljs-string">&quot;limit&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>));<br>        <span class="hljs-comment">// 设置参数的编码</span><br>        <span class="hljs-type">UrlEncodedFormEntity</span> <span class="hljs-variable">urlEncodedFormEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlEncodedFormEntity</span>(pairs,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 将参数转成page=1&amp;limit=5格式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> EntityUtils.toString(urlEncodedFormEntity, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        System.out.println(params);<br>        httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">&quot;http://localhost:8080/user/queryUserList?&quot;</span>+params);<br>        <span class="hljs-comment">// 发送请求</span><br>        response = client.execute(httpGet);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        System.out.println(result);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                response.close();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (httpGet != <span class="hljs-literal">null</span>)&#123;<br>                httpGet.releaseConnection();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (client != <span class="hljs-literal">null</span>)&#123;<br>                client.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>发送POST请求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendPost</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        httpClient = HttpClientBuilder.create().build();<br>        httpPost = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;http://localhost:8080/user/addUser&quot;</span>);<br>        <span class="hljs-comment">// 构建参数列表【BasicNameValuePair】</span><br>        List&lt;BasicNameValuePair&gt; pairs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        pairs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>));<br>        pairs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>        <span class="hljs-comment">// 设置参数编码</span><br>        <span class="hljs-type">UrlEncodedFormEntity</span> <span class="hljs-variable">urlEncodedFormEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlEncodedFormEntity</span>(pairs,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 发送请求之前给httpPost设置参数</span><br>        httpPost.setEntity(urlEncodedFormEntity);<br>        response = httpClient.execute(httpPost);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        System.out.println(result);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                response.close();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (httpPost != <span class="hljs-literal">null</span>)&#123;<br>                httpPost.releaseConnection();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (httpClient != <span class="hljs-literal">null</span>)&#123;<br>                httpClient.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二、mybatis-plus代码自动生成器"><a href="#二、mybatis-plus代码自动生成器" class="headerlink" title="二、mybatis-plus代码自动生成器"></a>二、mybatis-plus代码自动生成器</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-comment">&lt;!--velocity 模板引擎，Mybatis Plus 代码生成器需要--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>生成器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/27 09:42</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneratorCodeUtil</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://192.168.100.4:3306/zhgd_jky?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhgd_jky&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jz!da4-p&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gzzear&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateCode</span><span class="hljs-params">()</span> &#123;<br>    FastAutoGenerator.create(url, username, password)<br>        .globalConfig(builder -&gt; &#123;<br>          builder.author(author) <span class="hljs-comment">// 设置作者</span><br>              .fileOverride()<br>              .enableSwagger() <span class="hljs-comment">// 开启 swagger 模式</span><br>              .outputDir(<br>                  <span class="hljs-string">&quot;/Users/gaozhe/code/jianke-zhgd-backend/jianke-modules/jianke-dem/src/main/java&quot;</span>); <span class="hljs-comment">// 指定输出目录</span><br>        &#125;)<br>        .packageConfig(builder -&gt; &#123;<br>          builder.parent(<span class="hljs-string">&quot;com.jianke&quot;</span>) <span class="hljs-comment">// 设置父包名</span><br>              .moduleName(<span class="hljs-string">&quot;dem&quot;</span>) <span class="hljs-comment">// 设置父包模块名</span><br>              .pathInfo(Collections.singletonMap(OutputFile.xml,<br>                  <span class="hljs-string">&quot;/Users/gaozhe/code/jianke-zhgd-backend/jianke-modules/jianke-dem/src/main/resources/mapper&quot;</span>)); <span class="hljs-comment">// 设置mapperXml生成路径</span><br>        &#125;)<br>        .strategyConfig(builder -&gt; &#123;<br>          builder.addInclude(<span class="hljs-string">&quot;dem_point&quot;</span>,<span class="hljs-string">&quot;dem_sensor&quot;</span>,<span class="hljs-string">&quot;dem_sensor_data&quot;</span>) <span class="hljs-comment">// 设置需要生成的表名</span><br>              .addTablePrefix(<span class="hljs-string">&quot;dem_&quot;</span>); <span class="hljs-comment">// 设置过滤表前缀</span><br>        &#125;)<br>        .templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VelocityTemplateEngine</span>()) <span class="hljs-comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span><br>        .execute();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">GeneratorCodeUtil</span> <span class="hljs-variable">util</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneratorCodeUtil</span>();<br>    util.generateCode();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、knife4j"><a href="#三、knife4j" class="headerlink" title="三、knife4j"></a>三、knife4j</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入Knife4j的官方start包,Swagger2基于Springfox2.10.5项目--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--使用Swagger2--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>创建knife4j配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ParameterBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.ModelRef;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Parameter;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> knife4j配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/05 6:26 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br>  <span class="hljs-meta">@Value(&quot;$&#123;swagger.enabled&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> swaggerEnabled;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">dockerBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//配置请求头参数</span><br>    <span class="hljs-type">ParameterBuilder</span> <span class="hljs-variable">ticketPar1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterBuilder</span>();<br>    ticketPar1.name(<span class="hljs-string">&quot;Authentication&quot;</span>).description(<span class="hljs-string">&quot;认证凭证&quot;</span>)<br>        .modelRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(<span class="hljs-string">&quot;string&quot;</span>)).parameterType(<span class="hljs-string">&quot;header&quot;</span>)<br>        .required(<span class="hljs-literal">false</span>)<br>        .defaultValue(<span class="hljs-string">&quot;&quot;</span>)<br>        .build();<br>    <span class="hljs-type">ParameterBuilder</span> <span class="hljs-variable">ticketPar2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterBuilder</span>();<br>    ticketPar2.name(<span class="hljs-string">&quot;Level&quot;</span>)<br>        .description(<span class="hljs-string">&quot;股份（集团） 1子公司(二级单位) 2分公司（三级单位） 3项目（工地&quot;</span>)<br>        .modelRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(<span class="hljs-string">&quot;int&quot;</span>)).parameterType(<span class="hljs-string">&quot;header&quot;</span>)<br>        .required(<span class="hljs-literal">false</span>)<br>        .defaultValue(<span class="hljs-string">&quot;&quot;</span>)<br>        .build();<br><br>    List&lt;Parameter&gt; pars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    pars.add(ticketPar1.build());<br>    pars.add(ticketPar2.build());<br><br>    <span class="hljs-comment">//指定使用Swagger2规范</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>        <span class="hljs-comment">//是否禁用</span><br>        .enable(swaggerEnabled)<br>        .apiInfo(apiInfo())<br>        <span class="hljs-comment">//分组名称</span><br>        .groupName(<span class="hljs-string">&quot;用户服务&quot;</span>)<br>        .select()<br>        <span class="hljs-comment">//这里指定Controller扫描包路径</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.gz.mall.controller&quot;</span>))<br>        .paths(PathSelectors.any())<br>        .build()<br>        <span class="hljs-comment">//这里指定请求头参数</span><br>        .globalOperationParameters(pars);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>        .title(<span class="hljs-string">&quot;xx系统服务restful api&quot;</span>)<br>        .description(<span class="hljs-string">&quot;xx系统接口文档&quot;</span>)<br>        <span class="hljs-comment">//服务条款网址</span><br>        .termsOfServiceUrl(<span class="hljs-string">&quot;http://localhost/&quot;</span>)<br>        .version(<span class="hljs-string">&quot;1.0.0&quot;</span>)<br>        .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;高喆&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;373795878@qq.com&quot;</span>))<br>        .build();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>扫描包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-meta">@ComponentScan(&quot;com.gz&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceVodApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServiceVodApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red;">访问地址: <a href="http://localhost:xx/doc.html">http://localhost:xx/doc.html</a></span></p><blockquote><p>常用注解</p></blockquote><ol><li>在Controller上加@Api，用tags指定Controller名称</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/432628/1600596624981-c13fdbed-b671-4fbe-8f65-12945c463272.png?x-oss-process=image/resize,w_882,limit_0" alt="image.png"></p><ol start="2"><li><p>添加接口描述</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/432628/1600598957232-fbf1b3e2-f298-4a14-b5a7-fd5156285767.png?x-oss-process=image/resize,w_778,limit_0" alt="image.png"></p></li><li><p>隐藏某个Controller，可以使用@Api的hidden属性：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/432628/1600598710790-a573c284-cb65-47aa-b75e-8cb4cab9075d.png" alt="image.png"></p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/432628/1600599017157-2f423acb-316c-4dd4-8c76-d9ffe45c2e85.png?x-oss-process=image/resize,w_796,limit_0" alt="image.png"></p><ol start="4"><li><span style="color:red;">传参说明@ApiImplicitParams：</span></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名和年龄获取用户</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;名字&quot;, dataType = &quot;String&quot;, paramType = &quot;query&quot;, required = true),</span><br><span class="hljs-meta">        @ApiImplicitParam(name = &quot;age&quot;, value = &quot;年龄&quot;, dataType = &quot;Integer&quot;, paramType = &quot;query&quot;, required = true)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@GetMapping(&quot;/getUserByNameAndAge&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getUserByNameAndAge</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name, <span class="hljs-meta">@RequestParam</span> Integer age)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;name:&#123;&#125;, age:&#123;&#125;&quot;</span>, name, age);<br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TkUserPojo</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐大家点进@ApiImplicitParam看看，那几个属性很有用：</p><ul><li>name：参数名称,必须要和参数列表里的参数一致，不然无法解析或者格式不好看</li><li>value：对参数的描述</li><li>dataType：参数类型，默认String</li><li>paramType：告诉前端参数放哪，有header、query、path、body和form</li><li>required：告诉前端该参数是否必传</li><li>defaultValue：告诉前端如果这个参数不传的话，后端默认值是啥</li></ul><ol start="5"><li>DTO封装参数</li></ol><p>如果是JSON请求，我们只能用DTO接收，此时推荐使用@ApiModel+@ApiModelProperty：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;用户DTO&quot;)</span><br><span class="hljs-meta">@Table(name = &quot;tk_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TkUserDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasePojo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;id&quot;, dataType = &quot;Long&quot;, required = true)</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY, generator = &quot;SELECT LAST_INSERT_ID()&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;姓名&quot;, dataType = &quot;String&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;年龄&quot;, dataType = &quot;String&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户类型&quot;, dataType = &quot;Integer&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> Integer userType;<br>  <br>  <span class="hljs-meta">@Column(name = &quot;create_time&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;, dataType = &quot;Integer&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;update_time&quot;)</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;修改时间&quot;, dataType = &quot;Integer&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@LogicDelete</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否删除&quot;, dataType = &quot;Integer&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> Boolean deleted;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、EasyExcel"><a href="#四、EasyExcel" class="headerlink" title="四、EasyExcel"></a>四、EasyExcel</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 里面的cglib版本不兼容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br></code></pre></td></tr></table></figure><blockquote><p>读取excel</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//读取文件</span><br>    <span class="hljs-comment">//创建ExcelReaderBuilder实例</span><br>    <span class="hljs-type">ExcelReaderBuilder</span> <span class="hljs-variable">readerBuilder</span> <span class="hljs-operator">=</span> EasyExcel.read();<br>    <span class="hljs-comment">//获取文件对象</span><br>    readerBuilder.file(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/管理员接入审核表格数据.xlsx&quot;</span>);<br>    <span class="hljs-comment">//指定sheet</span><br>    readerBuilder.sheet(<span class="hljs-string">&quot;管理员接入审核表格数据&quot;</span>);<br>    <span class="hljs-comment">//指定关闭输入流</span><br>    readerBuilder.autoCloseStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//设置Excel文件格式</span><br>    readerBuilder.excelType(ExcelTypeEnum.XLSX);<br>    <span class="hljs-comment">//指定读取转化后的对象类型</span><br>    readerBuilder.head(TowerExcelObject.class);<br>    <span class="hljs-comment">//注册监听器进行数据解析</span><br>    readerBuilder.registerReadListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;TowerExcelObject&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(TowerExcelObject towerExcelObject, AnalysisContext analysisContext)</span> &#123;<br>        <span class="hljs-comment">//读取一行excel的回调</span><br>        System.out.println(towerExcelObject);<br>      &#125;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>        <span class="hljs-comment">//读取完毕的回调</span><br>        System.out.println(<span class="hljs-string">&quot;数据读取完毕.......&quot;</span>);<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">//构建读取器</span><br>    <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> readerBuilder.build();<br>    <span class="hljs-comment">//读取数据</span><br>    reader.readAll();<br>    <span class="hljs-comment">//读取完毕</span><br>    reader.finish();<br><br><br><br>==========================链式写法============================================================<br>EasyExcel.read(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/管理员接入审核表格数据.xlsx&quot;</span>).head(TowerExcelObject.class)<br>        .sheet().registerReadListener(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;TowerExcelObject&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(TowerExcelObject towerExcelObject, AnalysisContext analysisContext)</span> &#123;<br>            System.out.println(towerExcelObject);<br>          &#125;<br><br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据读取完毕.......&quot;</span>);<br>          &#125;<br>        &#125;).doRead();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TowerExcelObject</span> &#123;<br><br>  <span class="hljs-meta">@ExcelProperty(&quot;供应商&quot;)</span><br>  <span class="hljs-keyword">private</span> String supplierName;<br><br>  <span class="hljs-meta">@ExcelProperty(&quot;项目名称&quot;)</span><br>  <span class="hljs-keyword">private</span> String projectName;<br><br>  <span class="hljs-meta">@ExcelProperty(&quot;设备编号&quot;)</span><br>  <span class="hljs-keyword">private</span> String serialNumber;<br><br>  <span class="hljs-meta">@ExcelProperty(&quot;状态&quot;)</span><br>  <span class="hljs-keyword">private</span> String deviceStatusString;<br><br>  <span class="hljs-meta">@ExcelProperty(&quot;审核结果&quot;)</span><br>  <span class="hljs-keyword">private</span> String approvalStatusString;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、解决跨域问题"><a href="#五、解决跨域问题" class="headerlink" title="五、解决跨域问题"></a>五、解决跨域问题</h2><blockquote><p>后端解决跨域</p></blockquote><p>注意:</p><p>CorFilter &#x2F; WebMvConfigurer &#x2F; @CrossOrigin 需要 SpringMVC 4.2以上版本才支持，对应springBoot 1.3版本以上<br>上面前两种方式属于全局 CORS 配置，后两种属于局部 CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过 @CrossOrigin 注解来进行细粒度更高的跨域资源控制。<br>其实无论哪种方案，最终目的都是修改响应头，向响应头中添加浏览器所要求的数据，进而实现跨域</p><blockquote><p>跨域</p></blockquote><ol><li>使用CORS（跨域资源共享）</li></ol><p>它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><p>当然要支持跨域访问，需要浏览器和后台服务器程序同时支持，如果这两个条件不能同时满足，则还是不能支持跨域访问</p><p>ps：要注意跨域访问的限制并不是说浏览器限制发送请求，而是浏览器阻止了请求后数据的加载渲染，因此浏览器跨域拦截流程大致如下：</p><p>跨域访问限制的流程</p><p>1、 浏览器发送跨域请求</p><p>2、 接收response数据</p><p>3、 检查响应头</p><p>（1）、如果响应头中没有允许跨域访问的配置，则不加载，并报出响应异常</p><p>（2）、如果响应头中有允许跨域访问的设置，正常加载数据</p><ol start="2"><li>用于CORS中的Http的首部有如下几个：</li></ol><p>（1）响应头</p><ul><li><p>Access-Control-Allow-Origin: 允许跨域访问的域，可以是一个域的列表，也可以是通配符”*”；(从那个地址发起请求)</p></li><li><p>Access-Control-Allow-Methods: 允许使用的请求方法，以逗号隔开；</p></li><li><p>Access-Control-Allow-Headers: 允许自定义的头部，以逗号隔开，大小写不敏感；</p></li><li><p>Access-Control-Expose-Headers: 允许脚本访问的返回头，请求成功后，脚本可以在XMLHttpRequest中访问这些头的信息</p></li><li><p>Access-Control-Allow-Credentials: 是否允许请求带有验证信息，XMLHttpRequest请求的withCredentials标志设置为true时，认证通过，浏览器才将数据给脚本程序。</p></li><li><p>Access-Control-Max-Age: 缓存此次请求的秒数。在这个时间范围内，所有同类型的请求都将不再发送预检请求而是直接使用此次返回的头作为判断依据，非常有用，大幅优化请求次数；</p></li></ul><p>（2）请求头</p><ul><li><p>Origin: 普通的HTTP请求也会带有，在CORS中专门作为Origin信息供后端比对,表明来源域，要与响应头中的Access-Control-Allow-Origin相匹配才能进行跨域访问；</p></li><li><p>Access-Control-Request-Method: 将要进行跨域访问的请求方法，要与响应头中的Access-Control-Allow-Methods相匹配才能进行跨域访问；</p></li><li><p>Access-Control-Request-Headers: 自定义的头部，所有用setRequestHeader方法设置的头部都将会以逗号隔开的形式包含在这个头中，要与响应头中的Access-Control-Allow-Headers相匹配才能进行跨域访问</p></li></ul><p>全局配置：</p><ol><li>CorsFilter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.CorsFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 解决跨域配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/07/09 2:19 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><br>  <span class="hljs-comment">// 当前跨域请求最大有效时长。这里默认1天</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">MAX_AGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>    <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>    corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 1 设置访问源地址</span><br>    corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 2 设置访问源请求头</span><br>    corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 3 设置访问源请求方法</span><br>    corsConfiguration.setMaxAge(MAX_AGE);<br>    source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration); <span class="hljs-comment">// 4 对接口配置跨域设置</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(source);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 2、实现WebMvcConfigurer里面的addCorsMappings方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">corsFilter1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">// 匹配所有的路径</span><br>                .allowCredentials(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 设置允许凭证</span><br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)   <span class="hljs-comment">// 设置请求头</span><br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>) <span class="hljs-comment">// 设置允许的方式</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>网关：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">api-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">xxxxxx:8848</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">cors-configurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-string">&quot;*&quot;</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&quot;*&quot;</span><br>      <br><br></code></pre></td></tr></table></figure><p>局部配置：</p><p>1.@CrossOrigin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/t2&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">t2</span><span class="hljs-params">()</span> &#123;<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;123456&quot;</span>);<br>    user.setPassword(<span class="hljs-string">&quot;程世玉&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;user&quot;</span>,user);<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br><br><span class="hljs-comment">//也可以指定允许通过的ip</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果只是想部分接口跨域，且不想使用配置来管理的话，可以使用这种方式</span><br><span class="hljs-comment"> * 添加响应头解决跨域</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user_2&quot;, method = RequestMethod.POST)</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://172.16.71.27:8080&quot;, maxAge = 3600)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser_2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id, <span class="hljs-string">&quot;Booker&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;sdfsdkjf93hu8dvn&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//添加响应头解决跨域</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user-1&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser_1</span><span class="hljs-params">(HttpServletResponse response )</span> &#123;<br><br>    <span class="hljs-comment">// 允许所有，不安全</span><br>    response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    response.addHeader(<span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET, POST, PUT&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Booker&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;sdfsdkjf93hu8dvn&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="六、时间工具类"><a href="#六、时间工具类" class="headerlink" title="六、时间工具类"></a>六、时间工具类</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- 日期工具栏依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>封装工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.joda.time.DateTime;<br><span class="hljs-keyword">import</span> org.joda.time.DateTimeConstants;<br><span class="hljs-keyword">import</span> org.joda.time.Days;<br><span class="hljs-keyword">import</span> org.joda.time.LocalDate;<br><span class="hljs-keyword">import</span> org.joda.time.LocalTime;<br><span class="hljs-keyword">import</span> org.joda.time.format.DateTimeFormat;<br><span class="hljs-keyword">import</span> org.joda.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 时间转化工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/07/10 12:18 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JodaTimeUtil</span> &#123;<br><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATTERN_STANDARD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATTERN_DATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATTERN_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * date类型 -&gt; string类型</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">date2Str</span><span class="hljs-params">(Date date)</span> &#123;<br>    <span class="hljs-keyword">if</span> (date == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    <span class="hljs-keyword">return</span> dateTime.toString(PATTERN_STANDARD);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * date类型 -&gt; string类型</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> formatPattern</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">date2Str</span><span class="hljs-params">(Date date, String formatPattern)</span> &#123;<br>    <span class="hljs-keyword">if</span> (date == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    <span class="hljs-keyword">return</span> dateTime.toString(formatPattern);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * string类型 -&gt; date类型</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeStr</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">str2Date</span><span class="hljs-params">(String timeStr)</span> &#123;<br>    <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormat.forPattern(PATTERN_STANDARD);<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> dateTimeFormatter.parseDateTime(timeStr);<br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> year    年</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> month   月</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> day     日</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> hour    时</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> minute  分</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> seconds 秒</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAssignedDateTime</span><span class="hljs-params">(Integer year, Integer month, Integer day, Integer hour,</span><br><span class="hljs-params">      Integer minute, Integer seconds)</span> &#123;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(year, month, day, hour, minute, seconds);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_STANDARD);<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定日期</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> year</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> month</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> day</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAssignedDate</span><span class="hljs-params">(Integer year, Integer month, Integer day)</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDate</span>(year, month, day);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_DATE);<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> hour</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> minutes</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> seconds</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAssignedTime</span><span class="hljs-params">(Integer hour, Integer minutes, Integer seconds)</span> &#123;<br>    <span class="hljs-type">LocalTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTime</span>(hour, minutes, seconds);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_TIME);<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断date日期是否过期(与当前时刻比较)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTimeExpired</span><span class="hljs-params">(Date date)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">timeStr</span> <span class="hljs-operator">=</span> date2Str(date);<br>    <span class="hljs-keyword">return</span> isBeforeNow(timeStr);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断date日期是否过期(与当前时刻比较)</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeStr</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTimeExpired</span><span class="hljs-params">(String timeStr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(timeStr)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> isBeforeNow(timeStr);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断timeStr是否在当前时刻之前</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeStr</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBeforeNow</span><span class="hljs-params">(String timeStr)</span> &#123;<br>    <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> DateTimeFormat.forPattern(PATTERN_STANDARD);<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> DateTime.parse(timeStr, format);<br>    <span class="hljs-keyword">return</span> dateTime.isBeforeNow();<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加天数</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> days</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">plusDays</span><span class="hljs-params">(Date date, Integer days)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    days = <span class="hljs-literal">null</span> == days ? <span class="hljs-number">0</span> : days;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.plusDays(days);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 减天数</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> days</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">minusDays</span><span class="hljs-params">(Date date, Integer days)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    days = <span class="hljs-literal">null</span> == days ? <span class="hljs-number">0</span> : days;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.minusDays(days);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加分钟</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> minutes</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">plusMinutes</span><span class="hljs-params">(Date date, Integer minutes)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    minutes = <span class="hljs-literal">null</span> == minutes ? <span class="hljs-number">0</span> : minutes;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.plusMinutes(minutes);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 减分钟</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> minutes</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">minusMinutes</span><span class="hljs-params">(Date date, Integer minutes)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    minutes = <span class="hljs-literal">null</span> == minutes ? <span class="hljs-number">0</span> : minutes;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.minusMinutes(minutes);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加月份</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> months</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">plusMonths</span><span class="hljs-params">(Date date, Integer months)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    months = <span class="hljs-literal">null</span> == months ? <span class="hljs-number">0</span> : months;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.plusMonths(months);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 减月份</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> months</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">minusMonths</span><span class="hljs-params">(Date date, Integer months)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == date) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    months = <span class="hljs-literal">null</span> == months ? <span class="hljs-number">0</span> : months;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date);<br>    dateTime = dateTime.minusMonths(months);<br><br>    <span class="hljs-keyword">return</span> dateTime.toDate();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断target是否在开始和结束时间之间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> target</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> startTime</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> endTime</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBetween</span><span class="hljs-params">(Date target, Date startTime, Date endTime)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == target || <span class="hljs-literal">null</span> == startTime || <span class="hljs-literal">null</span> == endTime) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(target);<br>    <span class="hljs-keyword">return</span> dateTime.isAfter(startTime.getTime()) &amp;&amp; dateTime.isBefore(endTime.getTime());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取当前系统时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCurrentDateTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_STANDARD);<br>    <span class="hljs-keyword">return</span> time;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取当前日期</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCurrentDate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_DATE);<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取系统当前时间按照指定格式返回</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCurrentTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> dt.toString(PATTERN_TIME);<br>    <span class="hljs-keyword">return</span> time;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取当前是一周星期几</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getWeek</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">switch</span> (dts.getDayOfWeek()) &#123;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.SUNDAY:<br>        week = <span class="hljs-string">&quot;星期日&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> DateTimeConstants.MONDAY:<br>        week = <span class="hljs-string">&quot;星期一&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">case</span> DateTimeConstants.TUESDAY:<br>        week = <span class="hljs-string">&quot;星期二&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.WEDNESDAY:<br>        week = <span class="hljs-string">&quot;星期三&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.THURSDAY:<br>        week = <span class="hljs-string">&quot;星期四&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.FRIDAY:<br>        week = <span class="hljs-string">&quot;星期五&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.SATURDAY:<br>        week = <span class="hljs-string">&quot;星期六&quot;</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> week;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定时间是一周的星期几</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> year</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> month</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> day</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getWeek</span><span class="hljs-params">(Integer year, Integer month, Integer day)</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">dts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDate</span>(year, month, day);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">switch</span> (dts.getDayOfWeek()) &#123;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.SUNDAY:<br>        week = <span class="hljs-string">&quot;星期日&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.MONDAY:<br>        week = <span class="hljs-string">&quot;星期一&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.TUESDAY:<br>        week = <span class="hljs-string">&quot;星期二&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.WEDNESDAY:<br>        week = <span class="hljs-string">&quot;星期三&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.THURSDAY:<br>        week = <span class="hljs-string">&quot;星期四&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.FRIDAY:<br>        week = <span class="hljs-string">&quot;星期五&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DateTimeConstants.SATURDAY:<br>        week = <span class="hljs-string">&quot;星期六&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> week;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 计算两个时间相差多少天</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> startDate</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> endDate</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">diffDay</span><span class="hljs-params">(Date startDate, Date endDate)</span> &#123;<br>    <span class="hljs-keyword">if</span> (startDate == <span class="hljs-literal">null</span> || endDate == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(startDate);<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">dt2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(endDate);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Days.daysBetween(dt1, dt2).getDays();<br>    <span class="hljs-keyword">return</span> Math.abs(day);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、统一返回值处理"><a href="#七、统一返回值处理" class="headerlink" title="七、统一返回值处理"></a>七、统一返回值处理</h2><blockquote><p>异常枚举类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用错误枚举（不同类型的错误也可以拆成不同的Enum细分）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sunting</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ExceptionCodeEnum</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用结果</span><br><span class="hljs-comment">     */</span><br>    ERROR(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;网络错误&quot;</span>),<br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;成功&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     */</span><br>    NEED_LOGIN(<span class="hljs-number">900</span>, <span class="hljs-string">&quot;用户未登录&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数校验</span><br><span class="hljs-comment">     */</span><br>    ERROR_PARAM(<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;参数错误&quot;</span>),<br>    EMPTY_PARAM(<span class="hljs-number">10001</span>, <span class="hljs-string">&quot;参数为空&quot;</span>),<br>    ERROR_PARAM_LENGTH(<span class="hljs-number">10002</span>, <span class="hljs-string">&quot;参数长度错误&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String desc;<br><br>    ExceptionCodeEnum(Integer code, String desc) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, ExceptionCodeEnum&gt; ENUM_CACHE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (ExceptionCodeEnum exceptionCodeEnum : ExceptionCodeEnum.values()) &#123;<br>            ENUM_CACHE.put(exceptionCodeEnum.code, exceptionCodeEnum);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(ENUM_CACHE.get(code))<br>                .map(ExceptionCodeEnum::getDesc)<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;invalid exception code!&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>自定义异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务异常</span><br><span class="hljs-comment"> * biz是business的缩写</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sunting</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> ExceptionCodeEnum</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BizException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ExceptionCodeEnum error;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器，有时我们需要将第三方异常转为自定义异常抛出，但又不想丢失原来的异常信息，此时可以传入cause</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> error</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cause</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BizException</span><span class="hljs-params">(ExceptionCodeEnum error, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>        <span class="hljs-built_in">this</span>.error = error;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器，只传入错误枚举</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> error</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BizException</span><span class="hljs-params">(ExceptionCodeEnum error)</span> &#123;<br>        <span class="hljs-built_in">this</span>.error = error;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>封装返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一般返回实体</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sunting</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String message, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 带数据成功返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(ExceptionCodeEnum.SUCCESS.getCode(), ExceptionCodeEnum.SUCCESS.getDesc(), data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不带数据成功返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用错误返回，传入指定的错误枚举</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exceptionCodeEnum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(ExceptionCodeEnum exceptionCodeEnum)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(exceptionCodeEnum.getCode(), exceptionCodeEnum.getDesc());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用错误返回，传入指定的错误枚举，但支持覆盖message</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exceptionCodeEnum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(ExceptionCodeEnum exceptionCodeEnum, String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(exceptionCodeEnum.getCode(), msg);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用错误返回，只传入message</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(ExceptionCodeEnum.ERROR.getCode(), msg);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>定义注解来对返回值处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CosmoController &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>定义注解来忽略对返回值处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> IgnoreCosmoResult &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对返回值处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 返回值统一处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/07/27 1:52 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResponseDataAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter,</span><br><span class="hljs-params">      Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;<br>    <span class="hljs-comment">// 标注了@CosmoController，且类及方法上都没有标注@IgnoreCosmoResult的方法才进行包装</span><br>    <span class="hljs-keyword">return</span> methodParameter.getDeclaringClass().isAnnotationPresent(CosmoController.class)<br>        &amp;&amp; !methodParameter.getDeclaringClass().isAnnotationPresent(IgnoreCosmoResult.class)<br>        &amp;&amp; !methodParameter.getMethod().isAnnotationPresent(IgnoreCosmoResult.class);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object o,</span><br><span class="hljs-params">      MethodParameter methodParameter,</span><br><span class="hljs-params">      MediaType mediaType,</span><br><span class="hljs-params">      Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass,</span><br><span class="hljs-params">      ServerHttpRequest serverHttpRequest,</span><br><span class="hljs-params">      ServerHttpResponse serverHttpResponse)</span> &#123;<br>    <span class="hljs-comment">// 已经包装过的，不再重复包装</span><br>    <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Result || o <span class="hljs-keyword">instanceof</span> Page) &#123;<br>      <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.success(o);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>分页对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gaozhe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> Page</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 分页对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021-03-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;新的分页对象&quot;)</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span>&lt;T&gt; &#123;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;分页条数，默认10条&quot;)</span><br>  <span class="hljs-meta">@JsonProperty(&quot;page_size&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br><br>  <span class="hljs-meta">@ApiModelProperty(&quot;当前页数, 默认第一页&quot;)</span><br>  <span class="hljs-meta">@JsonProperty(&quot;page&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currentPage;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;总页数&quot;)</span><br>  <span class="hljs-meta">@JsonProperty(&quot;total&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalPage;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;总条数&quot;)</span><br>  <span class="hljs-meta">@JsonProperty(&quot;count&quot;)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalRecords;<br><br>  <span class="hljs-meta">@ApiModelProperty(&quot;列表数据&quot;)</span><br>  <span class="hljs-meta">@JsonProperty(&quot;results&quot;)</span><br>  <span class="hljs-keyword">private</span> List&lt;T&gt; items;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">(<span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> totalPage, <span class="hljs-type">int</span> totalRecords, List&lt;T&gt; items)</span> &#123;<br>    <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>    <span class="hljs-built_in">this</span>.currentPage = currentPage;<br>    <span class="hljs-built_in">this</span>.totalPage = totalPage;<br>    <span class="hljs-built_in">this</span>.totalRecords = totalRecords;<br>    <span class="hljs-built_in">this</span>.items = items;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(<span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> totalPage, <span class="hljs-type">int</span> totalRecords,</span><br><span class="hljs-params">      List&lt;T&gt; items)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageSize, currentPage, totalPage, totalRecords, items);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(<span class="hljs-type">long</span> pageSize, <span class="hljs-type">long</span> currentPage, <span class="hljs-type">long</span> totalPage, <span class="hljs-type">long</span> totalRecords,</span><br><span class="hljs-params">      List&lt;T&gt; items)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;T&gt;((<span class="hljs-type">int</span>) pageSize, (<span class="hljs-type">int</span>) currentPage, (<span class="hljs-type">int</span>) totalPage, (<span class="hljs-type">int</span>) totalRecords,<br>        items);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="八、处理xml"><a href="#八、处理xml" class="headerlink" title="八、处理xml"></a>八、处理xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">webSite</span>&gt;</span>http://www.roadjava.com<span class="hljs-tag">&lt;/<span class="hljs-name">webSite</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">owner</span>&gt;</span>zhaodaowen<span class="hljs-tag">&lt;/<span class="hljs-name">owner</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">desc</span>&gt;</span>java视频教程、java项目<span class="hljs-tag">&lt;/<span class="hljs-name">desc</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">detail</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">videos</span> <span class="hljs-attr">desc</span>=<span class="hljs-string">&quot;视频列表&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xml视频教程&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">chapter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>1.java操作xml相关技术概览<span class="hljs-tag">&lt;/<span class="hljs-name">chapter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">chapter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2.dom读写xml<span class="hljs-tag">&lt;/<span class="hljs-name">chapter</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;299&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;httpclient视频教程&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">chapter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;14&quot;</span>&gt;</span>14.发送上传文件的post请求<span class="hljs-tag">&lt;/<span class="hljs-name">chapter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">chapter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;15&quot;</span>&gt;</span>15.为何要绕过https安全认证<span class="hljs-tag">&lt;/<span class="hljs-name">chapter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">chapter</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;16&quot;</span>&gt;</span>16.httpclient连接池和通用工具类封装<span class="hljs-tag">&lt;/<span class="hljs-name">chapter</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">videos</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">projects</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">propject</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>学生成绩管理<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">propject</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">propject</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>坦克大战<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">propject</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">projects</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">detail</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>dom</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来获取id=1的chapter标签的文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRead</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// DocumentBuilder的工厂类，专门用来生成DocumentBuilder</span><br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>        <span class="hljs-comment">// 用来构造Document</span><br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">documentBuilder</span> <span class="hljs-operator">=</span> dbf.newDocumentBuilder();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> documentBuilder.parse(<span class="hljs-string">&quot;E:\\tmp\\xml-demo\\src\\test\\resources\\msg.xml&quot;</span>);<br>        <span class="hljs-comment">// Document Node Element Attr Comment Text getElementsByTagName : w3c规范里的</span><br>        <span class="hljs-type">NodeList</span> <span class="hljs-variable">chapterList</span> <span class="hljs-operator">=</span> document.getElementsByTagName(<span class="hljs-string">&quot;chapter&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;共获取到:&quot;</span>+chapterList.getLength());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;chapterList.getLength();i++) &#123;<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">chapterEle</span> <span class="hljs-operator">=</span> (Element) chapterList.item(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> chapterEle.getAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(id)) &#123;<br>                System.out.println(chapterEle.getFirstChild().getNodeValue());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写一个xml</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrite</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// DocumentBuilder的工厂类，专门用来生成DocumentBuilder</span><br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>        <span class="hljs-comment">// 用来构造Document</span><br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">documentBuilder</span> <span class="hljs-operator">=</span> dbf.newDocumentBuilder();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> documentBuilder.newDocument();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        &lt;content&gt;</span><br><span class="hljs-comment">            &lt;webSite&gt;http://www.roadjava.com&lt;/webSite&gt;</span><br><span class="hljs-comment">        &lt;/content&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 创建标签</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> document.createElement(<span class="hljs-string">&quot;content&quot;</span>);<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">webSite</span> <span class="hljs-operator">=</span> document.createElement(<span class="hljs-string">&quot;webSite&quot;</span>);<br>        <span class="hljs-comment">// 设置值</span><br>        webSite.setTextContent(<span class="hljs-string">&quot;http://www.roadjava.com&quot;</span>);<br>        <span class="hljs-comment">// 设置关联层级关系</span><br>        content.appendChild(webSite);<br>        document.appendChild(content);<br><br>        <span class="hljs-comment">// 输出</span><br>        <span class="hljs-type">TransformerFactory</span> <span class="hljs-variable">transformerFactory</span> <span class="hljs-operator">=</span> TransformerFactory.newInstance();<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> transformerFactory.newTransformer();<br><br>        <span class="hljs-comment">// xmlSource:要输出的xml源</span><br>        <span class="hljs-type">DOMSource</span> <span class="hljs-variable">xmlSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMSource</span>(document);<br>        <span class="hljs-comment">// outputTarget:输出到哪里</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;E:\\tmp\\xml-demo\\src\\test\\resources\\msg2.xml&quot;</span>);<br>        <span class="hljs-type">StreamResult</span> <span class="hljs-variable">streamResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamResult</span>(fos);<br>        <span class="hljs-comment">// 设置一些transformer</span><br>        transformer.setOutputProperty(OutputKeys.ENCODING,<span class="hljs-string">&quot;utf-8&quot;</span>);<span class="hljs-comment">// 指定编码</span><br>        transformer.setOutputProperty(OutputKeys.INDENT,<span class="hljs-string">&quot;yes&quot;</span>);<span class="hljs-comment">// 美化输出</span><br>        transformer.transform(xmlSource,streamResult);<br>        fos.close();<br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>dom4j</p></blockquote><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入dom4j依赖,还有一个groupId是dom4j,老版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRead</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\tmp\\xml-demo\\src\\test\\resources\\msg.xml&quot;</span>;<br>       <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path));<br>       <span class="hljs-comment">// 有了dom4j的文档对象，</span><br>       <span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement(); <span class="hljs-comment">// 获取根节点</span><br>       System.out.println(rootElement);<br>       <span class="hljs-comment">// 获取节点rootElement所有的子节点</span><br>       Iterator&lt;Element&gt; elementIterator = rootElement.elementIterator();<br>       <span class="hljs-comment">// 获取单个的子节点</span><br>       <span class="hljs-type">Element</span> <span class="hljs-variable">detail</span> <span class="hljs-operator">=</span> rootElement.element(<span class="hljs-string">&quot;detail&quot;</span>);<br>       <span class="hljs-type">Element</span> <span class="hljs-variable">videos</span> <span class="hljs-operator">=</span> detail.element(<span class="hljs-string">&quot;videos&quot;</span>);<br>       System.out.println(videos);<br>       <span class="hljs-comment">// 获取videos元素的desc属性值</span><br>       <span class="hljs-type">Attribute</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> videos.attribute(<span class="hljs-string">&quot;desc&quot;</span>);<br>       System.out.println(desc.getValue());<br>       <span class="hljs-comment">// 也可以结合xpath来使用,比如：jaxen</span><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    &lt;content&gt;</span><br><span class="hljs-comment">    &lt;webSite&gt;http://www.roadjava.com&lt;/webSite&gt;</span><br><span class="hljs-comment">    &lt;/content&gt;</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrite</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> DocumentHelper.createDocument();<br>       <span class="hljs-comment">// 创建元素的时候关联的层级关系就确定了</span><br>       <span class="hljs-type">Element</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> document.addElement(<span class="hljs-string">&quot;content&quot;</span>);<br>       <span class="hljs-type">Element</span> <span class="hljs-variable">webSite</span> <span class="hljs-operator">=</span> content.addElement(<span class="hljs-string">&quot;webSite&quot;</span>);<br>       <span class="hljs-comment">// 设置文本内容</span><br>       webSite.addText(<span class="hljs-string">&quot;http://www.roadjava.com&quot;</span>);<br><br>       <span class="hljs-comment">// 输出</span><br>       <span class="hljs-type">OutputFormat</span> <span class="hljs-variable">outputFormat</span> <span class="hljs-operator">=</span> OutputFormat.createPrettyPrint();<br>       outputFormat.setEncoding(StandardCharsets.UTF_8.name());<br>       <span class="hljs-type">String</span> <span class="hljs-variable">outPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\tmp\\xml-demo\\src\\test\\resources\\msg2.xml&quot;</span>;<br>       <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(outPath);<br>       <span class="hljs-type">XMLWriter</span> <span class="hljs-variable">xmlWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLWriter</span>(fos,outputFormat);<br>       <span class="hljs-comment">// 把document对象的内容写到文件</span><br>       xmlWriter.write(document);<br>       fos.close();<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="九、druid数据源"><a href="#九、druid数据源" class="headerlink" title="九、druid数据源"></a>九、druid数据源</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>基本配置介绍</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://114.132.160.23:3306/ggkt_vod?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;seSSL=true&amp;serverTimezone=GMT%2B8&amp;allowMultiQueries=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">gaozhe741234</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-comment"># druid配置</span><br>      <span class="hljs-comment"># 初始化时建立物理连接的个数</span><br>      <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 连接池包含连接的最大数量</span><br>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 单位:ms,获取连接时最大等待时间</span><br>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 连接池包含连接的最小数量</span><br>      <span class="hljs-attr">minIdle:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 申请连接时是否执行validationQuery的语句检测连接的有效性,影响性能</span><br>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 归还连接时是否执行validationQuery的语句检测连接的有效性,影响性能</span><br>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment"># 避免db单方面关闭连接,如mysql:show variables like &#x27;%timeout%&#x27;,</span><br>      <span class="hljs-comment"># 关注interactive_timeout和wait_timeout, 默认8h</span><br>      <span class="hljs-comment"># 可能会出现mysql已经关闭</span><br>      <span class="hljs-comment"># 1.minEvictableIdleTimeMillis &lt; maxEvictableIdleTimeMillis</span><br>      <span class="hljs-comment"># 2.maxEvictableIdleTimeMillis + timeBetweenEvictionRunsMillis &lt; 8h（28800000）</span><br><br>      <span class="hljs-comment"># 单位:ms,连接保持空闲而不被驱逐的最小时间,默认30min.如果连接超过minIdle的数量，则关闭其他线程的时间</span><br>      <span class="hljs-comment"># 连接被destroy线程关闭条件: &gt;minIdle&amp;&amp;空闲时间&gt;1800000</span><br>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">1800000</span><br>      <span class="hljs-comment"># 单位:ms,连接保持空闲而不被驱逐的最大时间,默认7h</span><br>      <span class="hljs-comment"># 连接被destroy线程关闭条件: 空闲时间&gt;25200000.不管池子中的连接数是否&gt;minIdle，关闭所有线程的时间</span><br>      <span class="hljs-attr">maxEvictableIdleTimeMillis:</span> <span class="hljs-number">25200000</span><br>      <span class="hljs-comment"># 单位:ms,默认1min,作用有两个:</span><br>      <span class="hljs-comment"># 1.Destroy线程运行周期,见minEvictableIdleTimeMillis和maxEvictableIdleTimeMillis</span><br>      <span class="hljs-comment"># 2.testWhileIdle使用,申请连接时，若空闲时间&gt;timeBetweenEvictionRunsMillis,</span><br>      <br>      <span class="hljs-comment">#   每次检测线程是否关闭的时间会去执行validationQuery检测连接是否有效.</span><br>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 检测连接是否有效的sql</span><br>      <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">select</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>mysql关闭连接问题</p></blockquote><p>如果我们设置每30s mysql关闭连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[client]<br>default-character-<span class="hljs-attribute">set</span> = utf8mb4<br><br>[mysqld]<br>character_set_server = utf8mb4<br>collation_server = utf8mb4_bin<br>secure-file-priv= NULL<br>wait_timeout=<span class="hljs-number">30</span><br>interactive_timeout=<span class="hljs-number">30</span><br>symbolic-links=<span class="hljs-number">0</span><br><br>!includedir /etc/mysql/conf.d/                                                            <span class="hljs-number">25</span>,<span class="hljs-number">1</span>          All<br></code></pre></td></tr></table></figure><p>我们手动配置druid数据源 timeBetweenEvictionRunsMillis（每隔多少毫秒去检测一次连接是否断开）很大的值</p><p>等30s再去访问接口的时候会出现丢包的现象：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20220720204039917.png" alt="image-20220720204039917"></p><p>这是因为mysql30s已经关闭连接了，但是durid数据源没有检测出来，导致请求数据库导致丢包</p><p>所以我们在配置druid数据源的时候需要遵循：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx">1.<span class="hljs-attribute">minEvictableIdleTimeMillis</span> &lt; maxEvictableIdleTimeMillis<br><span class="hljs-number">2</span>.maxEvictableIdleTimeMillis + timeBetweenEvictionRunsMillis &lt; <span class="hljs-number">8h</span>（<span class="hljs-number">28800000</span>）<br></code></pre></td></tr></table></figure><blockquote><p>启动监控：定制sql监控规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定制sql监控规则:</span><br><span class="hljs-comment"> * https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> StatFilter <span class="hljs-title function_">statFilter</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">StatFilter</span> <span class="hljs-variable">statFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatFilter</span>();<br>  <span class="hljs-comment">// 对未参数化的sql进行合并</span><br>  statFilter.setMergeSql(<span class="hljs-literal">true</span>);<br>  <span class="hljs-comment">// 单位:毫秒,慢的阈值</span><br>  statFilter.setSlowSqlMillis(<span class="hljs-number">3000</span>);<br>  <span class="hljs-keyword">return</span> statFilter;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个仅仅是配置了监控页面，真正的核心需要配置过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定制sql监控规则:</span><br><span class="hljs-comment"> * https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> StatFilter <span class="hljs-title function_">statFilter</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">StatFilter</span> <span class="hljs-variable">statFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatFilter</span>();<br>  <span class="hljs-comment">// 对未参数化的sql进行合并</span><br>  statFilter.setMergeSql(<span class="hljs-literal">true</span>);<br>  <span class="hljs-comment">// 单位:毫秒,慢的阈值</span><br>  statFilter.setSlowSqlMillis(<span class="hljs-number">3000</span>);<br>  <span class="hljs-keyword">return</span> statFilter;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>作用：定制sql防火墙规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置参考: https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WallConfig <span class="hljs-title function_">wallConfig</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">WallConfig</span> <span class="hljs-variable">wallConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WallConfig</span>();<br>  wallConfig.setDeleteAllow(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> wallConfig;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WallFilter <span class="hljs-title function_">wallFilter</span><span class="hljs-params">(WallConfig wallConfig)</span> &#123;<br>  <span class="hljs-type">WallFilter</span> <span class="hljs-variable">wallFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WallFilter</span>();<br>  <span class="hljs-comment">// 避免DruidDataSource无法正确识别数据库的类型</span><br>  wallFilter.setDbType(DbType.mysql);<br>  wallFilter.setConfig(wallConfig);<br>  <span class="hljs-keyword">return</span> wallFilter;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>现成配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/review-manage</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">review-manage</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://36.134.190.128:33060/zhgd?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2b8&amp;useSSL=false&amp;allowMultiQueries=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">WePassW0rd@123</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-attr">allow:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">,192.168.100.176</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">30000</span><br>      <span class="hljs-attr">max-evictable-idle-time-millis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">30000</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">config:</span><br>            <span class="hljs-attr">multi-statement-allow:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">delete-allow:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">log-slow-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">merge-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">3000</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">slf4j:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 保持长连接</span><br>      <span class="hljs-attr">keep-alive:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 2次keepAlive操作的时间间隔</span><br>      <span class="hljs-attr">keep-alive-between-time-millis:</span> <span class="hljs-number">600000</span><br>      <span class="hljs-comment"># 开启web监控（web应用、url监控）</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">cn.com.scjky.*</span><br>      <br><span class="hljs-comment"># 配置mybatis-plus</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 搜索指定包别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">cn.com.scjky.entity</span><br>  <span class="hljs-comment"># 配置mapper的扫描，找到所有的mapper.xml映射文件</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*Mapper.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment">#配置返回数据库(column下划线命名&amp;&amp;返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">cache-enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#配置JdbcTypeForNull, oracle数据库必须配置</span><br>    <span class="hljs-attr">jdbc-type-for-null:</span> <span class="hljs-string">&#x27;null&#x27;</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment">#开启sql日志</span><br></code></pre></td></tr></table></figure><blockquote><p>配置详解</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">###########################Druid配置##########################</span><br><span class="hljs-comment">#####连接池属性spring.datasource.druid.xxx=</span><br><span class="hljs-comment">#启动连接池，默认开启</span><br><span class="hljs-attr">spring.datasource.druid.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#使用Druid的数据库连接信息,我不建议使用此种 + 配置类，除非你对Druid特别熟悉</span><br><span class="hljs-attr">spring.datasource.druid.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver#指定driver的类名，默认从jdbc url中自动探测</span><br><span class="hljs-attr">spring.datasource.druid.driver-class-name使用这个，不用spring.datasource.druid.driver</span><br><span class="hljs-attr">spring.datasource.druid.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/my_springboot?serverTimezone=UTC</span><br><span class="hljs-attr">spring.datasource.druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.druid.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#获取连接时最大等待时间，单位毫秒</span><br><span class="hljs-attr">spring.datasource.druid.max-wait</span>=<span class="hljs-string">10</span><br><span class="hljs-comment">##最大连接数</span><br><span class="hljs-attr">spring.datasource.druid.max-active</span>=<span class="hljs-string">10</span><br><span class="hljs-comment">##最小连接池数量</span><br><span class="hljs-attr">spring.datasource.druid.min-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#打开KeepAlive之后的效果</span><br><span class="hljs-comment">#1&gt;初始化连接池时会填充到minIdle数量。</span><br><span class="hljs-comment">#2&gt;连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。</span><br><span class="hljs-comment">#3&gt;当网络断开等原因产生的由ExceptionSorter检测出来的死连接被清除后，自动补充连接到minIdle数量。</span><br><span class="hljs-comment">#连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作</span><br><span class="hljs-comment">#2次keepAlive操作的时间间隔</span><br><span class="hljs-attr">spring.datasource.druid.keep-alive-between-time-millis</span>=<span class="hljs-string">50000</span><br><span class="hljs-comment">#开启keepAlive操作</span><br><span class="hljs-attr">spring.datasource.druid.keep-alive</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">###打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false</span><br><span class="hljs-attr">spring.datasource.druid.pool-prepared-statements</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span>=<span class="hljs-string">30</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">####检测，验证</span><br><span class="hljs-comment">##归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><br><span class="hljs-comment">####如果你的数据库经常断，必须使用此配置，否则系统需要重启（如果数据库异常有短信这类通知，建议关闭）</span><br><span class="hljs-attr">spring.datasource.druid.test-on-return</span>=<span class="hljs-string">false</span><br><span class="hljs-comment">##用来检测连接是否有效的sql 必须是一个查询语句，spring.datasource.druid.test-on-return设置true才能用</span><br><span class="hljs-comment">##mysql、oracle中为 select 1 from dual，不知道为啥mysql，网上推荐SELECT &#x27;x&#x27;</span><br><span class="hljs-attr">spring.datasource.druid.validation-query</span>=<span class="hljs-string">select 1 from dual</span><br><span class="hljs-comment">##申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br><span class="hljs-attr">spring.datasource.druid.test-while-idle</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">## 当从连接池借用连接时，是否测试该连接,建议测试false</span><br><span class="hljs-attr">spring.datasource.druid.test-on-borrow</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##既作为检测的间隔时间又作为testWhileIdel执行的依据即此值决定是否空闲，因此此值一定要设置合理</span><br><span class="hljs-comment">#即一个空闲线程，最大的生成时间。检测需要关闭的空闲连接</span><br><span class="hljs-attr">spring.datasource.druid.time-between-eviction-runs-millis</span>=<span class="hljs-string">60000</span><br><span class="hljs-comment">##销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接即一个连接在池中最小生存的时间</span><br><span class="hljs-attr">spring.datasource.druid.min-evictable-idle-time-millis</span>=<span class="hljs-string">3000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接变量。eg开启慢sql功能=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="hljs-comment">#spring.datasource.druid.connection-properties=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#合并多个DruidDataSource的监控数据</span><br><span class="hljs-comment">#spring.datasource.druid.use-global-data-source-stat=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##允许访问底层连接</span><br><span class="hljs-comment">#spring.datasource.druid.access-to-underlying-connection-allowed=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#活跃连接堆跟踪</span><br><span class="hljs-comment">#spring.datasource.druid.active-connection-stack-trace=List&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#活跃连接列表</span><br><span class="hljs-comment">#spring.datasource.druid.active-connections=Set&lt;DruidPooledConnection&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##启用异步关闭连接</span><br><span class="hljs-comment">#spring.datasource.druid.async-close-connection-enable=true</span><br><span class="hljs-comment">#开启异步初始化</span><br><span class="hljs-comment">#spring.datasource.druid.async-init=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#失败后跳过即用于失败重连，默认为false，true表示向数据库请求连接失败后,就算后端数据库恢复正常也不进行重连</span><br><span class="hljs-comment">#因此一定要配置false</span><br><span class="hljs-attr">spring.datasource.druid.break-after-acquire-failure</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#检查执行sql执行时间</span><br><span class="hljs-attr">spring.datasource.druid.check-execute-time</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启动清除过滤器</span><br><span class="hljs-attr">spring.datasource.druid.clear-filters-enable</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#连接出错尝试几次重新连接</span><br><span class="hljs-attr">spring.datasource.druid.connection-error-retry-attempts</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">####连接初始化语句即写sql语句,连接后会自动执行，用于测试比较好</span><br><span class="hljs-comment">#spring.datasource.druid.connection-init-sqls=Collection&lt;String&gt;</span><br><span class="hljs-comment">#spring.datasource.druid.connection-init-sqls=update t_schedule  set status=0</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#创建定时器的连接池，跟数据库连接有关</span><br><span class="hljs-comment">#spring.datasource.druid.create-scheduler=java.util.concurrent.ScheduledExecutorService</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定db类型,eg:h2、mysq、oracle</span><br><span class="hljs-comment">#spring.datasource.druid.db-type=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定默认值：事务是否自动提交</span><br><span class="hljs-comment">#spring.datasource.druid.default-auto-commit=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接默认的catalog.</span><br><span class="hljs-comment">#spring.datasource.druid.default-catalog=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#是否设置默认连接只读.</span><br><span class="hljs-comment">#spring.datasource.druid.default-read-only=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接的事务的默认隔离级别.</span><br><span class="hljs-comment">#-1 数据库默认隔离级别</span><br><span class="hljs-comment">#1 未提交读</span><br><span class="hljs-comment">#2 读写提交</span><br><span class="hljs-comment">#4 可重复读</span><br><span class="hljs-comment">#8 串行化</span><br><span class="hljs-comment">#spring.datasource.druid.default-transaction-isolation=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定销毁的定时连接池</span><br><span class="hljs-comment">#spring.datasource.druid.destroy-scheduler=java.util.concurrent.ScheduledExecutorService</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##启用DUP关闭日志</span><br><span class="hljs-comment">#spring.datasource.druid.dup-close-log-enable=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#当数据库抛出不可恢复的异常时,抛弃该连接</span><br><span class="hljs-comment">#spring.datasource.druid.exception-sorter=com.alibaba.druid.pool.ExceptionSorter</span><br><span class="hljs-comment">#指定ExceptionSorter类名</span><br><span class="hljs-comment">#spring.datasource.druid.exception-sorter-class-name=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#当创建连接池时,创建失败后是否立即抛异常</span><br><span class="hljs-comment">#spring.datasource.druid.fail-fast=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#DruidStatProperties的aopPatterns字段即指定AOP模式</span><br><span class="hljs-comment">#spring.datasource.druid.aop-patterns=String[]</span><br><span class="hljs-comment">#Spring监控，对内部各接口调用的监控,参考Druid Github Wiki，配置_Druid和Spring关联监控配置</span><br><span class="hljs-comment">#spring.datasource.druid.aop-patterns=com.allen.service.*,com.allen.dao.*,com.allen.controller.*,com.allen.mapper.*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">###连接池初始化</span><br><span class="hljs-comment">#开启线程初始化异常抛出异常</span><br><span class="hljs-comment">#spring.datasource.druid.init-exception-throw=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false #初始化全局变量</span><br><span class="hljs-comment">#spring.datasource.druid.init-global-variants=true</span><br><span class="hljs-comment">##初始化变量</span><br><span class="hljs-comment">#spring.datasource.druid.init-variants=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##初始化时建立物理连接的个数</span><br><span class="hljs-comment">#spring.datasource.druid.initial-size=10</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#socket连接超时时kil</span><br><span class="hljs-comment">#spring.datasource.druid.kill-when-socket-read-timeout=true</span><br><span class="hljs-comment">#记录丢失</span><br><span class="hljs-comment">#spring.datasource.druid.log-abandoned=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#记录不同的线程</span><br><span class="hljs-comment">#spring.datasource.druid.log-different-thread=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接数据库的超时时间</span><br><span class="hljs-comment">#spring.datasource.druid.login-timeout=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#最大创建任务数</span><br><span class="hljs-comment">#spring.datasource.druid.max-create-task-count=1000</span><br><span class="hljs-comment">##连接保持空闲而不被驱逐的最大时间.默认值1000L * 60L * 60L * 7,com.alibaba.druid.pool.DruidAbstractDataSource.maxEvictableIdleTimeMillis</span><br><span class="hljs-comment">#spring.datasource.druid.max-evictable-idle-time-millis=1000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#最大打开的prepared-statement数量</span><br><span class="hljs-comment">#spring.datasource.druid.max-open-prepared-statements=1000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#允许的最大线程等待数</span><br><span class="hljs-comment">#spring.datasource.druid.max-wait-thread-count=10</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接池名称</span><br><span class="hljs-comment">#spring.datasource.druid.name=String</span><br><span class="hljs-comment">#设置获取连接时的重试次数，-1为不重试</span><br><span class="hljs-comment">#spring.datasource.druid.not-full-timeout-retry-count=-1</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#????</span><br><span class="hljs-comment">#spring.datasource.druid.object-name=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#用于控制当OnFatalError发生时最大使用连接数量，用于控制异常发生时并发执行SQL的数量，减轻数据库恢复的压力。</span><br><span class="hljs-comment">#默认值 0</span><br><span class="hljs-comment">#spring.datasource.druid.on-fatal-error-max-active=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#是否是oracle数据库</span><br><span class="hljs-comment">#spring.datasource.druid.oracle=false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#用于解决数据库密码加密处理方法</span><br><span class="hljs-comment">#public class AllenDbPasswordCallback extends DruidPasswordCallback &#123;</span><br><span class="hljs-comment">#   private static final Logger LOGGER = LoggerFactory.getLogger(DbPasswordCallback.class);</span><br><span class="hljs-comment">#   @Override</span><br><span class="hljs-comment">#  public void setProperties(Properties properties) &#123;</span><br><span class="hljs-comment">#       super.setProperties(properties);</span><br><span class="hljs-comment">#       真实环境,这2个值存数据库</span><br><span class="hljs-comment">#       String password = (String) properties.get(&quot;password&quot;);</span><br><span class="hljs-comment">#       String publickey = (String) properties.get(&quot;publickey&quot;);</span><br><span class="hljs-comment">#  try &#123;</span><br><span class="hljs-comment">#      String dbpassword = ConfigTools.decrypt(publickey, password);</span><br><span class="hljs-comment">#              setPassword(dbpassword.toCharArray());</span><br><span class="hljs-comment">#      &#125; catch (Exception e) &#123;</span><br><span class="hljs-comment">#        LOGGER.error(&quot;Druid ConfigTools.decrypt&quot;, e);</span><br><span class="hljs-comment">#      &#125;</span><br><span class="hljs-comment">#   &#125;</span><br><span class="hljs-comment">#&#125;</span><br><span class="hljs-comment">#spring.datasource.druid.password-callback=javax.security.auth.callback.PasswordCallback</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#物理最大连接数</span><br><span class="hljs-comment">#spring.datasource.druid.phy-max-use-count=1000</span><br><span class="hljs-comment">#物理超时</span><br><span class="hljs-comment">#spring.datasource.druid.phy-timeout-millis=Long</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#???</span><br><span class="hljs-comment">#spring.datasource.druid.pooling-connection-info=List&lt;Map&lt;String,Object&gt;&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定代理过滤器</span><br><span class="hljs-comment">#spring.datasource.druid.proxy-filters=List&lt;Filter&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#查询超时时间</span><br><span class="hljs-comment">#spring.datasource.druid.query-timeout=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定当连接超过废弃超时时间时，是否立刻删除该连接.</span><br><span class="hljs-comment">#spring.datasource.druid.remove-abandoned=true</span><br><span class="hljs-comment">#指定连接应该被废弃的时间.</span><br><span class="hljs-comment">#spring.datasource.druid.remove-abandoned-timeout=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#废弃连接超时指定时间的连接</span><br><span class="hljs-comment">#spring.datasource.druid.remove-abandoned-timeout-millis=Long</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启用重置统计信息</span><br><span class="hljs-comment">#spring.datasource.druid.reset-stat-enable=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#共享预处理语句</span><br><span class="hljs-comment">#spring.datasource.druid.share-prepared-statements=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定2次错误连接的最大时间间隔</span><br><span class="hljs-comment">#spring.datasource.druid.time-between-connect-error-millis=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#统计日志之间的时间</span><br><span class="hljs-comment">#spring.datasource.druid.time-between-log-stats-millis=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##事务查询超时时间</span><br><span class="hljs-comment">#spring.datasource.druid.transaction-query-timeout=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 事务时间阈值</span><br><span class="hljs-comment">#spring.datasource.druid.transaction-threshold-millis=Long</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#使用本地session是stat</span><br><span class="hljs-comment">#spring.datasource.druid.use-local-session-state=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 使用oracle隐式缓存</span><br><span class="hljs-comment">#spring.datasource.druid.use-oracle-implicit-cache=true</span><br><span class="hljs-comment"># 使用非公平锁</span><br><span class="hljs-comment">#spring.datasource.druid.use-unfair-lock=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.pool.DruidAbstractDataSource.userCallback</span><br><span class="hljs-comment">#spring.datasource.druid.user-callback=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定连接的有效检查类</span><br><span class="hljs-comment">#spring.datasource.druid.valid-connection-checker=com.alibaba.druid.pool.ValidConnectionChecker</span><br><span class="hljs-comment">#spring.datasource.druid.valid-connection-checker-class-name=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</span><br><span class="hljs-comment">#spring.datasource.druid.validation-query-timeout=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">################################filters#############################################</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 配置扩展插件：配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span><br><span class="hljs-attr">spring.datasource.druid.filters</span>=<span class="hljs-string">String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#sql无法统计时，去除wall</span><br><span class="hljs-attr">spring.datasource.druid.filters</span>=<span class="hljs-string">stat,wall,log4j,config</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#允许一次执行多条语句,与spring.datasource.druid.filters的wall值有关</span><br><span class="hljs-attr">wall是com.alibaba.druid.wall.WallFilter的简称，提供sql的检查和过滤等功能</span><br><span class="hljs-comment"># 默认对混合SQL进行拦截，此处为了执行大SQL,可关闭防火墙功能。</span><br><span class="hljs-comment">#如果需要开启wall监控，同时允许multiStatementAllow,就不要在application中配置filter。</span><br><span class="hljs-attr">spring.datasource.druid.filter.wall.config.multi-statement-allow</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">####开启慢sql</span><br><span class="hljs-comment">##合并sql，默认false</span><br><span class="hljs-attr">spring.datasource.druid.filter.stat.merge-sql</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.druid.filter.stat.log-slow-sql</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">##sql的执行时间超过1500毫秒就是慢sql</span><br><span class="hljs-attr">spring.datasource.druid.filter.stat.slow-sql-millis</span>=<span class="hljs-string">1500</span><br><span class="hljs-comment">####慢sql结束</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="hljs-comment">#spring.datasource.druid.connect-properties=Map&lt;String,String&gt;</span><br><span class="hljs-comment">#eg:开启慢sql的另一种方式</span><br><span class="hljs-attr">spring.datasource.druid.connect-properties.</span>=<span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定过滤器名称</span><br><span class="hljs-comment">#spring.datasource.druid.filter-class-names=List&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启用Enable ConfigFilter</span><br><span class="hljs-comment">#spring.datasource.druid.filter.config.enabled=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启用EncodingConvertFilter</span><br><span class="hljs-comment">#spring.datasource.druid.filter.encoding.enabled=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#???</span><br><span class="hljs-comment">#spring.datasource.druid.sql-stat-map.=Map&lt;String,JdbcSqlStat&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#???</span><br><span class="hljs-comment">#spring.datasource.druid.stat-data.=Map&lt;String,Object&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#????</span><br><span class="hljs-comment">#spring.datasource.druid.stat-data-for-m-bean.=Map&lt;String,Object&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">##################################stat######################################</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启用</span><br><span class="hljs-comment">#spring.datasource.druid.filter.stat.enabled=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定stat的logger实现类</span><br><span class="hljs-comment">#spring.datasource.druid.stat-logger=com.alibaba.druid.pool.DruidDataSourceStatLogger</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定stat的数据库类型</span><br><span class="hljs-comment">#spring.datasource.druid.filter.stat.db-type=mysql</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#启动连接堆跟踪,com.alibaba.druid.filter.stat.StatFilter的connectionStackTraceEnable字段，默认false</span><br><span class="hljs-comment">#spring.datasource.druid.filter.stat.connection-stack-trace-enable=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">###############################stat-view-servlet#######################</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 白名单 ;com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties.StatViewServlet#allow</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.allow=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#黑名单</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.deny=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#开启</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.enabled=true</span><br><span class="hljs-comment">#登录密码</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.login-password=</span><br><span class="hljs-comment">#登录用户名</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.login-username=</span><br><span class="hljs-comment">#启用重置统计信息</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.reset-enable=String</span><br><span class="hljs-comment">##访问路径</span><br><span class="hljs-comment">#spring.datasource.druid.stat-view-servlet.url-pattern=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">###############################web-stat-filter#######################</span><br><span class="hljs-comment">#启用开关</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.enabled=true</span><br><span class="hljs-comment"># #排除URL  com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties.WebStatFilter</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.exclusions= *.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#身份标识 从session中获取spring.datasource.druid.web-stat-filter.principal-session-name=身份标识</span><br><span class="hljs-comment"># 从cookie中获取 例如cookie中存gk=xiaoming 设置属性为gk即可</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.principal-session-name=String</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.principal-cookie-name=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置profileEnable能够监控单个url调用的sql列表</span><br><span class="hljs-comment"># com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties.WebStatFilter.profileEnable</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.profile-enable=String true</span><br><span class="hljs-comment">#开关session统计功</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.session-stat-enable=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 默认sessionStatMaxCount是1000个，你也可以按需要进行配置</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.session-stat-max-count=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#statFilter的url模式，支持正则表达式</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.url-pattern=/*</span><br><span class="hljs-comment"># 排除一些不必要的url，比如.js,/jslib/等等</span><br><span class="hljs-comment">#spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">###############################防火墙开始filter.wall###############################</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#开启Wall功能</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.enabled=true</span><br><span class="hljs-comment">#Map&lt;String,Object&gt;</span><br><span class="hljs-comment">#spring.datasource.druid.wall-stat-map.=allen=java.lang.String;gk=allen</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#是否允许执行Alter Table语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.alter-table-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#是否允许阻塞</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.block-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#是否允许通过jdbc的call语法调用存储过程</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.call-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.wall.WallConfig.caseConditionConstAllow</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.case-condition-const-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认false 是否允许语句中存在注释，Oracle的用户不用担心，Wall能够识别hints和注释的区别</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.comment-allow=true</span><br><span class="hljs-comment">#默认true 是否允许执行commit操作</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.commit-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 默认值：false   ？?</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.complete-insert-values-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值false。检查查询条件(WHERE/HAVING子句)中是否包含AND永假条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-and-alway-false-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值false：检查查询条件(WHERE/HAVING子句)中是否包含AND永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-and-alway-true-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值false 查询条件中是否允许连续两个常量运算表达式</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-double-const-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值true，检查查询条件(WHERE/HAVING子句)中是否包含LIKE永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-like-true-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值：true。查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;|&quot;、&quot;^&quot;运算符。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-op-bitwse-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值：false 查询条件中是否允许有XOR条件。XOR不常用，很难判断永真或者永假，缺省不允许。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.condition-op-xor-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值true。拦截常量运算的条件，比如说WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.const-arithmetic-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值true，是否允许创建表</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.create-table-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值true，是否允许执行DELETE语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.delete-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认true，检查DELETE语句的WHERE子句是否是一个永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.delete-where-alway-true-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false，检查DELETE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.delete-where-none-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#???com.alibaba.druid.wall.WallConfig.denyFunctions</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.deny-functions=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.wall.WallConfig.denyObjects</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.deny-objects=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.wall.WallConfig.denySchemas</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.deny-schemas=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.wall.WallConfig.denyTables</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.deny-tables=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#com.alibaba.druid.wall.WallConfig.denyVariants</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.deny-variants=</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true 是否允许执行mysql的describe语句，缺省打开</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.describe-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#按照dbType分别配置: mysql : META-INF/druid/wall/mysql oracle : META-INF/druid/wall/oracle sqlserver : META-INF/druid/wall/sqlserver</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.dir=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false，特权允许</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.do-privileged-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true 是否允许修改表</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.drop-table-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，检测是否使用了禁用的函数</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.function-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.hint-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#？？？</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.inited=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，是否允许执行INSERT语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.insert-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值3</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.insert-values-check-size=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，是否允许SELECT FROM A INTERSECT SELECT FROM B这样的语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.intersect-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false，是否允许limit 0这样的语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.limit-zero-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，锁表允许</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.lock-table-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，是否允许执行MERGE语句，这个只在Oracle中有用</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.merge-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.metadata-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，是否允许SELECT FROM A MINUS SELECT FROM B这样的语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.minus-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false。是否必须参数化，如果为True，则不允许类似WHERE ID = 1这种不参数化的SQL</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.must-parameterized=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false。是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.none-base-statement-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，检测是否使用了“禁用对对象”</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.object-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#???</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.permit-functions=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># 允许的schemas集合</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.permit-schemas=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#允许table名集合</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.permit-tables=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#允许变量集合</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.permit-variants=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#只允许读的表</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.read-only-tables=Set&lt;String&gt;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true。是否允许表重命名</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.rename-table-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true。是否允许执行REPLACE语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.replace-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true。是否允许执行roll back操作</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.rollback-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检测是否使用了禁用的Schema</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.schema-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"># ??? true,不允许执行select * from t，但select from (select id, name from t) a。</span><br><span class="hljs-comment"># 这个选项是防御程序通过调用select 获得数据表的结构信息。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-all-column-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检测SELECT EXCEPT</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-except-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检查SELECT语句的HAVING子句是否是一个永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-having-alway-true-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检测SELECT INTERSECT</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-intersect-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,SELECT查询中是否允许INTO字句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-into-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true.SELECT … INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-into-outfile-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认值-1；配置最大返回行数，如果select语句没有指定最大返回行数，会自动修改selct添加返回限制</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-limit=Integer</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，检测SELECT MINUS</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-minus-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true，检测SELECT union</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-union-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检查SELECT语句的WHERE子句是否是一个永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.select-where-alway-true-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,是否允许执行SELECT语句</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.selelct-allow=true</span><br><span class="hljs-comment">#true.是否允许使用SET语法</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.set-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true.是否允许执行mysql的show语句，缺省打开</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.show-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true.是否允许开启事务</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.start-transaction-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true, 是否进行严格的语法检测，</span><br><span class="hljs-comment"># Druid SQL Parser在某些场景不能覆盖所有的SQL语法，出现解析SQL出错，可以临时把这个选项设置为false，同时把SQL反馈给Druid的开发者。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.strict-syntax-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,检测是否使用了禁用的表</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.table-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#??</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.tenant-column=String</span><br><span class="hljs-comment">#???</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.tenant-table-pattern=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,truncate语句是危险，缺省打开，若需要自行关闭</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.truncate-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,是否允许update语法</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.update-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定UpdateCheck处理器</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.update-check-handler=com.alibaba.druid.wall.WallUpdateCheckHandler</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true.检查UPDATE语句的WHERE子句是否是一个永真条件</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.update-where-alay-true-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#false,检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.update-where-none-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,是否允许执行mysql的use语句，缺省打开</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.use-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true.检测是否使用了“禁用的变量”</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.variant-check=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,是否允许调用Connection/Statement/ResultSet的isWrapFor和unwrap方法，</span><br><span class="hljs-comment"># 这两个方法调用，使得有办法拿到原生驱动的对象，绕过WallFilter的检测直接执行SQL。</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config.wrap-allow=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定Wall的配置类，可以继承WallConfig类，然后指定即可</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.config=com.alibaba.druid.wall.WallConfig</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#指定数据库类型,mysql</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.db-type=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#默认false,对被认为是攻击的SQL进行LOG.error输出</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.log-violation=true</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#provider 白名单 ？？？</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.provider-white-list=Set&lt;String&gt;</span><br><span class="hljs-comment">#？？？</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.tenant-column=String</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#true,对被认为是攻击的SQL抛出SQLException</span><br><span class="hljs-comment">#spring.datasource.druid.filter.wall.throw-exception=true</span><br><span class="hljs-comment">###防火墙结束</span><br><br><br></code></pre></td></tr></table></figure><h2 id="十、fastjson"><a href="#十、fastjson" class="headerlink" title="十、fastjson"></a>十、fastjson</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * SerializeFilter定制处理，要求： 输出的json字符串的key是大写的</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonSerializeFilter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    teacher.setName(<span class="hljs-string">&quot;gaozhe&quot;</span>);<br>    teacher.setId(<span class="hljs-number">1L</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * object：teacher对象</span><br><span class="hljs-comment">     * name：属性</span><br><span class="hljs-comment">     * value：name属性对应的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">NameFilter</span> <span class="hljs-variable">nameFilter</span> <span class="hljs-operator">=</span> (object, name, value) -&gt; name.toUpperCase();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(teacher, nameFilter);<br>    System.out.println(json);<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 测试fastjson的引用探测 $ref:对象中多次引用了同一个对象时，序列号就会出现$ref</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonREFTest</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Teacher&gt; teachers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    teacher.setName(<span class="hljs-string">&quot;gaozhe&quot;</span>);<br>    teacher.setId(<span class="hljs-number">1L</span>);<br>    teachers.add(teacher);<br>    teachers.add(teacher);<br>    teachers.add(teacher);<br>    <span class="hljs-comment">//[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;gaozhe&quot;,&quot;param&quot;:&#123;&#125;&#125;,&#123;&quot;$ref&quot;:&quot;$[0]&quot;&#125;,&#123;&quot;$ref&quot;:&quot;$[0]&quot;&#125;]</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(teachers);<br><br>    <span class="hljs-comment">//禁用引用探测</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json2</span> <span class="hljs-operator">=</span> JSON.toJSONString(teachers, SerializerFeature.DisableCircularReferenceDetect);<br>    System.out.println(json2);<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    teacher.setName(<span class="hljs-string">&quot;gaozhe&quot;</span>);<br>    teacher.setIntro(<span class="hljs-string">&quot;简介&quot;</span>);<br>    teacher.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    teacher.setJoinDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    teacher.setCareer(<span class="hljs-string">&quot;cameerr&quot;</span>);<br>    <span class="hljs-comment">//实体类属性为null也转化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(teacher, SerializerFeature.WRITE_MAP_NULL_FEATURES);<br>    <span class="hljs-comment">//美化json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json2</span> <span class="hljs-operator">=</span> JSON.toJSONString(teacher, SerializerFeature.PrettyFormat);<br>    System.out.println(json);<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>反序列号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonToObjectTest</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;createTime:1658328407924,updateTime:null,isDeleted:0,joinDate:1658328407924,level:0,intro:\&quot;简介\&quot;,career:\&quot;cameerr\&quot;,avatar:\&quot;\&quot;,sort:0,name:\&quot;gaozhe\&quot;,param:&#123;&#125;,id:0&#125;\n&quot;</span>;<br>   <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> JSON.parseObject(json, Teacher.class);<br><br>   System.out.println(teacher);<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>禁止字段序列化、反序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(serialize = false, deserialize = false)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h2 id="十一、权限管理"><a href="#十一、权限管理" class="headerlink" title="十一、权限管理"></a>十一、权限管理</h2><h3 id="非RBAC"><a href="#非RBAC" class="headerlink" title="非RBAC"></a>非RBAC</h3><blockquote><p>sql：t_user(增加user_type)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_type` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;4&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户类型 1-管理员 2-教师 3-学生 4-游客&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `deleted` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;bravo1988&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2021-02-13 20:01:44&#x27;</span>, <span class="hljs-string">&#x27;2021-02-15 10:29:46&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;bravo&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;2021-02-14 10:37:25&#x27;</span>, <span class="hljs-string">&#x27;2021-02-14 10:37:25&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>权限注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录权限注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LoginRequired &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 角色权限注解</span><br><span class="hljs-comment"> * 注意：由于默认权限都是针对用户而言，所以我在PermissionRequired上加了LoginRequired</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@LoginRequired</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> PermissionRequired &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 角色，默认游客权限</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    UserType[] userType() <span class="hljs-keyword">default</span> &#123;UserType.VISITOR&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 逻辑关系，比如 ADMIN&amp;&amp;TEACHER 或者 ADMIN||TEACHER</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Logical <span class="hljs-title function_">logical</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>枚举类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当前设计不支持一个用户有多个角色，所以AND暂时用不到，而OR的作用更多的是提示当前逻辑是“符合其中一个角色即可”</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Logical</span> &#123;<br>    AND,<br>    OR;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户角色枚举</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserType</span> &#123;<br>    ADMIN(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;管理员&quot;</span>),<br>    TEACHER(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;教师&quot;</span>),<br>    STUDENT(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;学生&quot;</span>),<br>    VISITOR(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;游客&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String desc;<br><br>    UserType(Integer value, String desc) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否有权限</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userTypes</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> typeOfUser</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> logical</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPermission</span><span class="hljs-params">(UserType[] userTypes, Integer typeOfUser, Logical logical)</span> &#123;<br>        Objects.requireNonNull(userTypes);<br>        Objects.requireNonNull(logical);<br><br>        <span class="hljs-comment">// 1.1 要求单个角色权限，且当前用户刚好是这个角色</span><br>        <span class="hljs-keyword">if</span> (userTypes.length == <span class="hljs-number">1</span> &amp;&amp; userTypes[<span class="hljs-number">0</span>].getValue().equals(typeOfUser)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 1.2 要求多个角色权限</span><br>        <span class="hljs-keyword">if</span> (userTypes.length &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// AND：预留，当前设计其实不支持一个用户有多个角色</span><br>            <span class="hljs-keyword">if</span> (Logical.AND.equals(logical)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// OR：只要用户拥有其中一个角色即可</span><br>            <span class="hljs-keyword">if</span> (Logical.OR.equals(logical)) &#123;<br>                <span class="hljs-keyword">for</span> (UserType type : userTypes) &#123;<br>                    <span class="hljs-keyword">if</span> (type.getValue().equals(typeOfUser)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ThreadLocalUtil</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocalUtil</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ThreadLocal的静态方法withInitial()会返回一个SuppliedThreadLocal对象</span><br><span class="hljs-comment">     * 而SuppliedThreadLocal&lt;T&gt; extends ThreadLocal&lt;T&gt;</span><br><span class="hljs-comment">     * 我们存进去的Map会作为的返回值：</span><br><span class="hljs-comment">     * protected T initialValue() &#123;</span><br><span class="hljs-comment">     *    return supplier.get();</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 所以也相当于重写了initialValue()</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Map&lt;String, Object&gt;&gt; THREAD_CONTEXT = ThreadLocal.withInitial(<br>            () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">8</span>)<br>    );<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取value</span><br><span class="hljs-comment">     * 比如key为USER_INFO，则返回&quot;&#123;&#x27;name&#x27;:&#x27;bravo&#x27;, &#x27;age&#x27;:18&#125;&quot;</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;</span><br><span class="hljs-comment">     * .........&quot;USER_INFO&quot;:&quot;&#123;&#x27;name&#x27;:&#x27;bravo&#x27;, &#x27;age&#x27;:18&#125;&quot;,</span><br><span class="hljs-comment">     * .........&quot;SCORE&quot;:&quot;&#123;&#x27;Math&#x27;:99, &#x27;English&#x27;: 97&#125;&quot;</span><br><span class="hljs-comment">     * ...&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-comment">// getContextMap()表示要先获取THREAD_CONTEXT的value，也就是Map&lt;String, Object&gt;。然后再从Map&lt;String, Object&gt;中根据key获取</span><br>        <span class="hljs-keyword">return</span> THREAD_CONTEXT.get().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * put操作，原理同上</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        THREAD_CONTEXT.get().put(key, value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清除map里的某个值</span><br><span class="hljs-comment">     * 比如把</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;</span><br><span class="hljs-comment">     * .........&quot;USER_INFO&quot;:&quot;&#123;&#x27;name&#x27;:&#x27;bravo&#x27;, &#x27;age&#x27;:18&#125;&quot;,</span><br><span class="hljs-comment">     * .........&quot;SCORE&quot;:&quot;&#123;&#x27;Math&#x27;:99, &#x27;English&#x27;: 97&#125;&quot;</span><br><span class="hljs-comment">     * ...&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * 变成</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;</span><br><span class="hljs-comment">     * .........&quot;SCORE&quot;:&quot;&#123;&#x27;Math&#x27;:99, &#x27;English&#x27;: 97&#125;&quot;</span><br><span class="hljs-comment">     * ...&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> THREAD_CONTEXT.get().remove(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清除整个Map&lt;String, Object&gt;</span><br><span class="hljs-comment">     * 比如把</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;</span><br><span class="hljs-comment">     * .........&quot;USER_INFO&quot;:&quot;&#123;&#x27;name&#x27;:&#x27;bravo&#x27;, &#x27;age&#x27;:18&#125;&quot;,</span><br><span class="hljs-comment">     * .........&quot;SCORE&quot;:&quot;&#123;&#x27;Math&#x27;:99, &#x27;English&#x27;: 97&#125;&quot;</span><br><span class="hljs-comment">     * ...&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * 变成</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        THREAD_CONTEXT.get().clear();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从ThreadLocalMap中清除当前ThreadLocal存储的内容</span><br><span class="hljs-comment">     * 比如把</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * ...THREAD_CONTEXT: &#123;</span><br><span class="hljs-comment">     * .........&quot;USER_INFO&quot;:&quot;&#123;&#x27;name&#x27;:&#x27;bravo&#x27;, &#x27;age&#x27;:18&#125;&quot;,</span><br><span class="hljs-comment">     * .........&quot;SCORE&quot;:&quot;&#123;&#x27;Math&#x27;:99, &#x27;English&#x27;: 97&#125;&quot;</span><br><span class="hljs-comment">     * ...&#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * 变成</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearAll</span><span class="hljs-params">()</span> &#123;<br>        THREAD_CONTEXT.remove();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>权限拦截器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptorAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 不拦截跨域请求相关</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equalsIgnoreCase(request.getMethod())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果方法上没有加@LoginRequired或@PermissionRequired（上面叠加了@LoginRequired），直接放行</span><br>        <span class="hljs-keyword">if</span> (isLoginFree(handler)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 登录校验</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> handleLogin(request, response);<br>        ThreadLocalUtil.put(WebConstant.USER_INFO, user);<br><br>        <span class="hljs-comment">// 权限校验</span><br>        checkPermission(user, handler);<br><br>        <span class="hljs-comment">// 放行到Controller</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 及时移除，避免ThreadLocal内存泄漏</span><br>        ThreadLocalUtil.remove(WebConstant.USER_INFO);<br>        <span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>    <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口是否免登录（支持Controller上添加<span class="hljs-doctag">@LoginRequired</span>）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLoginFree</span><span class="hljs-params">(Object handler)</span> &#123;<br><br>        <span class="hljs-comment">// 判断是否支持免登录</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br><br>            <span class="hljs-comment">// 类上是否有@LoginRequired</span><br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br>            <span class="hljs-type">LoginRequired</span> <span class="hljs-variable">ControllerLogin</span> <span class="hljs-operator">=</span> AnnotationUtils.findAnnotation(controllerClazz, LoginRequired.class);<br><br>            <span class="hljs-comment">// 方法上是否有@LoginRequired</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            <span class="hljs-type">LoginRequired</span> <span class="hljs-variable">methodLogin</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(method, LoginRequired.class);<br><br>            <span class="hljs-keyword">return</span> ControllerLogin == <span class="hljs-literal">null</span> &amp;&amp; methodLogin == <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否需要权限认证（支持Controller上添加<span class="hljs-doctag">@PermissionRequired</span>）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPermissionFree</span><span class="hljs-params">(Object handler)</span> &#123;<br>        <span class="hljs-comment">// 判断是否需要权限认证</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            <span class="hljs-type">PermissionRequired</span> <span class="hljs-variable">controllerPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(controllerClazz, PermissionRequired.class);<br>            <span class="hljs-type">PermissionRequired</span> <span class="hljs-variable">methodPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(method, PermissionRequired.class);<br>            <span class="hljs-comment">// 没有加@PermissionRequired，不需要权限认证</span><br>            <span class="hljs-keyword">return</span> controllerPermission == <span class="hljs-literal">null</span> &amp;&amp; methodPermission == <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录校验</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">handleLogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) session.getAttribute(WebConstant.CURRENT_USER_IN_SESSION);<br>        <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 抛异常，请先登录</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.NEED_LOGIN);<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentUser;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 权限校验</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPermission</span><span class="hljs-params">(User user, Object handler)</span> &#123;<br>        <span class="hljs-comment">// 如果方法上没有加@PermissionRequired，直接放行</span><br>        <span class="hljs-keyword">if</span> (isPermissionFree(handler)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br><br>            <span class="hljs-type">PermissionRequired</span> <span class="hljs-variable">controllerPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.findAnnotation(controllerClazz, PermissionRequired.class);<br>            <span class="hljs-type">PermissionRequired</span> <span class="hljs-variable">methodPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(method, PermissionRequired.class);<br>            <span class="hljs-keyword">if</span> (hasPermission(controllerPermission, user.getUserType()) &amp;&amp; hasPermission(methodPermission, user.getUserType())) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 代码走到这，说明权限不匹配</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.PERMISSION_DENY);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPermission</span><span class="hljs-params">(Annotation permissionAnnotation, Integer typeOfUser)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permissionAnnotation == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        UserType[] userTypes = (UserType[]) AnnotationUtils.getValue(permissionAnnotation, <span class="hljs-string">&quot;userType&quot;</span>);<br>        <span class="hljs-type">Logical</span> <span class="hljs-variable">logical</span> <span class="hljs-operator">=</span> (Logical) AnnotationUtils.getValue(permissionAnnotation, <span class="hljs-string">&quot;logical&quot;</span>);<br>        <span class="hljs-comment">// 我把权限判断的逻辑封装到UserType枚举类中复用</span><br>        <span class="hljs-keyword">return</span> UserType.hasPermission(userTypes, typeOfUser, logical);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>拦截器配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span><br>&#123;<br>    <span class="hljs-comment">/** 不需要拦截地址 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] excludeUrls = &#123;&#125;;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span><br>    &#123;<br>        registry.addInterceptor(loginInterceptor())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//.excludePathPatterns(excludeUrls)</span><br>                .order(-<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginInterceptor <span class="hljs-title function_">loginInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpSession session;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;User&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User userInfo)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.insert(userInfo);<br>        <span class="hljs-keyword">if</span> (rows &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.success(userInfo);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;插入失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User loginInfo)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>        lambdaQuery.eq(User::getName, loginInfo.getName());<br>        lambdaQuery.eq(User::getPassword, loginInfo.getPassword());<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(lambdaQuery);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br><br>        session.setAttribute(WebConstant.CURRENT_USER_IN_SESSION, user);<br>        <span class="hljs-keyword">return</span> Result.success(user);<br>    &#125;<br><br>    <span class="hljs-meta">@LoginRequired</span><br>    <span class="hljs-meta">@GetMapping(&quot;/needLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">needLogin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;if you see this, you are logged in.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/needNotLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">needNotLogin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;if you see this, you are logged in.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PermissionRequired(userType = &#123;UserType.ADMIN,UserType.TEACHER&#125;, logical = Logical.OR)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/needPermission&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">needPermission</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;if you see this, you has the permission.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><blockquote><p>SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_permission` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `<span class="hljs-keyword">method</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `deleted` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><blockquote><p>通用常量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConstant</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前登录的用户信息（Session）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CURRENT_USER_IN_SESSION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;current_user_in_session&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前登录的用户信息（ThreadLocal）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_info&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前用户拥有的权限</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_PERMISSIONS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_permissions&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>权限注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LoginRequired &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LoginRequired</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequiresPermission &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">// 由于要查询用户权限，五张表都来了</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RoleMapper roleMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRoleMapper userRoleMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RolePermissionMapper rolePermissionMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PermissionMapper permissionMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpSession session;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User loginInfo)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery();<br>        lambdaQuery.eq(User::getName, loginInfo.getName());<br>        lambdaQuery.eq(User::getPassword, loginInfo.getPassword());<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(lambdaQuery);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 1.Session记录登录状态</span><br>        session.setAttribute(WebConstant.CURRENT_USER_IN_SESSION, user);<br>        <span class="hljs-comment">// 2.Session缓存用户拥有的权限</span><br>        session.setAttribute(WebConstant.USER_PERMISSIONS, getUserPermissions(user.getId()));<br><br>        <span class="hljs-keyword">return</span> Result.success(user);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; <span class="hljs-title function_">getUserPermissions</span><span class="hljs-params">(Long uid)</span> &#123;<br>        <span class="hljs-comment">// 用户拥有的角色</span><br>        LambdaQueryWrapper&lt;UserRole&gt; userRoleQuery = Wrappers.lambdaQuery();<br>        userRoleQuery.eq(UserRole::getUserId, uid);<br>        List&lt;UserRole&gt; userRoles = userRoleMapper.selectList(userRoleQuery);<br>        List&lt;Long&gt; roleIds = ConvertUtil.resultToList(userRoles, UserRole::getRoleId);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(roleIds)) &#123;<br>            <span class="hljs-comment">// 没有角色，所有没有权限</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-comment">// 角色拥有的权限</span><br>        List&lt;Long&gt; permissionIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        rolePermissionMapper.selectBatchIds(roleIds);<br>        roleIds.forEach(roleId -&gt; &#123;<br>            LambdaQueryWrapper&lt;RolePermission&gt; rolePermissionQuery = Wrappers.lambdaQuery();<br>            rolePermissionQuery.eq(RolePermission::getRoleId, roleId);<br>            List&lt;RolePermission&gt; rolePermissions = rolePermissionMapper.selectList(rolePermissionQuery);<br>            permissionIds.addAll(ConvertUtil.resultToList(rolePermissions, RolePermission::getPermissionId));<br>        &#125;);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(permissionIds)) &#123;<br>            <span class="hljs-comment">// 角色都没有分配权限</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-comment">// 查询权限对应的method</span><br>        <span class="hljs-keyword">return</span> Optional.ofNullable(permissionMapper.selectBatchIds(permissionIds))<br>                .map(permissionList -&gt; permissionList.stream().map(Permission::getMethod).collect(Collectors.toSet()))<br>                .orElse(Collections.emptySet());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>拦截器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptorAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpSession session;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 不拦截跨域请求相关</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equalsIgnoreCase(request.getMethod())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果类或方法上没有加@LoginRequired或@RequiredPermission（上面叠加了@LoginRequired），直接放行</span><br>        <span class="hljs-keyword">if</span> (isLoginFree(handler)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 登录校验，session里如果没有用户信息，就抛异常给globalExceptionHandler提示“需要登录”</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> handleLogin(request, response);<br>        ThreadLocalUtil.put(WebConstant.USER_INFO, user);<br><br>        <span class="hljs-comment">// 权限校验，校验不通过就抛异常，交给全局异常处理</span><br>        checkPermission(user, handler);<br><br>        <span class="hljs-comment">// 放行到Controller</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 及时移除，避免ThreadLocal内存泄漏</span><br>        ThreadLocalUtil.remove(WebConstant.USER_INFO);<br>        <span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口是否免登录（支持Controller上添加<span class="hljs-doctag">@LoginRequired</span>）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLoginFree</span><span class="hljs-params">(Object handler)</span> &#123;<br><br>        <span class="hljs-comment">// 判断是否支持免登录</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br><br>            <span class="hljs-comment">// 类上是否有@LoginRequired</span><br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br>            <span class="hljs-type">LoginRequired</span> <span class="hljs-variable">ControllerLogin</span> <span class="hljs-operator">=</span> AnnotationUtils.findAnnotation(controllerClazz, LoginRequired.class);<br><br>            <span class="hljs-comment">// 方法上是否有@LoginRequired</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            <span class="hljs-type">LoginRequired</span> <span class="hljs-variable">methodLogin</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(method, LoginRequired.class);<br><br>            <span class="hljs-keyword">return</span> ControllerLogin == <span class="hljs-literal">null</span> &amp;&amp; methodLogin == <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录校验</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">handleLogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) session.getAttribute(WebConstant.CURRENT_USER_IN_SESSION);<br>        <span class="hljs-keyword">if</span> (currentUser == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 抛异常，请先登录</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.NEED_LOGIN);<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentUser;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 权限校验</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPermission</span><span class="hljs-params">(User user, Object handler)</span> &#123;<br>        <span class="hljs-comment">// 如果类和当前方法上都没有加@RequiresPermission，说明不需要权限校验，直接放行</span><br>        <span class="hljs-keyword">if</span> (isPermissionFree(handler)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br><br>            <span class="hljs-comment">// 代码走到这，已经很明确，当前方法需要权限才能访问，那么当前用户有没有权限呢？</span><br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            Set&lt;String&gt; userPermissionMethods = (Set&lt;String&gt;) session.getAttribute(WebConstant.USER_PERMISSIONS);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">currentRequestMethod</span> <span class="hljs-operator">=</span> controllerClazz.getName() + <span class="hljs-string">&quot;#&quot;</span> + method.getName();<br>            <span class="hljs-keyword">if</span> (userPermissionMethods.contains(currentRequestMethod)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 当前访问的方法需要权限，但是当前用户不具备该权限</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.PERMISSION_DENY);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否需要权限校验</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPermissionFree</span><span class="hljs-params">(Object handler)</span> &#123;<br>        <span class="hljs-comment">// 判断是否需要权限认证</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>            Class&lt;?&gt; controllerClazz = handlerMethod.getBeanType();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>            <span class="hljs-type">RequiresPermission</span> <span class="hljs-variable">controllerPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(controllerClazz, RequiresPermission.class);<br>            <span class="hljs-type">RequiresPermission</span> <span class="hljs-variable">methodPermission</span> <span class="hljs-operator">=</span> AnnotationUtils.getAnnotation(method, RequiresPermission.class);<br>            <span class="hljs-comment">// 没有加@RequiresPermission，不需要权限认证</span><br>            <span class="hljs-keyword">return</span> controllerPermission == <span class="hljs-literal">null</span> &amp;&amp; methodPermission == <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、统一异常处理"><a href="#十二、统一异常处理" class="headerlink" title="十二、统一异常处理"></a>十二、统一异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice(value = &quot;cn.com.scjky.controller&quot;,basePackageClasses = CustomErrorController.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResponseEntityExceptionHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GlobalExceptionHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="hljs-title function_">handleExceptionInternal</span><span class="hljs-params">(Exception ex, <span class="hljs-meta">@Nullable</span> Object body, HttpHeaders headers, HttpStatus status, WebRequest request)</span> &#123;<br>        log.error(ex.getMessage(), ex);<br>        <span class="hljs-keyword">if</span> (!(body <span class="hljs-keyword">instanceof</span> ExceptionResponse)) &#123;<br>            body = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(ex.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.handleExceptionInternal(ex, body, headers, status, request);<br><br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(&#123;ParameterException.class&#125;)</span><br>    <span class="hljs-meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br>    <span class="hljs-keyword">public</span> ExceptionResponse <span class="hljs-title function_">dealParameterException</span><span class="hljs-params">(ParameterException e)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(e.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(&#123;BusinessException.class&#125;)</span><br>    <span class="hljs-meta">@ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)</span><br>    <span class="hljs-keyword">public</span> ExceptionResponse <span class="hljs-title function_">dealParameterException</span><span class="hljs-params">(BusinessException e)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(e.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="hljs-title function_">handleMethodArgumentNotValid</span><span class="hljs-params">(MethodArgumentNotValidException e, HttpHeaders headers, HttpStatus status, WebRequest request)</span> &#123;<br>        <span class="hljs-type">FieldError</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> e.getBindingResult().getFieldError();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s:%s&quot;</span>, error.getField(), error.getDefaultMessage());<br>        log.error(message);<br>        <span class="hljs-keyword">return</span> handleExceptionInternal(e, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(error.getDefaultMessage()), headers, status, request);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="hljs-title function_">handleBindException</span><span class="hljs-params">(BindException e, HttpHeaders headers, HttpStatus status, WebRequest request)</span> &#123;<br>        <span class="hljs-type">FieldError</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> e.getFieldError();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s:%s&quot;</span>, error.getField(), error.getDefaultMessage());<br>        log.error(message);<br>        <span class="hljs-keyword">return</span> handleExceptionInternal(e, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(error.getDefaultMessage()), headers, status, request);<br>    &#125;<br><br><br>    <span class="hljs-comment">//MissingServletRequestParameterException.class,</span><br>    <span class="hljs-meta">@ExceptionHandler(&#123;</span><br><span class="hljs-meta">            IllegalArgumentException.class&#125;)</span><br>    <span class="hljs-meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br>    <span class="hljs-keyword">public</span> ExceptionResponse <span class="hljs-title function_">dealParamException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(e.getMessage());<br>    &#125;<br><br><span class="hljs-comment">//    @ExceptionHandler(&#123;HttpMessageNotReadableException.class&#125;)</span><br><span class="hljs-comment">//    @ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br><span class="hljs-comment">//    public ExceptionResponse dealParamException(HttpMessageNotReadableException e) &#123;</span><br><span class="hljs-comment">//        log.error(e.getMessage(), e);</span><br><span class="hljs-comment">//        return new ExceptionResponse(e.getMessage());</span><br><span class="hljs-comment">//    &#125;</span><br><br><br><span class="hljs-comment">//    @ExceptionHandler(&#123;NoHandlerFoundException.class&#125;)</span><br><span class="hljs-comment">//    @ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br><span class="hljs-comment">//    public ExceptionResponse dealOtherException(NoHandlerFoundException e) &#123;</span><br><span class="hljs-comment">//        log.error(e.getMessage(), e);</span><br><span class="hljs-comment">//        return new ExceptionResponse(&quot;接口不存在&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br>    <span class="hljs-keyword">public</span> ExceptionResponse <span class="hljs-title function_">dealOtherException</span><span class="hljs-params">(Exception e, HttpServletRequest request)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(e.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>    <span class="hljs-meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br>    <span class="hljs-keyword">public</span> ExceptionResponse <span class="hljs-title function_">dealOtherException</span><span class="hljs-params">(RuntimeException e, HttpServletRequest request)</span> &#123;<br>        log.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionResponse</span>(e.getMessage());<br>    &#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @ExceptionHandler(&#123;FileSizeLimitExceededException.class&#125;)</span><br><span class="hljs-comment">//    @ResponseStatus(code = HttpStatus.BAD_REQUEST)</span><br><span class="hljs-comment">//    public ExceptionResponse dealOtherException(FileSizeLimitExceededException e) &#123;</span><br><span class="hljs-comment">//        log.error(e.getMessage(), e);</span><br><span class="hljs-comment">//        return new ExceptionResponse(e.getMessage());</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十三、多数据源配置"><a href="#十三、多数据源配置" class="headerlink" title="十三、多数据源配置"></a>十三、多数据源配置</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/api/v1/</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">review-manage</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-attr">allow:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">,192.168.100.176</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">config:</span><br>            <span class="hljs-attr">multi-statement-allow:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">delete-allow:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">log-slow-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">merge-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">3000</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">slf4j:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 2次keepAlive操作的时间间隔</span><br>      <span class="hljs-attr">keep-alive-between-time-millis:</span> <span class="hljs-number">600000</span><br>        <span class="hljs-comment"># 开启web监控（web应用、url监控）</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">cn.com.scjky.*</span><br><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-attr">druid:</span><br>        <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>        <span class="hljs-comment"># 申请连接时是否执行validationQuery的语句检测连接的有效性,影响性能</span><br>        <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># 归还连接时是否执行validationQuery的语句检测连接的有效性,影响性能</span><br>        <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">30000</span><br>        <span class="hljs-attr">max-evictable-idle-time-millis:</span> <span class="hljs-number">300000</span><br>        <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">30000</span><br>        <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>        <span class="hljs-comment"># 保持长连接</span><br>        <span class="hljs-attr">keep-alive:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">break-after-acquire-failure:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://36.134.190.128:33060/zhgd?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2b8&amp;useSSL=false&amp;allowMultiQueries=true</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">WePassW0rd@123</span><br>        <span class="hljs-attr">slave:</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://114.132.160.23:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2b8&amp;useSSL=false&amp;allowMultiQueries=true</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">gaozhe741234</span><br></code></pre></td></tr></table></figure><blockquote><p>注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 主库数据源</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/08/03 9:22 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@DS(&quot;master&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Master &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/08/03 9:23 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@DS(&quot;slave&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Slave &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十四、UUID工具类"><a href="#十四、UUID工具类" class="headerlink" title="十四、UUID工具类"></a>十四、UUID工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * UUid 4种类型的生成</span><br><span class="hljs-comment"> * copy from https://github.com/eugenp/tutorials/blob/master/core-java-modules/core-java-uuid/src/main/java/com/baeldung/uuid/UUIDGenerator.java</span><br><span class="hljs-comment"> * 参考 https://www.baeldung.com/java-uuid</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-05-24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UUIDUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] hexArray = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>.toCharArray();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于时间</span><br><span class="hljs-comment">     * Type 1 UUID Generation</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">generateType1UUID</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">most64SigBits</span> <span class="hljs-operator">=</span> get64MostSignificantBitsForVersion1();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">least64SigBits</span> <span class="hljs-operator">=</span> get64LeastSignificantBitsForVersion1();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UUID</span>(most64SigBits, least64SigBits);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">get64LeastSignificantBitsForVersion1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">random63BitLong</span> <span class="hljs-operator">=</span> random.nextLong() &amp; <span class="hljs-number">0x3FFFFFFFFFFFFFFFL</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">variant3BitFlag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x8000000000000000L</span>;<br>        <span class="hljs-keyword">return</span> random63BitLong + variant3BitFlag;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">get64MostSignificantBitsForVersion1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">1582</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(start, LocalDateTime.now());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">seconds</span> <span class="hljs-operator">=</span> duration.getSeconds();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> duration.getNano();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeForUuidIn100Nanos</span> <span class="hljs-operator">=</span> seconds * <span class="hljs-number">10000000</span> + nanos * <span class="hljs-number">100</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">least12SignificatBitOfTime</span> <span class="hljs-operator">=</span> (timeForUuidIn100Nanos &amp; <span class="hljs-number">0x000000000000FFFFL</span>) &gt;&gt; <span class="hljs-number">4</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">return</span> (timeForUuidIn100Nanos &amp; <span class="hljs-number">0xFFFFFFFFFFFF0000L</span>) + version + least12SignificatBitOfTime;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Type 3 UUID Generation</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UnsupportedEncodingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">generateType3UUID</span><span class="hljs-params">(String namespace, String name)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br><br>        <span class="hljs-type">byte</span>[] nameSpaceBytes = bytesFromUUID(namespace);<br>        <span class="hljs-type">byte</span>[] nameBytes = name.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-type">byte</span>[] result = joinBytes(nameSpaceBytes, nameBytes);<br><br>        <span class="hljs-keyword">return</span> UUID.nameUUIDFromBytes(result);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Type 4 UUID Generation</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">generateType4UUID</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UUID</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID();<br>        <span class="hljs-keyword">return</span> uuid;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Type 5 UUID Generation</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UnsupportedEncodingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">generateType5UUID</span><span class="hljs-params">(String namespace, String name)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br><br>        <span class="hljs-type">byte</span>[] nameSpaceBytes = bytesFromUUID(namespace);<br>        <span class="hljs-type">byte</span>[] nameBytes = name.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-type">byte</span>[] result = joinBytes(nameSpaceBytes, nameBytes);<br><br>        <span class="hljs-keyword">return</span> type5UUIDFromBytes(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">type5UUIDFromBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] name)</span> &#123;<br>        MessageDigest md;<br>        <span class="hljs-keyword">try</span> &#123;<br>            md = MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-1&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException nsae) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>(<span class="hljs-string">&quot;SHA-1 not supported&quot;</span>, nsae);<br>        &#125;<br>        <span class="hljs-type">byte</span>[] bytes = Arrays.copyOfRange(md.digest(name), <span class="hljs-number">0</span>, <span class="hljs-number">16</span>);<br>        bytes[<span class="hljs-number">6</span>] &amp;= <span class="hljs-number">0x0f</span>; <span class="hljs-comment">/* clear version        */</span><br>        bytes[<span class="hljs-number">6</span>] |= <span class="hljs-number">0x50</span>; <span class="hljs-comment">/* set to version 5     */</span><br>        bytes[<span class="hljs-number">8</span>] &amp;= <span class="hljs-number">0x3f</span>; <span class="hljs-comment">/* clear variant        */</span><br>        bytes[<span class="hljs-number">8</span>] |= <span class="hljs-number">0x80</span>; <span class="hljs-comment">/* set to IETF variant  */</span><br>        <span class="hljs-keyword">return</span> constructType5UUID(bytes);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">constructType5UUID</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">msb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">lsb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">assert</span> data.length == <span class="hljs-number">16</span> : <span class="hljs-string">&quot;data must be 16 bytes in length&quot;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>            msb = (msb &lt;&lt; <span class="hljs-number">8</span>) | (data[i] &amp; <span class="hljs-number">0xff</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>            lsb = (lsb &lt;&lt; <span class="hljs-number">8</span>) | (data[i] &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UUID</span>(msb, lsb);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Unique Keys Generation Using Message Digest and Type 4 UUID</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NoSuchAlgorithmException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UnsupportedEncodingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateUniqueKeysWithUUIDAndMessageDigest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-256&quot;</span>);<br>        salt.update(UUID.randomUUID()<br>                .toString()<br>                .getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">digest</span> <span class="hljs-operator">=</span> bytesToHex(salt.digest());<br>        <span class="hljs-keyword">return</span> digest;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-type">char</span>[] hexChars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[bytes.length * <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bytes.length; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> bytes[j] &amp; <span class="hljs-number">0xFF</span>;<br>            hexChars[j * <span class="hljs-number">2</span>] = hexArray[v &gt;&gt;&gt; <span class="hljs-number">4</span>];<br>            hexChars[j * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = hexArray[v &amp; <span class="hljs-number">0x0F</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(hexChars);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] bytesFromUUID(String uuidHexString) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">normalizedUUIDHexString</span> <span class="hljs-operator">=</span> uuidHexString.replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">assert</span> normalizedUUIDHexString.length() == <span class="hljs-number">32</span>;<br><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> hexToByte(normalizedUUIDHexString.substring(i * <span class="hljs-number">2</span>, i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>));<br>            bytes[i] = b;<br>        &#125;<br>        <span class="hljs-keyword">return</span> bytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span> <span class="hljs-title function_">hexToByte</span><span class="hljs-params">(String hexString)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">firstDigit</span> <span class="hljs-operator">=</span> Character.digit(hexString.charAt(<span class="hljs-number">0</span>), <span class="hljs-number">16</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">secondDigit</span> <span class="hljs-operator">=</span> Character.digit(hexString.charAt(<span class="hljs-number">1</span>), <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>) ((firstDigit &lt;&lt; <span class="hljs-number">4</span>) + secondDigit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] joinBytes(<span class="hljs-type">byte</span>[] byteArray1, <span class="hljs-type">byte</span>[] byteArray2) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalLength</span> <span class="hljs-operator">=</span> byteArray1.length + byteArray2.length;<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[finalLength];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; byteArray1.length; i++) &#123;<br>            result[i] = byteArray1[i];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; byteArray2.length; i++) &#123;<br>            result[byteArray1.length + i] = byteArray2[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">generateType5UUID</span><span class="hljs-params">(String name)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">byte</span>[] bytes = name.getBytes(StandardCharsets.UTF_8);<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-1&quot;</span>);<br><br>            <span class="hljs-type">byte</span>[] hash = md.digest(bytes);<br><br>            <span class="hljs-type">long</span> <span class="hljs-variable">msb</span> <span class="hljs-operator">=</span> getLeastAndMostSignificantBitsVersion5(hash, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lsb</span> <span class="hljs-operator">=</span> getLeastAndMostSignificantBitsVersion5(hash, <span class="hljs-number">8</span>);<br>            <span class="hljs-comment">// Set the version field</span><br>            msb &amp;= ~(<span class="hljs-number">0xfL</span> &lt;&lt; <span class="hljs-number">12</span>);<br>            msb |= ((<span class="hljs-type">long</span>) <span class="hljs-number">5</span>) &lt;&lt; <span class="hljs-number">12</span>;<br>            <span class="hljs-comment">// Set the variant field to 2</span><br>            lsb &amp;= ~(<span class="hljs-number">0x3L</span> &lt;&lt; <span class="hljs-number">62</span>);<br>            lsb |= <span class="hljs-number">2L</span> &lt;&lt; <span class="hljs-number">62</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UUID</span>(msb, lsb);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getLeastAndMostSignificantBitsVersion5</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] src, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> offset)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> offset + <span class="hljs-number">7</span>; i &gt;= offset; i -= <span class="hljs-number">1</span>) &#123;<br>            ans &lt;&lt;= <span class="hljs-number">8</span>;<br>            ans |= src[i] &amp; <span class="hljs-number">0xffL</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十五、返回前端时间格式"><a href="#十五、返回前端时间格式" class="headerlink" title="十五、返回前端时间格式"></a>十五、返回前端时间格式</h2><blockquote><p>全局返回json时间格式处理</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">jackson:</span><br>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy/MM/dd</span> <span class="hljs-string">HH:mm:ss</span><br>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><br></code></pre></td></tr></table></figure><blockquote><p>注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><br><br><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-keyword">private</span> Date approvalDate;<br></code></pre></td></tr></table></figure><h2 id="十六、MinIO文件上传"><a href="#十六、MinIO文件上传" class="headerlink" title="十六、MinIO文件上传"></a>十六、MinIO文件上传</h2><p>设置文件上传最大大小:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">uri-encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-attr">max-swallow-size:</span> <span class="hljs-number">-1</span>  <span class="hljs-comment"># tomcat默认大小2M，超过2M的文件不会被捕获，需要调整此处大小为100MB或者-1即可</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">1302MB</span>      <span class="hljs-comment"># 文件上传大小限制，设置最大值，不能超过该值，否则报错</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">1302MB</span>     <span class="hljs-comment"># 文件最大请求限制，用于批量上传</span><br></code></pre></td></tr></table></figure><blockquote><p>docker安装Minio</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> --name minio \<br> -e <span class="hljs-string">&quot;MINIO_ROOT_USER=admin&quot;</span> \<br> -e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=12345678&quot;</span> \<br> -v /mnt/data:/data \<br> -v /mnt/config:/root/.minio \<br> minio/minio server --console-address <span class="hljs-string">&quot;:50000&quot;</span> /data<br></code></pre></td></tr></table></figure><p>50000暴露console端口，9000暴露Api端口</p><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>MinIOConfig配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.gz.demoproject.utils.MinIOUtils;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOConfig</span> &#123;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String endpoint;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.fileHost&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String fileHost;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String bucketName;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String accessKey;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String secretKey;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.imgSize&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> Integer imgSize;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.fileSize&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> Integer fileSize;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 每次容器启动时创建MinIO客户端</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">creatMinioClient</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!endpoint.startsWith(<span class="hljs-string">&quot;http&quot;</span>)) &#123;<br>      endpoint = <span class="hljs-string">&quot;http://&quot;</span> + endpoint;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!endpoint.endsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      endpoint = endpoint.concat(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>    MinIOUtils.setAccessKey(accessKey);<br>    MinIOUtils.setBucketName(bucketName);<br>    MinIOUtils.setEndpoint(endpoint);<br>    MinIOUtils.setSecretKey(secretKey);<br>    MinIOUtils.setFileSize(fileSize);<br>    MinIOUtils.setImgSize(imgSize);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>yaml配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># MinIO 配置</span><br><span class="hljs-attr">minio:</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-string">http://114.132.160.23:9000/</span>      <span class="hljs-comment"># MinIO服务api地址</span><br>  <span class="hljs-attr">fileHost:</span> <span class="hljs-string">http://114.132.160.23:9000/</span>      <span class="hljs-comment"># 文件地址host</span><br>  <span class="hljs-attr">bucketName:</span> <span class="hljs-string">gz-bucket</span>                      <span class="hljs-comment"># 存储桶bucket名称</span><br>  <span class="hljs-attr">accessKey:</span> <span class="hljs-string">admin</span>                           <span class="hljs-comment"># 用户名</span><br>  <span class="hljs-attr">secretKey:</span> <span class="hljs-number">12345678</span>                        <span class="hljs-comment"># 密码</span><br>  <span class="hljs-attr">imgSize:</span> <span class="hljs-number">1024</span>                              <span class="hljs-comment"># 图片大小限制，单位：m</span><br>  <span class="hljs-attr">fileSize:</span> <span class="hljs-number">1024</span>                             <span class="hljs-comment"># 文件大小限制，单位：m</span><br></code></pre></td></tr></table></figure><blockquote><p>minio工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.minio.BucketExistsArgs;<br><span class="hljs-keyword">import</span> io.minio.CopyObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.CopySource;<br><span class="hljs-keyword">import</span> io.minio.GetBucketPolicyArgs;<br><span class="hljs-keyword">import</span> io.minio.GetObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.GetPresignedObjectUrlArgs;<br><span class="hljs-keyword">import</span> io.minio.ListObjectsArgs;<br><span class="hljs-keyword">import</span> io.minio.MakeBucketArgs;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.ObjectStat;<br><span class="hljs-keyword">import</span> io.minio.ObjectWriteResponse;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.RemoveBucketArgs;<br><span class="hljs-keyword">import</span> io.minio.RemoveObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.Result;<br><span class="hljs-keyword">import</span> io.minio.StatObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.UploadObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.http.Method;<br><span class="hljs-keyword">import</span> io.minio.messages.Bucket;<br><span class="hljs-keyword">import</span> io.minio.messages.DeleteObject;<br><span class="hljs-keyword">import</span> io.minio.messages.Item;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MinIO工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOUtils</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * minio客户端</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MinioClient minioClient;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String endpoint;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String bucketName;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String accessKey;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String secretKey;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer imgSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer fileSize;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMinioClient</span><span class="hljs-params">(MinioClient minioClient)</span> &#123;<br>    MinIOUtils.minioClient = minioClient;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEndpoint</span><span class="hljs-params">(String endpoint)</span> &#123;<br>    MinIOUtils.endpoint = endpoint;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBucketName</span><span class="hljs-params">(String bucketName)</span> &#123;<br>    MinIOUtils.bucketName = bucketName;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccessKey</span><span class="hljs-params">(String accessKey)</span> &#123;<br>    MinIOUtils.accessKey = accessKey;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecretKey</span><span class="hljs-params">(String secretKey)</span> &#123;<br>    MinIOUtils.secretKey = secretKey;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImgSize</span><span class="hljs-params">(Integer imgSize)</span> &#123;<br>    MinIOUtils.imgSize = imgSize;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFileSize</span><span class="hljs-params">(Integer fileSize)</span> &#123;<br>    MinIOUtils.fileSize = fileSize;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SEPARATOR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinIOUtils</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinIOUtils</span><span class="hljs-params">(String endpoint, String bucketName, String accessKey, String secretKey,</span><br><span class="hljs-params">      Integer imgSize, Integer fileSize)</span> &#123;<br>    MinIOUtils.endpoint = endpoint;<br>    MinIOUtils.bucketName = bucketName;<br>    MinIOUtils.accessKey = accessKey;<br>    MinIOUtils.secretKey = secretKey;<br>    MinIOUtils.imgSize = imgSize;<br>    MinIOUtils.fileSize = fileSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建基于Java端的MinioClient</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMinioClient</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == minioClient) &#123;<br>        log.info(<span class="hljs-string">&quot;开始创建 MinioClient...&quot;</span>);<br>        minioClient = MinioClient<br>            .builder()<br>            .endpoint(endpoint)<br>            .credentials(accessKey, secretKey)<br>            .build();<br><br>        <span class="hljs-comment">//如果不存在bucket则创建</span><br>        createBucket(bucketName);<br>        log.info(<span class="hljs-string">&quot;创建完毕 MinioClient...&quot;</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(<span class="hljs-string">&quot;MinIO服务器异常：&#123;&#125;&quot;</span>, e.getMessage());<br>    &#125;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件流</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 二进制流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">getObjectInputStream</span><span class="hljs-params">(String bucketName, String objectName)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    initMinioClient();<br>    <span class="hljs-keyword">return</span> minioClient<br>        .getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build());<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 下载文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName 文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response 响应流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downLoad</span><span class="hljs-params">(String fileName, HttpServletResponse response)</span> &#123;<br>    initMinioClient();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">ObjectStat</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> minioClient<br>          .statObject(StatObjectArgs.builder().bucket(bucketName).object(fileName).build());<br>      response.setContentType(stat.contentType());<br>      response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>          <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>      in = minioClient<br>          .getObject(GetObjectArgs.builder().bucket(bucketName).object(fileName).build());<br>      IOUtils.copy(in, response.getOutputStream());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(<span class="hljs-string">&quot;文件下载失败:&#123;&#125;&quot;</span>, e.getMessage());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          in.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>          log.error(e.getMessage());<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 断点下载</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> offset     起始字节的位置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> length     要读取的长度</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 二进制流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">downLoadFileSlice</span><span class="hljs-params">(String bucketName, String objectName, <span class="hljs-type">long</span> offset,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> length)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.getObject(<br>        GetObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .offset(offset)<br>            .length(length)<br>            .build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file 文件上传</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 上传文件url</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">file_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      initMinioClient();<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>      <span class="hljs-comment">// 获取文件名</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">orgName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(orgName)) &#123;<br>        orgName = file.getName();<br>      &#125;<br>      orgName = getFileName(orgName);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> (!orgName.contains(<span class="hljs-string">&quot;.&quot;</span>)<br>          ? orgName + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis()<br>          : orgName.substring(<span class="hljs-number">0</span>, orgName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)) + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis()<br>              + orgName.substring(orgName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>))<br>      );<br><br>      <span class="hljs-comment">// 使用putObject上传一个本地文件到存储桶中。</span><br>      <span class="hljs-keyword">if</span> (objectName.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>        objectName = objectName.substring(<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">objectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder().object(objectName)<br>          .bucket(bucketName)<br>          .contentType(file.getContentType())<br>          .stream(stream, stream.available(), -<span class="hljs-number">1</span>).build();<br>      minioClient.putObject(objectArgs);<br>      stream.close();<br>      file_url = getBasisUrl() + objectName;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(e.getMessage(), e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> file_url;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传本地文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 对象名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName   本地文件路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjectWriteResponse <span class="hljs-title function_">uploadLocalFile</span><span class="hljs-params">(String objectName, String fileName)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.uploadObject(<br>        UploadObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .filename(fileName)<br>            .build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过流上传文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName  文件对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> inputStream 文件流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件url</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(String objectName, InputStream inputStream)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    minioClient.putObject(<br>        PutObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .stream(inputStream, inputStream.available(), -<span class="hljs-number">1</span>)<br>            .build());<br>    <span class="hljs-keyword">return</span> getBasisUrl() + objectName;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建文件夹或目录</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 目录路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjectWriteResponse <span class="hljs-title function_">createDir</span><span class="hljs-params">(String bucketName, String objectName)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.putObject(<br>        PutObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .stream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;&#125;), <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>            .build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件信息, 如果抛出异常则说明文件不存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件名称</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileStatusInfo</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.statObject(<br>        StatObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .build()).toString();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 拷贝文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName    存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName    文件名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> srcBucketName 目标存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> srcObjectName 目标文件名</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjectWriteResponse <span class="hljs-title function_">copyFile</span><span class="hljs-params">(String bucketName, String objectName,</span><br><span class="hljs-params">      String srcBucketName, String srcObjectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.copyObject(<br>        CopyObjectArgs.builder()<br>            .source(CopySource.builder().bucket(bucketName).object(objectName).build())<br>            .bucket(srcBucketName)<br>            .object(srcObjectName)<br>            .build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件名称</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFile</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    minioClient.removeObject(<br>        RemoveObjectArgs.builder()<br>            .bucket(bucketName)<br>            .object(objectName)<br>            .build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 批量删除文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> keys       需要删除的文件列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFiles</span><span class="hljs-params">(String bucketName, List&lt;String&gt; keys)</span> &#123;<br>    List&lt;DeleteObject&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    keys.forEach(s -&gt; &#123;<br>      objects.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteObject</span>(s));<br>      <span class="hljs-keyword">try</span> &#123;<br>        removeFile(bucketName, s);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.error(<span class="hljs-string">&quot;批量删除失败！error:&#123;&#125;&quot;</span>, e.getMessage());<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取上传文件前缀路径</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 上传文件前缀路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getBasisUrl</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (endpoint.endsWith(SEPARATOR)) &#123;<br>      <span class="hljs-keyword">return</span> endpoint + bucketName + SEPARATOR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> endpoint + SEPARATOR + bucketName + SEPARATOR;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取路径下文件列表</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> prefix     文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> recursive  是否递归查找，false：模拟文件夹结构查找</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 二进制流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Iterable&lt;Result&lt;Item&gt;&gt; <span class="hljs-title function_">listObjects</span><span class="hljs-params">(String bucketName, String prefix,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> recursive)</span> &#123;<br>    <span class="hljs-keyword">return</span> minioClient.listObjects(<br>        ListObjectsArgs.builder()<br>            .bucket(bucketName)<br>            .prefix(prefix)<br>            .recursive(recursive)<br>            .build());<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建minioClient时初始化Bucket，如果没有Bucket则创建</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (!bucketExists(bucketName)) &#123;<br>      log.info(<span class="hljs-string">&quot;bucketName: &#123;&#125;不存在，开始创建...&quot;</span>, bucketName);<br>      minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断Bucket是否存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true：存在，false：不存在</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bucketExists</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获得Bucket的策略</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Bucket的策略</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getBucketPolicy</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient<br>        .getBucketPolicy(<br>            GetBucketPolicyArgs<br>                .builder()<br>                .bucket(bucketName)<br>                .build()<br>        );<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获得所有Bucket列表</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 所有Bucket列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Bucket&gt; <span class="hljs-title function_">getAllBuckets</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> minioClient.listBuckets();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据bucketName获取其相关信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 存储桶相关信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Optional&lt;Bucket&gt; <span class="hljs-title function_">getBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> getAllBuckets().stream().filter(b -&gt; b.name().equals(bucketName)).findFirst();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据bucketName删除Bucket</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    minioClient.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断存储桶下的文件是否存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName   文件名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true：存在，false：不存在</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isObjectExist</span><span class="hljs-params">(String bucketName, String fileName)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      minioClient<br>          .statObject(StatObjectArgs.builder().bucket(bucketName).object(fileName).build());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      exist = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> exist;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断存储桶下的文件夹是否存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件夹名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true：存在，false：不存在</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFolderExist</span><span class="hljs-params">(String bucketName, String objectName)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(<br>          ListObjectsArgs.builder().bucket(bucketName).prefix(objectName).recursive(<span class="hljs-literal">false</span>).build());<br>      <span class="hljs-keyword">for</span> (Result&lt;Item&gt; result : results) &#123;<br>        <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> result.get();<br>        <span class="hljs-keyword">if</span> (item.isDir() &amp;&amp; objectName.equals(item.objectName())) &#123;<br>          exist = <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      exist = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> exist;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据文件前缀查询文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> prefix     前缀</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> recursive  是否使用递归查询</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> MinioItem 列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Item&gt; <span class="hljs-title function_">getAllObjectsByPrefix</span><span class="hljs-params">(String bucketName,</span><br><span class="hljs-params">      String prefix,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> recursive)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;Item&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Iterable&lt;Result&lt;Item&gt;&gt; objectsIterator = minioClient.listObjects(<br>        ListObjectsArgs.builder().bucket(bucketName).prefix(prefix).recursive(recursive).build());<br>    <span class="hljs-keyword">if</span> (objectsIterator != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Result&lt;Item&gt; o : objectsIterator) &#123;<br>        <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> o.get();<br>        list.add(item);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件外链</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储桶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName 文件名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> expires    过期时间 &lt;=7 秒 （外链有效时间（单位：秒））</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> url</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPresignedObjectUrl</span><span class="hljs-params">(String bucketName, String objectName, Integer expires)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">GetPresignedObjectUrlArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> GetPresignedObjectUrlArgs.builder().expiry(expires)<br>        .bucket(bucketName).object(objectName).build();<br>    <span class="hljs-keyword">return</span> minioClient.getPresignedObjectUrl(args);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获得文件外链</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> url</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPresignedObjectUrl</span><span class="hljs-params">(String bucketName, String objectName)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">GetPresignedObjectUrlArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> GetPresignedObjectUrlArgs.builder()<br>        .bucket(bucketName)<br>        .object(objectName)<br>        .method(Method.GET).build();<br>    <span class="hljs-keyword">return</span> minioClient.getPresignedObjectUrl(args);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将URLDecoder编码转成UTF8</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> UnsupportedEncodingException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUtf8ByURLDecoder</span><span class="hljs-params">(String str)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;%(?![0-9a-fA-F]&#123;2&#125;)&quot;</span>, <span class="hljs-string">&quot;%25&quot;</span>);<br>    <span class="hljs-keyword">return</span> URLDecoder.decode(url, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断文件名是否带盘符，重新处理</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName 文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 处理后的文件名称</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileName</span><span class="hljs-params">(String fileName)</span> &#123;<br>    <span class="hljs-comment">//判断是否带有盘符信息</span><br>    <span class="hljs-comment">// Check for Unix-style path</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">unixSep</span> <span class="hljs-operator">=</span> fileName.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-comment">// Check for Windows-style path</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">winSep</span> <span class="hljs-operator">=</span> fileName.lastIndexOf(<span class="hljs-string">&#x27;\\&#x27;</span>);<br>    <span class="hljs-comment">// Cut off at latest possible point</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> (Math.max(winSep, unixSep));<br>    <span class="hljs-keyword">if</span> (pos != -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// Any sort of path separator found...</span><br>      fileName = fileName.substring(pos + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//替换上传文件名字的特殊字符</span><br>    fileName = fileName.replace(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        .replace(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;”&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//替换上传文件名字中的空格</span><br>    fileName = fileName.replaceAll(<span class="hljs-string">&quot;\\s&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> fileName;<br>  &#125;<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><blockquote><p>测试Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;上传文件&quot;)</span><br>  <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart</span> MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> MinIOUtils.uploadFile(file);<br>  &#125;<br><br>  <span class="hljs-meta">@ApiOperation(value = &quot;下载文件&quot;)</span><br>  <span class="hljs-meta">@GetMapping(&quot;downLoad/&#123;fileName&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(HttpServletResponse response, <span class="hljs-meta">@PathVariable(&quot;fileName&quot;)</span> String fileName)</span> &#123;<br>    MinIOUtils.downLoad(fileName, response);<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>断点续传</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230205212522889-5603525.png" alt="image-20230205212522889"></p><ol><li>前端上传文件前请求媒资接口层检查文件是否存在,如果已经存在则不再上传</li><li>如果文件在系统不存在则前端开始上传,首先对视频文件进行分块</li><li>前端分块进行上传,上传前首先检查分块是否上传,如已上传则不再上传,如果未上传则开始上传分块</li><li>前端请求媒资管理接口层请求上传分块</li><li>接口层请求服务层上传分块</li><li>服务端将分块信息上传到MinIO</li><li>前端将分块上传完毕请求接口层合并分块</li><li>接口层请求服务层合并分块</li><li>服务层根据文件信息找到MinIO中的分块文件,下载到本地临时目录,将所有分块下载完毕后开始合并</li><li>合并完成后将合并后的文件上传到MinIO</li></ol><blockquote><p>java实现</p></blockquote><p>为了更好理解分块上传的原理,下面用java实现下:</p><p>文件分块的流程如下：</p><p>1、获取源文件长度</p><p>2、根据设定的分块文件的大小计算出块数</p><p>3、从源文件读数据依次向每一个块文件写数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testChunk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">sourceFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/myfile/1.png&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/Users/gaozhe/Desktop/chunk/&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">chunkFolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(chunkPath);<br>    <span class="hljs-keyword">if</span> (!chunkFolder.exists()) &#123;<br>      chunkFolder.mkdirs();<br>    &#125;<br>    <span class="hljs-comment">//分块大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">chunkSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//分块数量</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">chunkNum</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) Math.ceil(sourceFile.length() * <span class="hljs-number">1.0</span> / chunkSize);<br>    System.out.println(<span class="hljs-string">&quot;分块总数：&quot;</span> + chunkNum);<br>    <span class="hljs-comment">//缓冲区大小</span><br>    <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-comment">//使用RandomAccessFile访问文件</span><br>    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_read</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sourceFile, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-comment">//分块</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chunkNum; i++) &#123;<br>      <span class="hljs-comment">//创建分块文件</span><br>      <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(chunkPath + i);<br>      <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        file.delete();<br>      &#125;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> file.createNewFile();<br>      <span class="hljs-keyword">if</span> (newFile) &#123;<br>        <span class="hljs-comment">//向分块文件中写数据</span><br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_write</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;rw&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((len = raf_read.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>          raf_write.write(b, <span class="hljs-number">0</span>, len);<br>          <span class="hljs-keyword">if</span> (file.length() &gt;= chunkSize) &#123;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>        raf_write.close();<br>        System.out.println(<span class="hljs-string">&quot;完成分块&quot;</span> + i);<br>      &#125;<br><br>    &#125;<br>    raf_read.close();<br>  &#125;<br></code></pre></td></tr></table></figure><p>文件合并流程：</p><p>1、找到要合并的文件并按文件合并的先后进行排序。</p><p>2、创建合并文件</p><p>3、依次从合并的文件中读取数据向合并文件写入数</p><p>文件合并的测试代码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMerge</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//块文件目录</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">chunkFolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/chunk/&quot;</span>);<br>    <span class="hljs-comment">//原始文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">originalFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/myfile/1.png&quot;</span>);<br>    <span class="hljs-comment">//合并文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">mergeFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/1.png&quot;</span>);<br>    <span class="hljs-keyword">if</span> (mergeFile.exists()) &#123;<br>      mergeFile.delete();<br>    &#125;<br>    <span class="hljs-comment">//创建新的合并文件</span><br>    mergeFile.createNewFile();<br>    <span class="hljs-comment">//用于写文件</span><br>    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_write</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(mergeFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>    <span class="hljs-comment">//指针指向文件顶端</span><br>    raf_write.seek(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//缓冲区</span><br>    <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-comment">//分块列表</span><br>    File[] fileArray = chunkFolder.listFiles();<br>    <span class="hljs-comment">// 转成集合，便于排序</span><br>    List&lt;File&gt; fileList = Arrays.asList(fileArray);<br>    <span class="hljs-comment">// 从小到大排序</span><br>    fileList.sort(Comparator.comparingInt(o -&gt; Integer.parseInt(o.getName())));<br>    <span class="hljs-comment">//合并文件</span><br>    <span class="hljs-keyword">for</span> (File chunkFile : fileList) &#123;<br>      <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_read</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(chunkFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> ((len = raf_read.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>        raf_write.write(b, <span class="hljs-number">0</span>, len);<br><br>      &#125;<br>      raf_read.close();<br>    &#125;<br>    raf_write.close();<br><br>    <span class="hljs-comment">//校验文件</span><br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(originalFile);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">mergeFileStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(mergeFile);<br>    ) &#123;<br>      <span class="hljs-comment">//取出原始文件的md5</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">originalMd5</span> <span class="hljs-operator">=</span> DigestUtils.md5Hex(fileInputStream);<br>      <span class="hljs-comment">//取出合并文件的md5进行比较</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">mergeFileMd5</span> <span class="hljs-operator">=</span> DigestUtils.md5Hex(mergeFileStream);<br>      <span class="hljs-keyword">if</span> (originalMd5.equals(mergeFileMd5)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;合并文件成功&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;合并文件失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;大文件上传接口&quot;, tags = &quot;大文件上传接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigFilesController</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  MediaFilesService mediaFileService;<br><br><br>  <span class="hljs-meta">@ApiOperation(value = &quot;文件上传前检查文件&quot;)</span><br>  <span class="hljs-meta">@PostMapping(&quot;/upload/checkfile&quot;)</span><br>  <span class="hljs-keyword">public</span> RestResponse&lt;Boolean&gt; <span class="hljs-title function_">checkfile</span><span class="hljs-params">(</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5</span><br><span class="hljs-params">  )</span> &#123;<br>    <span class="hljs-keyword">return</span> mediaFileService.checkFile(fileMd5);<br>  &#125;<br><br><br>  <span class="hljs-meta">@ApiOperation(value = &quot;分块文件上传前的检测&quot;)</span><br>  <span class="hljs-meta">@PostMapping(&quot;/upload/checkchunk&quot;)</span><br>  <span class="hljs-keyword">public</span> RestResponse&lt;Boolean&gt; <span class="hljs-title function_">checkchunk</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5,</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;chunk&quot;)</span> <span class="hljs-type">int</span> chunk)</span> &#123;<br>    <span class="hljs-keyword">return</span> mediaFileService.checkChunk(fileMd5, chunk);<br>  &#125;<br><br>  <span class="hljs-meta">@ApiOperation(value = &quot;上传分块文件&quot;)</span><br>  <span class="hljs-meta">@PostMapping(&quot;/upload/uploadchunk&quot;)</span><br>  <span class="hljs-keyword">public</span> RestResponse <span class="hljs-title function_">uploadchunk</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5,</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;chunk&quot;)</span> <span class="hljs-type">int</span> chunk)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> mediaFileService.uploadChunk(fileMd5, chunk, file.getBytes());<br>  &#125;<br><br>  <span class="hljs-meta">@ApiOperation(value = &quot;合并文件&quot;)</span><br>  <span class="hljs-meta">@PostMapping(&quot;/upload/mergechunks&quot;)</span><br>  <span class="hljs-keyword">public</span> RestResponse <span class="hljs-title function_">mergechunks</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5,</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;fileName&quot;)</span> String fileName,</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestParam(&quot;chunkTotal&quot;)</span> <span class="hljs-type">int</span> chunkTotal)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">companyId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1232141425L</span>;<br>    <span class="hljs-type">UploadFileParamsDto</span> <span class="hljs-variable">uploadFileParamsDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadFileParamsDto</span>();<br>    uploadFileParamsDto.setFileType(<span class="hljs-string">&quot;001002&quot;</span>);<br>    uploadFileParamsDto.setTags(<span class="hljs-string">&quot;课程视频&quot;</span>);<br>    uploadFileParamsDto.setRemark(<span class="hljs-string">&quot;&quot;</span>);<br>    uploadFileParamsDto.setFilename(fileName);<br><br>    <span class="hljs-keyword">return</span> mediaFileService.mergechunks(companyId, fileMd5, chunkTotal, uploadFileParamsDto);<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.gz.study.base.exception.XueChengPlusException;<br><span class="hljs-keyword">import</span> com.gz.study.base.model.RestResponse;<br><span class="hljs-keyword">import</span> com.gz.study.media.config.MinIOUtils;<br><span class="hljs-keyword">import</span> com.gz.study.media.mapper.MediaFilesMapper;<br><span class="hljs-keyword">import</span> com.gz.study.media.model.dto.UploadFileParamsDto;<br><span class="hljs-keyword">import</span> com.gz.study.media.model.dto.UploadFileResultDto;<br><span class="hljs-keyword">import</span> com.gz.study.media.model.po.MediaFiles;<br><span class="hljs-keyword">import</span> com.gz.study.media.service.MediaFilesService;<br><span class="hljs-keyword">import</span> com.j256.simplemagic.ContentInfo;<br><span class="hljs-keyword">import</span> com.j256.simplemagic.ContentInfoUtil;<br><span class="hljs-keyword">import</span> io.minio.GetObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.UploadObjectArgs;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 媒资信息 服务实现类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gzzear</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MediaFilesServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;MediaFilesMapper, MediaFiles&gt; <span class="hljs-keyword">implements</span><br>    <span class="hljs-title class_">MediaFilesService</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> MediaFilesMapper mediaFilesMapper;<br><br>  <span class="hljs-comment">//普通文件桶</span><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.bucket.files&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String bucket_Files;<br><br>  <span class="hljs-comment">//普通文件桶</span><br>  <span class="hljs-meta">@Value(&quot;$&#123;minio.bucket.videofiles&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String bucket_videoFiles;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UploadFileResultDto <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(Long companyId, UploadFileParamsDto uploadFileParamsDto,</span><br><span class="hljs-params">      <span class="hljs-type">byte</span>[] bytes, String folder, String objectName)</span> &#123;<br>    <span class="hljs-comment">//生成文件id，文件的md5值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileId</span> <span class="hljs-operator">=</span> DigestUtils.md5Hex(bytes);<br>    <span class="hljs-comment">//文件名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> uploadFileParamsDto.getFilename();<br>    <span class="hljs-comment">//构造objectname</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(objectName)) &#123;<br>      objectName = fileId + filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(folder)) &#123;<br>      <span class="hljs-comment">//通过日期构造文件存储路径</span><br>      folder = getFileFolder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (folder.indexOf(<span class="hljs-string">&quot;/&quot;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>      folder = folder + <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//对象名称</span><br>    objectName = folder + objectName;<br>    <span class="hljs-type">MediaFiles</span> <span class="hljs-variable">mediaFiles</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//转为流</span><br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br><br>      <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">putObjectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder().bucket(bucket_Files).object(objectName)<br>          <span class="hljs-comment">//-1表示文件分片按5M(不小于5M,不大于5T),分片数量最大10000，</span><br>          .stream(byteArrayInputStream, byteArrayInputStream.available(), -<span class="hljs-number">1</span>)<br>          .contentType(uploadFileParamsDto.getContentType())<br>          .build();<br><br>      <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinIOUtils.initMinioClient();<br>      minioClient.putObject(putObjectArgs);<br>      <span class="hljs-comment">//从数据库查询文件</span><br>      mediaFiles = mediaFilesMapper.selectById(fileId);<br>      <span class="hljs-keyword">if</span> (mediaFiles == <span class="hljs-literal">null</span>) &#123;<br>        mediaFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaFiles</span>();<br>        <span class="hljs-comment">//拷贝基本信息</span><br>        BeanUtils.copyProperties(uploadFileParamsDto, mediaFiles);<br>        mediaFiles.setId(fileId);<br>        mediaFiles.setFileId(fileId);<br>        mediaFiles.setCompanyId(companyId);<br>        mediaFiles.setUrl(<span class="hljs-string">&quot;/&quot;</span> + bucket_Files + <span class="hljs-string">&quot;/&quot;</span> + objectName);<br>        mediaFiles.setBucket(bucket_Files);<br>        mediaFiles.setCreateDate(LocalDateTime.now());<br>        mediaFiles.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">//保存文件信息到文件表</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> mediaFilesMapper.insert(mediaFiles);<br>        <span class="hljs-keyword">if</span> (insert &lt; <span class="hljs-number">0</span>) &#123;<br>          XueChengPlusException.cast(<span class="hljs-string">&quot;保存文件信息失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">UploadFileResultDto</span> <span class="hljs-variable">uploadFileResultDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadFileResultDto</span>();<br>        BeanUtils.copyProperties(mediaFiles, uploadFileResultDto);<br>        <span class="hljs-keyword">return</span> uploadFileResultDto;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      e.printStackTrace();<br>      XueChengPlusException.cast(<span class="hljs-string">&quot;上传过程中出错&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//根据日期拼接目录</span><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getFileFolder</span><span class="hljs-params">(Date date, <span class="hljs-type">boolean</span> year, <span class="hljs-type">boolean</span> month, <span class="hljs-type">boolean</span> day)</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    <span class="hljs-comment">//获取当前日期字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">dateString</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">//取出年、月、日</span><br>    String[] dateStringArray = dateString.split(<span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">folderString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (year) &#123;<br>      folderString.append(dateStringArray[<span class="hljs-number">0</span>]);<br>      folderString.append(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month) &#123;<br>      folderString.append(dateStringArray[<span class="hljs-number">1</span>]);<br>      folderString.append(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (day) &#123;<br>      folderString.append(dateStringArray[<span class="hljs-number">2</span>]);<br>      folderString.append(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> folderString.toString();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> RestResponse&lt;Boolean&gt; <span class="hljs-title function_">checkFile</span><span class="hljs-params">(String fileMd5)</span> &#123;<br>    <span class="hljs-comment">//查询文件信息</span><br>    <span class="hljs-type">MediaFiles</span> <span class="hljs-variable">mediaFiles</span> <span class="hljs-operator">=</span> mediaFilesMapper.selectById(fileMd5);<br>    <span class="hljs-keyword">if</span> (mediaFiles != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">//桶</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> mediaFiles.getBucket();<br>      <span class="hljs-comment">//存储目录</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> mediaFiles.getFilePath();<br>      <span class="hljs-comment">//文件流</span><br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinIOUtils.initMinioClient();<br>        stream = minioClient.getObject(<br>            GetObjectArgs.builder()<br>                .bucket(bucket)<br>                .object(filePath)<br>                .build());<br><br>        <span class="hljs-keyword">if</span> (stream != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">//文件已存在</span><br>          <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">true</span>);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//文件不存在</span><br>    <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">false</span>);<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> RestResponse&lt;Boolean&gt; <span class="hljs-title function_">checkChunk</span><span class="hljs-params">(String fileMd5, <span class="hljs-type">int</span> chunkIndex)</span> &#123;<br><br>    <span class="hljs-comment">//得到分块文件目录</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkFileFolderPath</span> <span class="hljs-operator">=</span> getChunkFileFolderPath(fileMd5);<br>    <span class="hljs-comment">//得到分块文件的路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkFilePath</span> <span class="hljs-operator">=</span> chunkFileFolderPath + chunkIndex;<br><br>    <span class="hljs-comment">//文件流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinIOUtils.initMinioClient();<br>      fileInputStream = minioClient.getObject(<br>          GetObjectArgs.builder()<br>              .bucket(bucket_videoFiles)<br>              .object(chunkFilePath)<br>              .build());<br>      <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//分块已存在</span><br>        <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">true</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//分块未存在</span><br>    <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//得到分块文件的目录</span><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getChunkFileFolderPath</span><span class="hljs-params">(String fileMd5)</span> &#123;<br>    <span class="hljs-keyword">return</span> fileMd5.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;/&quot;</span> + fileMd5.substring(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) + <span class="hljs-string">&quot;/&quot;</span> + fileMd5 + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-string">&quot;chunk&quot;</span><br>        + <span class="hljs-string">&quot;/&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> RestResponse <span class="hljs-title function_">uploadChunk</span><span class="hljs-params">(String fileMd5, <span class="hljs-type">int</span> chunk, <span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>    <span class="hljs-comment">//得到分块文件的目录路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkFileFolderPath</span> <span class="hljs-operator">=</span> getChunkFileFolderPath(fileMd5);<br>    <span class="hljs-comment">//得到分块文件的路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkFilePath</span> <span class="hljs-operator">=</span> chunkFileFolderPath + chunk;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//将文件存储至minIO</span><br>      addMediaFilesToMinIO(bytes, bucket_videoFiles, chunkFilePath);<br>      <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>      log.debug(<span class="hljs-string">&quot;上传分块文件:&#123;&#125;,失败:&#123;&#125;&quot;</span>, chunkFilePath, ex.getMessage());<br>    &#125;<br>    <span class="hljs-keyword">return</span> RestResponse.validfail(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;上传分块失败&quot;</span>);<br>  &#125;<br><br><br>  <span class="hljs-comment">//将文件上传到文件系统</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMediaFilesToMinIO</span><span class="hljs-params">(String filePath, String bucket, String objectName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">UploadObjectArgs</span> <span class="hljs-variable">uploadObjectArgs</span> <span class="hljs-operator">=</span> UploadObjectArgs.builder()<br>          .bucket(bucket)<br>          .object(objectName)<br>          .filename(filePath)<br>          .build();<br>      <span class="hljs-comment">//上传</span><br>      MinIOUtils.uploadFile(uploadObjectArgs);<br>      log.debug(<span class="hljs-string">&quot;文件上传成功:&#123;&#125;&quot;</span>, filePath);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      XueChengPlusException.cast(<span class="hljs-string">&quot;文件上传到文件系统失败&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将文件上传到分布式文件系统</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bytes</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucket</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMediaFilesToMinIO</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, String bucket, String objectName)</span> &#123;<br><br>    <span class="hljs-comment">//资源的媒体类型:默认未知二进制流</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> MediaType.APPLICATION_OCTET_STREAM_VALUE;<br><br>    <span class="hljs-keyword">if</span> (objectName.indexOf(<span class="hljs-string">&quot;.&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">//取objectName中的扩展名</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> objectName.substring(objectName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>      <span class="hljs-type">ContentInfo</span> <span class="hljs-variable">extensionMatch</span> <span class="hljs-operator">=</span> ContentInfoUtil.findExtensionMatch(extension);<br>      <span class="hljs-keyword">if</span> (extensionMatch != <span class="hljs-literal">null</span>) &#123;<br>        contentType = extensionMatch.getMimeType();<br>      &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br><br>      <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">putObjectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder()<br>          .bucket(bucket)<br>          .object(objectName)<br>          <span class="hljs-comment">//InputStream stream, long objectSize 对象大小, long partSize 分片大小(-1表示5M,最大不要超过5T，最多10000)</span><br>          .stream(byteArrayInputStream, byteArrayInputStream.available(), -<span class="hljs-number">1</span>)<br>          .contentType(contentType)<br>          .build();<br>      <span class="hljs-comment">//上传到minio</span><br>      MinIOUtils.uploadFile(putObjectArgs);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.debug(<span class="hljs-string">&quot;上传文件到文件系统出错:&#123;&#125;&quot;</span>, e.getMessage());<br>      XueChengPlusException.cast(<span class="hljs-string">&quot;上传文件到文件系统出错&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//合并分块</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> RestResponse <span class="hljs-title function_">mergechunks</span><span class="hljs-params">(Long companyId, String fileMd5, <span class="hljs-type">int</span> chunkTotal,</span><br><span class="hljs-params">      UploadFileParamsDto uploadFileParamsDto)</span> &#123;<br>    <span class="hljs-comment">//下载分块</span><br>    File[] chunkFiles = checkChunkStatus(fileMd5, chunkTotal);<br><br>    <span class="hljs-comment">//得到合并后文件的扩展名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> uploadFileParamsDto.getFilename();<br>    <span class="hljs-comment">//扩展名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-type">File</span> <span class="hljs-variable">tempMergeFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//创建一个临时文件作为合并文件</span><br>        tempMergeFile = File.createTempFile(<span class="hljs-string">&quot;&#x27;merge&#x27;&quot;</span>, extension);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        XueChengPlusException.cast(<span class="hljs-string">&quot;创建临时合并文件出错&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">//创建合并文件的流对象</span><br>      <span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_write</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(tempMergeFile, <span class="hljs-string">&quot;rw&quot;</span>)) &#123;<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">for</span> (File file : chunkFiles) &#123;<br>          <span class="hljs-comment">//读取分块文件的流对象</span><br>          <span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf_read</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;r&quot;</span>);) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> ((len = raf_read.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>              <span class="hljs-comment">//向合并文件写数据</span><br>              raf_write.write(b, <span class="hljs-number">0</span>, len);<br>            &#125;<br>          &#125;<br><br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        XueChengPlusException.cast(<span class="hljs-string">&quot;合并文件过程出错&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">//校验合并后的文件是否正确</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">mergeFileStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(tempMergeFile);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mergeMd5Hex</span> <span class="hljs-operator">=</span> DigestUtils.md5Hex(mergeFileStream);<br>        <span class="hljs-keyword">if</span> (!fileMd5.equals(mergeMd5Hex)) &#123;<br>          log.debug(<span class="hljs-string">&quot;合并文件校验不通过,文件路径:&#123;&#125;,原始文件md5:&#123;&#125;&quot;</span>, tempMergeFile.getAbsolutePath(), fileMd5);<br>          XueChengPlusException.cast(<span class="hljs-string">&quot;合并文件校验不通过&quot;</span>);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.debug(<span class="hljs-string">&quot;合并文件校验出错,文件路径:&#123;&#125;,原始文件md5:&#123;&#125;&quot;</span>, tempMergeFile.getAbsolutePath(), fileMd5);<br>        XueChengPlusException.cast(<span class="hljs-string">&quot;合并文件校验出错&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">//拿到合并文件在minio的存储路径</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">mergeFilePath</span> <span class="hljs-operator">=</span> getFilePathByMd5(fileMd5, extension);<br>      <span class="hljs-comment">//将合并后的文件上传到文件系统</span><br>      addMediaFilesToMinIO(tempMergeFile.getAbsolutePath(), bucket_videoFiles, mergeFilePath);<br><br>      <span class="hljs-comment">//将文件信息入库保存</span><br>      uploadFileParamsDto.setFileSize(tempMergeFile.length());<span class="hljs-comment">//合并文件的大小</span><br>      addMediaFilesToDb(companyId, fileMd5, uploadFileParamsDto, bucket_videofiles, mergeFilePath);<br><br>      <span class="hljs-keyword">return</span> RestResponse.success(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">//删除临时分块文件</span><br>      <span class="hljs-keyword">if</span> (chunkFiles != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (File chunkFile : chunkFiles) &#123;<br>          <span class="hljs-keyword">if</span> (chunkFile.exists()) &#123;<br>            chunkFile.delete();<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">//删除合并的临时文件</span><br>      <span class="hljs-keyword">if</span> (tempMergeFile != <span class="hljs-literal">null</span>) &#123;<br>        tempMergeFile.delete();<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> companyId</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileId</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> uploadFileParamsDto</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucket</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> com.xuecheng.media.model.po.MediaFiles</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span> 将文件信息入库</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Mr.M</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@date</span> 2022/10/14 9:14</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> MediaFiles <span class="hljs-title function_">addMediaFilesToDb</span><span class="hljs-params">(Long companyId, String fileId,</span><br><span class="hljs-params">      UploadFileParamsDto uploadFileParamsDto, String bucket, String objectName)</span> &#123;<br>    <span class="hljs-comment">//保存到数据库</span><br>    <span class="hljs-type">MediaFiles</span> <span class="hljs-variable">mediaFiles</span> <span class="hljs-operator">=</span> mediaFilesMapper.selectById(fileId);<br>    <span class="hljs-keyword">if</span> (mediaFiles == <span class="hljs-literal">null</span>) &#123;<br>      mediaFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaFiles</span>();<br>      <span class="hljs-comment">//封装数据</span><br>      BeanUtils.copyProperties(uploadFileParamsDto, mediaFiles);<br>      mediaFiles.setId(fileId);<br>      mediaFiles.setFileId(fileId);<br>      mediaFiles.setCompanyId(companyId);<br>      mediaFiles.setBucket(bucket);<br>      mediaFiles.setFilePath(objectName);<br>      mediaFiles.setUrl(<span class="hljs-string">&quot;/&quot;</span> + bucket + <span class="hljs-string">&quot;/&quot;</span> + objectName);<br>      mediaFiles.setCreateDate(LocalDateTime.now());<br>      mediaFiles.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>      mediaFiles.setAuditStatus(<span class="hljs-string">&quot;002003&quot;</span>);<br>      <span class="hljs-comment">//插入文件表</span><br>      mediaFilesMapper.insert(mediaFiles);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mediaFiles;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getFilePathByMd5</span><span class="hljs-params">(String fileMd5, String fileExt)</span> &#123;<br>    <span class="hljs-keyword">return</span> fileMd5.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;/&quot;</span> + fileMd5.substring(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) + <span class="hljs-string">&quot;/&quot;</span> + fileMd5 + <span class="hljs-string">&quot;/&quot;</span> + fileMd5<br>        + fileExt;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileMd5</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> chunkTotal 分块数量</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> java.io.File[] 分块文件数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span> 下载分块</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Mr.M</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@date</span> 2022/10/14 15:07</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> File[] checkChunkStatus(String fileMd5, <span class="hljs-type">int</span> chunkTotal) &#123;<br><br>    <span class="hljs-comment">//得到分块文件所在目录</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">chunkFileFolderPath</span> <span class="hljs-operator">=</span> getChunkFileFolderPath(fileMd5);<br>    <span class="hljs-comment">//分块文件数组</span><br>    File[] chunkFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>[chunkTotal];<br>    <span class="hljs-comment">//开始下载</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chunkTotal; i++) &#123;<br>      <span class="hljs-comment">//分块文件的路径</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">chunkFilePath</span> <span class="hljs-operator">=</span> chunkFileFolderPath + i;<br>      <span class="hljs-comment">//分块文件</span><br>      <span class="hljs-type">File</span> <span class="hljs-variable">chunkFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        chunkFile = File.createTempFile(<span class="hljs-string">&quot;chunk&quot;</span>, <span class="hljs-literal">null</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        XueChengPlusException.cast(<span class="hljs-string">&quot;创建分块临时文件出错&quot;</span> + e.getMessage());<br>      &#125;<br><br>      <span class="hljs-comment">//下载分块文件</span><br>      downloadFileFromMinIO(chunkFile, bucket_videoFiles, chunkFilePath);<br>      chunkFiles[i] = chunkFile;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> chunkFiles;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据桶和文件路径从minio下载文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucket</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> objectName</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> File <span class="hljs-title function_">downloadFileFromMinIO</span><span class="hljs-params">(File file, String bucket, String objectName)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> MinIOUtils.getObjectInputStream(bucket, objectName);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>    ) &#123;<br>      IOUtils.copy(inputStream, outputStream);<br>      <span class="hljs-keyword">return</span> file;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      XueChengPlusException.cast(<span class="hljs-string">&quot;查询分块文件出错&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十七、jxls导出-导入Excel"><a href="#十七、jxls导出-导入Excel" class="headerlink" title="十七、jxls导出&#x2F;导入Excel"></a>十七、jxls导出&#x2F;导入Excel</h2><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><blockquote><p>依赖导入</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        excel导出-jxls--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jxls<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jxls<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jxls<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jxls-poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;<br><span class="hljs-keyword">import</span> org.jxls.common.Context;<br><span class="hljs-keyword">import</span> org.jxls.reader.ReaderBuilder;<br><span class="hljs-keyword">import</span> org.jxls.reader.ReaderConfig;<br><span class="hljs-keyword">import</span> org.jxls.reader.XLSDataReadException;<br><span class="hljs-keyword">import</span> org.jxls.reader.XLSReader;<br><span class="hljs-keyword">import</span> org.jxls.util.JxlsHelper;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * excel导出工具</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 高喆</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-07-04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelUtils</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 导出</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> data        导出的数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName    导出的文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> templateDir 模版文件的位置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response    响应流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(Object data, String fileName, String templateDir,</span><br><span class="hljs-params">      HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(templateDir).getInputStream();<br>    export(data, fileName, is, response);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 导出</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> data     导出的数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName 导出的文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> template 模版文件输入流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response 响应流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(Object data, String fileName, InputStream template,</span><br><span class="hljs-params">      HttpServletResponse response)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> template;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream()) &#123;<br>      <span class="hljs-comment">//文件名编码</span><br>      fileName = URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>).replace(<span class="hljs-string">&quot;\\+&quot;</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>      response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName);<br>      response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>      <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>      context.putVar(<span class="hljs-string">&quot;data&quot;</span>, data);<br>      JxlsHelper.getInstance().processTemplate(is, out, context);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(<span class="hljs-string">&quot;导出失败&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 导入</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> configDir         配置文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dataFin           导入的文件的输入流</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> targetMappingName 导入javaBean映射名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> target            导入javaBean对象</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">importExcel</span><span class="hljs-params">(String configDir, InputStream dataFin, String targetMappingName,</span><br><span class="hljs-params">      Object target)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputXML</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(configDir).getInputStream());<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputXLS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(dataFin);<br>      Map&lt;String, Object&gt; beanParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      beanParams.put(targetMappingName, target);<br>      <span class="hljs-comment">//碰到数据类型转换异常时跳过异常,例如数字类型但是单元格中为空,默认是会抛出异常的.设置之后就会设置为null</span><br>      ReaderConfig.getInstance().setSkipErrors(<span class="hljs-literal">true</span>);<br>      <span class="hljs-type">XLSReader</span> <span class="hljs-variable">mainReader</span> <span class="hljs-operator">=</span> ReaderBuilder.buildFromXML(inputXML);<br>      <span class="hljs-comment">//从excel中读取对象,名称需和xml中对应</span><br>      mainReader.read(inputXLS, beanParams);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException | SAXException | InvalidFormatException | XLSDataReadException e) &#123;<br>      log.error(<span class="hljs-string">&quot;导入失败&quot;</span>);<br>      e.printStackTrace();<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>创建模版excel</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20220814200700588.png" alt="image-20220814200700588"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">第一行第一个单元格： jx:area(<span class="hljs-attribute">lastCell</span>=<span class="hljs-string">&quot;D2&quot;</span>)<br>第二行第一个单元格： jx:each(<span class="hljs-attribute">items</span>=<span class="hljs-string">&quot;data&quot;</span> <span class="hljs-attribute">var</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attribute">lastCell</span>=<span class="hljs-string">&quot;D2&quot;</span>)<br>图片单元格：jx:image(<span class="hljs-attribute">lastCell</span>=<span class="hljs-string">&quot;C2&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;item.image&quot;</span> <span class="hljs-attribute">imageType</span>=<span class="hljs-string">&quot;PNG&quot;</span>)<br>除了图片，其他导出实体类属性设置：<span class="hljs-variable">$&#123;item&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>demo例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(&quot;/employee&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;<br><br>  <span class="hljs-meta">@GetMapping(&quot;export&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportEmployee</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;Employee&gt; employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>      <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>      employee.setAge(i);<br>      employee.setGender(<span class="hljs-number">1</span>);<br>      employee.setName(<span class="hljs-string">&quot;高喆&quot;</span> + i);<br>      <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/gaozhe/Desktop/myfile/kabishen.jpg&quot;</span>);<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>      <span class="hljs-comment">//图片属性需要设置成byte[]</span><br>      employee.setImage(StreamUtils.copyToByteArray(in));<br>      employees.add(employee);<br>    &#125;<br><br>    ExcelUtils.export(employees, <span class="hljs-string">&quot;员工考勤表.xlsx&quot;</span>, <span class="hljs-string">&quot;excel/template/员工数据列表.xlsx&quot;</span>, response);<br><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20220814200942410.png" alt="image-20220814200942410"></p><blockquote><p>常见标签</p></blockquote><ol><li>合并单元格:   jx:mergeCells(rows&#x3D;”item.courses.size()” lastCell&#x3D;”A4”)</li></ol><p>有时候,我们会遇到导出的实体类集合是包含一对多的情况,这个时候我们就需要用到合并单元格的标签</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221204160334223.png" alt="image-20221204160334223"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221205175142353.png" alt="image-20221205175142353"></p><ol start="2"><li>循环标签: jx:each</li></ol><p>示例：jx:each((items&#x3D;”employees” var&#x3D;”employee” lastCell&#x3D;”D4” area&#x3D;”[A4:D4]” select&#x3D;”employee.payment &gt; 2000”))<br>参数说明:</p><table><thead><tr><th align="left">参数名称</th><th align="left">示例</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">items</td><td align="left">items&#x3D;”employees”</td><td align="left">必填</td><td align="left">循环的集合对象</td></tr><tr><td align="left">var</td><td align="left">var&#x3D;”employee”</td><td align="left">必填</td><td align="left">循环中的变量名,指定之后区域内可以使用该名称访问属性</td></tr><tr><td align="left">lastCell</td><td align="left">lastCell&#x3D;”D4”</td><td align="left">必填</td><td align="left">指令对应的结束位置</td></tr><tr><td align="left">direction</td><td align="left">direction &#x3D;”RIGHT”</td><td align="left"></td><td align="left">输出的方向向下(DOWN)或向右(RIGHT),默认为DOWN</td></tr><tr><td align="left">area</td><td align="left">areas&#x3D;[“A8:F8”,”A13:F13”]</td><td align="left"></td><td align="left">循环的区域，一次循环多行则需要填写,可以指定多个区域使用逗号分隔</td></tr><tr><td align="left">select</td><td align="left">select&#x3D;”employee.payment&gt;2000”</td><td align="left"></td><td align="left">过滤条件,不需要通过${}来取值</td></tr><tr><td align="left">groupBy</td><td align="left">groupBy &#x3D;”name”</td><td align="left"></td><td align="left">jx:each(items&#x3D;”employees” var&#x3D;”nameGroup” groupBy&#x3D;”name” groupOrder&#x3D;”asc” lastCell&#x3D;”D7”)依据employee中name进行分组，分组后的集合可通过nameGroup.items来获取，官网示例中后面还有一个each指定的items就是nameGroup.items</td></tr><tr><td align="left">groupOrder</td><td align="left">groupOrder &#x3D;”asc”</td><td align="left"></td><td align="left">指定分组排序(‘desc’ or ‘asc’)</td></tr><tr><td align="left">multisheet</td><td align="left">multisheet &#x3D;”sheets”</td><td align="left"></td><td align="left">循环的sheet名称集合，指定后会产生多个sheet，指定后each的维度会变为sheet，不需要指定area</td></tr><tr><td align="left">shiftMode</td><td align="left">shiftMode &#x3D;”adjacent”</td><td align="left"></td><td align="left">adjacent指定后通过添加行的方式向指定方向输出，inner:则为通过添加单元格的方式向指定方向输出,默认为inner</td></tr><tr><td align="left">cellRefGenerator</td><td align="left">?</td><td align="left"></td><td align="left">?</td></tr></tbody></table><ol start="3"><li>jx:if 条件判断</li></ol><p>示例：jx:if(condition&#x3D;”department.chief.name !&#x3D; ‘Betsy’ “ lastCell&#x3D;”F4” areas&#x3D;[“A3:F4”])</p><p>如果满足条件才回显示出来  </p><table><thead><tr><th align="left">参数名称</th><th align="left">示例</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">condition</td><td align="left">condition&#x3D;”department.chief.name !&#x3D; ‘Betsy’ “</td><td align="left">必填</td><td align="left">判断条件，字符串不需要通过${}来取值，直接访问传递对象的内容</td></tr><tr><td align="left">ifArea</td><td align="left">ifArea &#x3D;[“A3:F4”]</td><td align="left"></td><td align="left">if指令影响的范围 condition结果为true则显示指定范围</td></tr><tr><td align="left">elseArea</td><td align="left">elseArea&#x3D;[“A3:F4”]</td><td align="left"></td><td align="left">if指令影响的范围 condition结果为false则显示指定范围</td></tr></tbody></table><ol start="4"><li>jx:image 输出图片</li></ol><table><thead><tr><th align="left">参数名称</th><th align="left">示例</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">src</td><td align="left">src&#x3D;”image”</td><td align="left">必填</td><td align="left">输出的图片数据源byte[]</td></tr><tr><td align="left">imageType</td><td align="left">imageType&#x3D;”PNG”</td><td align="left"></td><td align="left">输出的图片格式可不填</td></tr></tbody></table><h4 id="导入Excel"><a href="#导入Excel" class="headerlink" title="导入Excel"></a>导入Excel</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jxls<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jxls-reader<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要读取的Excel中的数据展示<br><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/SouthEast.jpeg" alt="要读取的Excel文件"></p><blockquote><p>导入配置xml详解</p></blockquote><p><strong>xmlConfig.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">workbook</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--导入哪个sheet--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">worksheet</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Sheet1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注意：行和列都是从零开始--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;B1&quot;</span>&gt;</span>department.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;A4&quot;</span>&gt;</span>department.chief.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;B4&quot;</span>&gt;</span>department.chief.age<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;D4&quot;</span>&gt;</span>department.chief.payment<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>department.chief.bonus<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--遍历，startRow=”7” endRow=”7” 表示第8行，准确的说第8行为遍历的起始行--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loop</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;employees&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">varType</span>=<span class="hljs-string">&quot;com.enation.app.shop.core.order.model.Staff&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>employee.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>employee.age<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>employee.payment<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>employee.bonus<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--注意：loop标签必须包含loopbreakcondition标签，用作终止循环。这里是下一行的第一个单元格如果是 Employee Payment Totals: 则终止该循环--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">loopbreakcondition</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rowcheck</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--不写文字代表遇到空白则终止循环--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">cellcheck</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>Employee Payment Totals:<span class="hljs-tag">&lt;/<span class="hljs-name">cellcheck</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rowcheck</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">loopbreakcondition</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loop</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">worksheet</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">workbook</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>有的时候我们并不知道sheet的名字，因此jxls也为我们提供了通过索引<em>idx</em>来指定sheet</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">workbook</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">worksheet</span> <span class="hljs-attr">idx</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;B1&quot;</span>&gt;</span>department.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;A4&quot;</span>&gt;</span>department.chief.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;B4&quot;</span>&gt;</span>department.chief.age<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">cell</span>=<span class="hljs-string">&quot;D4&quot;</span>&gt;</span>department.chief.payment<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>department.chief.bonus<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">loop</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;department.staff&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">varType</span>=<span class="hljs-string">&quot;org.jxls.reader.sample.Employee&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">startRow</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">endRow</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>employee.name<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>employee.age<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>employee.payment<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">col</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>employee.bonus<span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">loopbreakcondition</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">rowcheck</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">cellcheck</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>Employee Payment Totals:<span class="hljs-tag">&lt;/<span class="hljs-name">cellcheck</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">rowcheck</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">loopbreakcondition</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">loop</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">worksheet</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">workbook</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>导入demo</p></blockquote><p>Staff.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Staff</span> &#123;<br><br>        <span class="hljs-keyword">private</span>  String name;<br>        <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">private</span>  String  birthDateOfString;<br>        <span class="hljs-keyword">private</span>  Double payment;<br>        <span class="hljs-keyword">private</span>  Double bonus;<br>        <span class="hljs-keyword">private</span>  String superiorName;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Staff</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Staff</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String birthDateOfString, Double payment, Double bonus, String superiorName)</span> &#123;<br>            <span class="hljs-built_in">super</span>();<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            <span class="hljs-built_in">this</span>.birthDateOfString = birthDateOfString;<br>            <span class="hljs-built_in">this</span>.payment = payment;<br>            <span class="hljs-built_in">this</span>.bonus = bonus;<br>            <span class="hljs-built_in">this</span>.superiorName = superiorName;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBirthDateOfString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> birthDateOfString;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthDateOfString</span><span class="hljs-params">(String birthDateOfString)</span> &#123;<br>            <span class="hljs-built_in">this</span>.birthDateOfString = birthDateOfString;<br>        &#125;<br>        <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getPayment</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> payment;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPayment</span><span class="hljs-params">(Double payment)</span> &#123;<br>            <span class="hljs-built_in">this</span>.payment = payment;<br>        &#125;<br>        <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getBonus</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> bonus;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(Double bonus)</span> &#123;<br>            <span class="hljs-built_in">this</span>.bonus = bonus;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSuperiorName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> superiorName;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuperiorName</span><span class="hljs-params">(String superiorName)</span> &#123;<br>            <span class="hljs-built_in">this</span>.superiorName = superiorName;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Staff [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, birthDateOfString=&quot;</span> + birthDateOfString + <span class="hljs-string">&quot;, payment=&quot;</span> + payment + <span class="hljs-string">&quot;, bonus=&quot;</span><br>                    + bonus + <span class="hljs-string">&quot;, superiorName=&quot;</span> + superiorName + <span class="hljs-string">&quot;]&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><p>Department.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Staff</span> <span class="hljs-variable">chief</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Staff</span>();<span class="hljs-comment">//注意：这里一定要new，否则映射不了  department.chief.name</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name, Staff chief)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.chief = chief;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Staff <span class="hljs-title function_">getChief</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> chief;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChief</span><span class="hljs-params">(Staff chief)</span> &#123;<br>        <span class="hljs-built_in">this</span>.chief = chief;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Department [name=&quot;</span> + name + <span class="hljs-string">&quot;, chief=&quot;</span> + chief + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;employee&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeController</span> &#123;  <br>    <span class="hljs-meta">@RequestMapping(&quot;read&quot;)</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, SAXException, InvalidFormatException&#123;  <br>        <span class="hljs-comment">//配置文件</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">xmlFin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/test/read/xmlConfig.xml&quot;</span>));<br>        <span class="hljs-comment">//要导入的Excel</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">dataFin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/test/read/departmentdata.xls&quot;</span>));<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputXML</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(xmlFin);<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputXLS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(dataFin);<br><br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>();<br><br>        List&lt;Staff&gt; employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Staff&gt;();<br><br>        Map&lt;String,Object&gt; beanparams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br><br>        beanparams.put(<span class="hljs-string">&quot;department&quot;</span>,department);<br>        beanparams.put(<span class="hljs-string">&quot;employees&quot;</span>,employees);<br><br>        <span class="hljs-type">XLSReader</span> <span class="hljs-variable">mainReader</span> <span class="hljs-operator">=</span> ReaderBuilder.buildFromXML(inputXML);<br>        <span class="hljs-type">XLSReadStatus</span> <span class="hljs-variable">readStatus</span> <span class="hljs-operator">=</span> mainReader.read(inputXLS,beanparams);<br>        <span class="hljs-comment">//测试</span><br>        System.out.println(department.toString());<br>        <span class="hljs-keyword">for</span> (Staff employee : employees) &#123;<br>            System.out.println(employee.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十八、Spring缓存"><a href="#十八、Spring缓存" class="headerlink" title="十八、Spring缓存"></a>十八、Spring缓存</h2><blockquote><p>原理</p></blockquote><p>自动配置类：CacheAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会自动导入缓存配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheConfigurationImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>CacheType[] types = CacheType.values();<br>String[] imports = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[types.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; types.length; i++) &#123;<br>imports[i] = CacheConfigurations.getConfigurationClass(types[i]);<br>&#125;<br><span class="hljs-keyword">return</span> imports;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>导入缓存配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">缓存的配置类:<br>      org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration<br>      org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】<br>      org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration<br></code></pre></td></tr></table></figure><p>SimpleCacheConfiguration给容器中注册了一个CacheManager：ConcurrentMapCacheManager,底层实际是使用concurrentHashMap来实现的缓存</p><blockquote><p>注解</p></blockquote><p>一、@Cacheable: </p><p>标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；</p><p>运行流程：</p><ol><li><p>方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；（CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</p></li><li><p>去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；</p><ul><li><pre><code class="hljs"> key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；</code></pre></li><li><pre><code class="hljs"> SimpleKeyGenerator生成key的默认策略；</code></pre></li><li><pre><code class="hljs"> 如果没有参数；key=new SimpleKey()；</code></pre></li><li><pre><code class="hljs"> 如果有一个参数：key=参数的值</code></pre></li><li><pre><code class="hljs"> 如果有多个参数：key=new SimpleKey(params)；</code></pre></li></ul></li><li><p>没有查到缓存就调用目标方法；</p></li><li><p>将目标方法返回的结果，放进缓存中</p></li></ol><p>核心：</p><ol><li>使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件</li><li>key使用keyGenerator生成的，默认是SimpleKeyGenerator</li></ol><p>几个属性：</p><ul><li><pre><code class="hljs"> cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；</code></pre></li><li><pre><code class="hljs"> key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值 </code></pre></li><li><pre><code class="hljs"> keyGenerator：key的生成器；可以自己指定key的生成器的组件id（key/keyGenerator：二选一使用;）</code></pre></li><li><pre><code class="hljs"> cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器</code></pre></li><li><pre><code class="hljs">  condition：指定符合条件的情况下才缓存；比如：condition = &quot;#id&gt;0&quot;；condition = &quot;#a0&gt;1&quot;：第一个参数的值 &gt; 1的时候才进行缓</code></pre></li><li><pre><code class="hljs"> unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断。比如:unless = &quot;#result == null&quot;;unless = &quot;#a0==2&quot;:如果第一个参数的值是2，结果不缓存；</code></pre></li><li><pre><code class="hljs"> sync：是否使用异步模式</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  @Cacheable(value = &#123;&quot;employee&quot;&#125;,key = &quot;#root.methodName + &#x27;[&#x27; +#id + &#x27;]&#x27;&quot;)</span><br>   <span class="hljs-meta">@Cacheable(value = &#123;&quot;employee&quot;&#125;, keyGenerator = &quot;customKeyGenerator&quot;)</span><br>   <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmp</span><span class="hljs-params">(Integer id)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;查询&quot;</span>+id+<span class="hljs-string">&quot;号员工&quot;</span>);<br>       <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> employeeMapper.getEmpById(id);<br>       <span class="hljs-keyword">return</span> emp;<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义缓存keyGenerator</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/08/27 2:13 下午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomCacheConfig</span> &#123;<br><br>  <span class="hljs-meta">@Bean(&quot;customKeyGenerator&quot;)</span><br>  <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (target, method, params) -&gt;<br>        method.getName() + Arrays.asList(params).toString();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>二、@CachePut:</p><p>既调用方法，又更新缓存数据；同步更新缓存</p><p>运行时机：</p><p>​1、先调用目标方法</p><p>​2、将目标方法的结果缓存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CachePut(value = &quot;emp&quot;,key = &quot;#result.id&quot;)</span><br>   <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee employee)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;updateEmp:&quot;</span>+employee);<br>       employeeMapper.updateEmp(employee);<br>       <span class="hljs-keyword">return</span> employee;<br>   &#125;<br></code></pre></td></tr></table></figure><p>三、@CacheEvict：缓存清除</p><ul><li><p>key：指定要清除的数据</p></li><li><p>allEntries &#x3D; true：指定清除这个缓存中所有的数据</p></li><li><p>beforeInvocation &#x3D; false：缓存的清除是否在方法之前执行</p></li><li><p>默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除</p></li><li><p>beforeInvocation &#x3D; true：</p></li><li><pre><code class="hljs"> 代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheEvict(value = &quot;emp&quot;, beforeInvocation = true, key = &quot;#id&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmp</span><span class="hljs-params">(Integer id)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;deleteEmp:&quot;</span> + id);<br>    employeeMapper.deleteEmpById(id);<br>  &#125;<br></code></pre></td></tr></table></figure><p>四、@Caching 定义复杂的缓存规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Caching(</span><br><span class="hljs-meta">      cacheable = &#123;</span><br><span class="hljs-meta">          @Cacheable(/*value=&quot;emp&quot;,*/key = &quot;#lastName&quot;)</span><br><span class="hljs-meta">      &#125;,</span><br><span class="hljs-meta">      put = &#123;</span><br><span class="hljs-meta">          @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.id&quot;),</span><br><span class="hljs-meta">          @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.email&quot;)</span><br><span class="hljs-meta">      &#125;,</span><br><span class="hljs-meta">      evict = &#123;</span><br><span class="hljs-meta">          @CacheEvict(cacheNames = &quot;sku&quot;, key = &quot;#skuId&quot;),</span><br><span class="hljs-meta">          @CacheEvict(cacheNames = &quot;skuList&quot;, key = &quot;#prodId&quot;)</span><br><span class="hljs-meta">  )</span><br>  <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmpByLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>    <span class="hljs-keyword">return</span> employeeMapper.getEmpByLastName(lastName);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="十九、canal实现监听binlog"><a href="#十九、canal实现监听binlog" class="headerlink" title="十九、canal实现监听binlog"></a>十九、canal实现监听binlog</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2 <span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>demo</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;<br><span class="hljs-keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;<br><span class="hljs-keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry;<br><span class="hljs-keyword">import</span> com.alibaba.otter.canal.protocol.Message;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 基于canal实现mysql binLog监听</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/09/08 9:41 上午</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalCommandLineRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//在canal部署的conf/canal.properties ip和端口信息</span><br>    <span class="hljs-type">CanalConnector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> CanalConnectors<br>        .newSingleConnector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;114.132.160.23&quot;</span>, <span class="hljs-number">11111</span>), <span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//打开连接</span><br>      connector.connect();<br>      <span class="hljs-comment">//订阅数据库表,全部表q</span><br>      <span class="hljs-comment">// connector.subscribe(&quot;.*\\..*&quot;);</span><br>      connector.subscribe(<span class="hljs-string">&quot;zhgd.new_project&quot;</span>);<br>      <span class="hljs-comment">//回滚到未进行ack的地方，下次fetch的时候，可以从最后一个没有ack的地方开始拿</span><br>      connector.rollback();<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 获取指定数量的数据</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> connector.getWithoutAck(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">batchId</span> <span class="hljs-operator">=</span> message.getId();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> message.getEntries().size();<br>        <span class="hljs-keyword">if</span> (batchId &gt; <span class="hljs-number">0</span> &amp;&amp; size != <span class="hljs-number">0</span>) &#123;<br>          handleDATAChange(message.getEntries());<br>        &#125;<br>        <span class="hljs-comment">// 提交确认</span><br>        connector.ack(batchId);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(e.toString());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      connector.disconnect();<br>      <span class="hljs-comment">//防止频繁访问数据库链接: 线程睡眠 10秒</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        log.error(e.toString());<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDATAChange</span><span class="hljs-params">(List&lt;CanalEntry.Entry&gt; entrys)</span> &#123;<br>    <span class="hljs-keyword">for</span> (CanalEntry.Entry entry : entrys) &#123;<br>      <span class="hljs-comment">// 只解析mysql事务的操作，其他的不解析</span><br>      <span class="hljs-keyword">if</span> (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN<br>          || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-comment">//RowChange对象，包含了一行数据变化的所有特征</span><br>      CanalEntry.RowChange rowChange;<br>      <span class="hljs-keyword">try</span> &#123;<br>        rowChange = CanalEntry.RowChange.parseFrom(entry.getStoreValue());<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;ERROR ## parser of eromanga-event has an error , data:&quot;</span> + entry.toString(), e);<br>      &#125;<br>      CanalEntry.<span class="hljs-type">EventType</span> <span class="hljs-variable">eventType</span> <span class="hljs-operator">=</span> rowChange.getEventType();<br>      <span class="hljs-comment">// 获取当前操作所属的数据库</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> entry.getHeader().getSchemaName();<br>      <span class="hljs-comment">// 获取当前操作所属的表</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> entry.getHeader().getTableName();<br><br>      <span class="hljs-comment">// 事务提交时间</span><br>      <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> entry.getHeader().getExecuteTime();<br><br>      log.info(<span class="hljs-string">&quot;Canal监测到更新:【&#123;&#125;】库的【&#123;&#125;】表&quot;</span>, dbName, tableName);<br><br>      <span class="hljs-keyword">for</span> (CanalEntry.RowData rowData : rowChange.getRowDatasList()) &#123;<br>        dataDetails(rowData.getBeforeColumnsList(), rowData.getAfterColumnsList(), dbName,<br>            tableName, eventType, timestamp);<br>        log.info(<span class="hljs-string">&quot;-------------------------------------------------------------&quot;</span>);<br>      &#125;<br><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析具体一条Binlog消息的数据</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dbName    当前操作所属数据库名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> tableName 当前操作所属表名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> eventType 当前操作类型（新增、修改、删除）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataDetails</span><span class="hljs-params">(List&lt;CanalEntry.Column&gt; beforeColumns,</span><br><span class="hljs-params">      List&lt;CanalEntry.Column&gt; afterColumns,</span><br><span class="hljs-params">      String dbName,</span><br><span class="hljs-params">      String tableName,</span><br><span class="hljs-params">      CanalEntry.EventType eventType,</span><br><span class="hljs-params">      <span class="hljs-type">long</span> timestamp)</span> &#123;<br><br>    log.info(<span class="hljs-string">&quot;数据库：&#123;&#125;,表名:&#123;&#125;,操作类型:&#123;&#125;&quot;</span>, dbName, tableName, eventType);<br><br>    <span class="hljs-keyword">if</span> (CanalEntry.EventType.INSERT.equals(eventType)) &#123;<br>      log.info(<span class="hljs-string">&quot;新增数据：&quot;</span>);<br>      printColumn(afterColumns);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CanalEntry.EventType.DELETE.equals(eventType)) &#123;<br>      log.info(<span class="hljs-string">&quot;删除数据：&quot;</span>);<br>      printColumn(beforeColumns);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      log.info(<span class="hljs-string">&quot;更新数据：更新前数据-----------------------------&quot;</span>);<br>      printColumn(beforeColumns);<br>      log.info(<span class="hljs-string">&quot;更新数据：更新后数据-----------------------------&quot;</span>);<br>      printColumn(afterColumns);<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;操作时间：&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd MM:ss&quot;</span>).format(timestamp));<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumn</span><span class="hljs-params">(List&lt;CanalEntry.Column&gt; columns)</span> &#123;<br>    <span class="hljs-keyword">for</span> (CanalEntry.Column column : columns) &#123;<br>      log.info(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十、Quartz定时任务"><a href="#二十、Quartz定时任务" class="headerlink" title="二十、Quartz定时任务"></a>二十、Quartz定时任务</h2><blockquote><p>导入sql</p></blockquote><p>执行quartz.sql</p><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br> <span class="hljs-comment">## quartz定时任务,采用数据库方式</span><br>  <span class="hljs-attr">quartz:</span><br>    <span class="hljs-attr">job-store-type:</span> <span class="hljs-string">jdbc</span><br>    <span class="hljs-attr">initialize-schema:</span> <span class="hljs-string">embedded</span><br>    <span class="hljs-comment">#定时任务启动开关，true-开  false-关</span><br>    <span class="hljs-attr">auto-startup:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#延迟1秒启动定时任务</span><br>    <span class="hljs-attr">startup-delay:</span> <span class="hljs-string">1s</span><br>    <span class="hljs-comment">#启动时更新己存在的Job</span><br>    <span class="hljs-attr">overwrite-existing-jobs:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">org:</span><br>        <span class="hljs-attr">quartz:</span><br>          <span class="hljs-attr">scheduler:</span><br>            <span class="hljs-attr">instanceName:</span> <span class="hljs-string">MyScheduler</span><br>            <span class="hljs-attr">instanceId:</span> <span class="hljs-string">AUTO</span><br>          <span class="hljs-attr">jobStore:</span><br>            <span class="hljs-attr">class:</span> <span class="hljs-string">org.springframework.scheduling.quartz.LocalDataSourceJobStore</span><br>            <span class="hljs-attr">driverDelegateClass:</span> <span class="hljs-string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br>            <span class="hljs-attr">tablePrefix:</span> <span class="hljs-string">QRTZ_</span><br>            <span class="hljs-attr">isClustered:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">misfireThreshold:</span> <span class="hljs-number">12000</span><br>            <span class="hljs-attr">clusterCheckinInterval:</span> <span class="hljs-number">15000</span><br>          <span class="hljs-attr">threadPool:</span><br>            <span class="hljs-attr">class:</span> <span class="hljs-string">org.quartz.simpl.SimpleThreadPool</span><br>            <span class="hljs-attr">threadCount:</span> <span class="hljs-number">10</span><br>            <span class="hljs-attr">threadPriority:</span> <span class="hljs-number">5</span><br>            <span class="hljs-attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> quartz定时任务管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 16:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;sys_quartz_job&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * id</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br>  <span class="hljs-keyword">private</span> String id;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建人</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String createBy;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>  <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>  <span class="hljs-keyword">private</span> Date createTime;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除状态</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Integer delFlag;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 修改人</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String updateBy;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 修改时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>  <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>  <span class="hljs-keyword">private</span> Date updateTime;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 任务类名</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String jobClassName;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * cron表达式</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String cronExpression;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 参数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String parameter;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 描述</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String description;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 状态 0正常 -1停止</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Integer status;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.gz.demoweb.quartz.entity.QuartzJob;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.quartz.SchedulerException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定时任务在线管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 16:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuartzJobService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;QuartzJob&gt; &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过类名寻找定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> jobClassName 类名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> List&lt;QuartzJob&gt;</span><br><span class="hljs-comment">   */</span><br>  List&lt;QuartzJob&gt; <span class="hljs-title function_">findByJobClassName</span><span class="hljs-params">(String jobClassName)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 保存定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveAndScheduleJob</span><span class="hljs-params">(QuartzJob quartzJob)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 编辑定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> SchedulerException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">editAndScheduleJob</span><span class="hljs-params">(QuartzJob quartzJob)</span> <span class="hljs-keyword">throws</span> SchedulerException;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteAndStopJob</span><span class="hljs-params">(QuartzJob quartzJob)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 恢复定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeJob</span><span class="hljs-params">(QuartzJob quartzJob)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 执行定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(QuartzJob quartzJob)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 暂停任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> SchedulerException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">(QuartzJob quartzJob)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>mapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.gz.demoweb.quartz.entity.QuartzJob;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定时任务在线管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 16:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuartzJobMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;QuartzJob&gt; &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据jobClassName查询</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> jobClassName 任务类名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  List&lt;QuartzJob&gt; <span class="hljs-title function_">findByJobClassName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;jobClassName&quot;)</span> String jobClassName)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.gz.demoweb.quartz.mapper.QuartzJobMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据jobClassName查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByJobClassName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.gz.demoweb.quartz.entity.QuartzJob&quot;</span>&gt;</span><br>select * from  sys_quartz_job  where job_class_name = #&#123;jobClassName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.gz.demoweb.entity.Result;<br><span class="hljs-keyword">import</span> com.gz.demoweb.quartz.entity.QuartzJob;<br><span class="hljs-keyword">import</span> com.gz.demoweb.quartz.service.QuartzJobService;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.quartz.SchedulerException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定时任务在线管理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 16:29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/sys/quartzJob&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzJobController</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> QuartzJobService quartzJobService;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分页列表查询</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageNo</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; queryPageList(<span class="hljs-meta">@RequestParam(name = &quot;pageNo&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNo,<br>      <span class="hljs-meta">@RequestParam(name = &quot;pageSize&quot;, defaultValue = &quot;10&quot;)</span> Integer pageSize) &#123;<br>    Page&lt;QuartzJob&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;QuartzJob&gt;(pageNo, pageSize);<br>    IPage&lt;QuartzJob&gt; pageList = quartzJobService.page(page);<br>    <span class="hljs-keyword">return</span> Result.ok(pageList);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; add(<span class="hljs-meta">@RequestBody</span> QuartzJob quartzJob) &#123;<br>    quartzJobService.saveAndScheduleJob(quartzJob);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;创建定时任务成功&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> quartzJob</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/edit&quot;, method = &#123;RequestMethod.PUT, RequestMethod.POST&#125;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; edit(<span class="hljs-meta">@RequestBody</span> QuartzJob quartzJob) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      quartzJobService.editAndScheduleJob(quartzJob);<br>    &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>      log.error(e.getMessage(), e);<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;更新定时任务失败!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;更新定时任务成功!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过id删除</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.DELETE)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; delete(<span class="hljs-meta">@RequestParam(name = &quot;id&quot;, required = true)</span> String id) &#123;<br>    <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">quartzJob</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>    <span class="hljs-keyword">if</span> (quartzJob == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;未找到对应实体&quot;</span>);<br>    &#125;<br>    quartzJobService.deleteAndStopJob(quartzJob);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;删除成功!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 批量删除</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/deleteBatch&quot;, method = RequestMethod.DELETE)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; deleteBatch(<span class="hljs-meta">@RequestParam(name = &quot;ids&quot;, required = true)</span> String ids) &#123;<br>    <span class="hljs-keyword">if</span> (ids == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(ids.trim())) &#123;<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;参数不识别！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (String id : ids.split(<span class="hljs-string">&quot;,&quot;</span>)) &#123;<br>      <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>      quartzJobService.deleteAndStopJob(job);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;删除定时任务成功!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 暂停定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(value = &quot;/pause&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;Object&gt; <span class="hljs-title function_">pauseJob</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;id&quot;)</span> String id)</span> &#123;<br>    <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>    <span class="hljs-keyword">if</span> (job == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;定时任务不存在！&quot;</span>);<br>    &#125;<br>    quartzJobService.pause(job);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;停止定时任务成功&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 启动定时任务</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(value = &quot;/resume&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;Object&gt; <span class="hljs-title function_">resumeJob</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;id&quot;)</span> String id)</span> &#123;<br>    <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>    <span class="hljs-keyword">if</span> (job == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;定时任务不存在！&quot;</span>);<br>    &#125;<br>    quartzJobService.resumeJob(job);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;启动定时任务成功&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过id查询</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/queryById&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; queryById(<span class="hljs-meta">@RequestParam(name = &quot;id&quot;, required = true)</span> String id) &#123;<br>    <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">quartzJob</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>    <span class="hljs-keyword">return</span> Result.ok(quartzJob);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 立即执行</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(&quot;/execute&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;?&gt; execute(<span class="hljs-meta">@RequestParam(name = &quot;id&quot;, required = true)</span> String id) &#123;<br>    <span class="hljs-type">QuartzJob</span> <span class="hljs-variable">quartzJob</span> <span class="hljs-operator">=</span> quartzJobService.getById(id);<br>    <span class="hljs-keyword">if</span> (quartzJob == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;未找到对应实体&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      quartzJobService.execute(quartzJob);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.info(<span class="hljs-string">&quot;定时任务 立即执行失败&gt;&gt;&quot;</span> + e.getMessage());<br>      <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;执行失败!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;执行成功!&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实战</p></blockquote><ol><li>不带参数的定时任务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 示例不带参定时任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 16:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">sampleJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>    System.out.println(<span class="hljs-string">&quot;测试不带参数定时任务: &quot;</span> + DateUtils.getTimestamp());<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>带参数的定时任务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.gz.demoweb.util.DateUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.quartz.Job;<br><span class="hljs-keyword">import</span> org.quartz.JobExecutionContext;<br><span class="hljs-keyword">import</span> org.quartz.JobExecutionException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 示例带参定时任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/25 17:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleParamJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 若参数变量名修改 QuartzJobController中也需对应修改</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String parameter;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(String parameter)</span> &#123;<br>    <span class="hljs-built_in">this</span>.parameter = parameter;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>    log.info(<span class="hljs-string">&quot; Job Execution key：&quot;</span> + jobExecutionContext.getJobDetail().getKey());<br>    log.info(String<br>        .format(<span class="hljs-string">&quot;welcome %s! Jeecg-Boot 带参数定时任务 SampleParamJob !   时间:&quot;</span> + DateUtils.now(),<br>            <span class="hljs-built_in">this</span>.parameter));<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二十一、SpringBoot配置动态定时任务"><a href="#二十一、SpringBoot配置动态定时任务" class="headerlink" title="二十一、SpringBoot配置动态定时任务"></a>二十一、SpringBoot配置动态定时任务</h2><blockquote><p>启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplication</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DemoApplication.class, args);<br>        System.out.println(<span class="hljs-string">&quot;(*^▽^*)启动成功!!!(〃&#x27;▽&#x27;〃)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>定时任务执行时间配置文件：task-config.ini</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">printTime.cron</span>=<span class="hljs-number">0</span>/<span class="hljs-number">10</span> * * * * ?<br></code></pre></td></tr></table></figure><blockquote><p>定时任务执行类：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.Trigger;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.TriggerContext;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.support.CronTrigger;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br> <br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Date;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SchedulingConfigurer</span> &#123;<br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String cron;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureTasks</span><span class="hljs-params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;<br>        <span class="hljs-comment">// 动态使用cron表达式设置循环间隔</span><br>        taskRegistrar.addTriggerTask(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                log.info(<span class="hljs-string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());<br>            &#125;<br>        &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trigger</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">nextExecutionTime</span><span class="hljs-params">(TriggerContext triggerContext)</span> &#123;<br>                <span class="hljs-comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span><br>                <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">cronTrigger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CronTrigger</span>(cron);<br>                <span class="hljs-type">Date</span> <span class="hljs-variable">nextExecutionTime</span> <span class="hljs-operator">=</span> cronTrigger.nextExecutionTime(triggerContext);<br>                <span class="hljs-keyword">return</span> nextExecutionTime;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写一个接口，使得可以通过调用接口动态修改该定时任务的执行时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wl.demo.task.ScheduleTask;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ScheduleTask scheduleTask;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestController</span><span class="hljs-params">(ScheduleTask scheduleTask)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scheduleTask = scheduleTask;<br>    &#125;<br> <br>    <span class="hljs-meta">@GetMapping(&quot;/updateCron&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateCron</span><span class="hljs-params">(String cron)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;new cron :&#123;&#125;&quot;</span>, cron);<br>        scheduleTask.setCron(cron);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十二-、pagehelper分页"><a href="#二十二-、pagehelper分页" class="headerlink" title="二十二 、pagehelper分页"></a>二十二 、pagehelper分页</h2><blockquote><p>导入依赖</p></blockquote><p>有可能会出现依赖循环问题, 需要改下版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 分页插件 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>配置修改</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-comment">#指定数据库，不指定的话会默认自动检测数据库类型</span><br>  <span class="hljs-attr">helper-dialect:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-comment">#是否启用分页合理化。如果启用，当传入的当前页&lt;1时，会自动查询第一页的数据</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页</span><br>  <span class="hljs-attr">support-methods-arguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#用于从对象中根据属性名取值</span><br>  <span class="hljs-attr">params:</span> <span class="hljs-string">count=countsql</span><br></code></pre></td></tr></table></figure><blockquote><p>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Page&lt;Brand&gt; <span class="hljs-title function_">selectBrandByPage</span><span class="hljs-params">(BrandConditionDTO brandConditionDTO)</span> &#123;<br>    PageHelper.startPage(brandConditionDTO.getPageNo(), brandConditionDTO.getPageSize());<br>    List&lt;Brand&gt; brands = brandMapper.findBrandByPage(brandConditionDTO.getBrandName());<br>    PageInfo&lt;Brand&gt; pageInfo = PageInfo.of(brands);<br>    <span class="hljs-keyword">return</span> PageConverter.convert2Page(pageInfo);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">关于PageInfo这个类，源码如下：<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-comment">//当前页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageNum;<br><span class="hljs-comment">//每页的数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br><span class="hljs-comment">//当前页的数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">//由于startRow 和endRow 不常用，这里说个具体的用法</span><br><span class="hljs-comment">//可以在页面中&quot;显示startRow 到endRow 共size 条数据&quot;</span><br><span class="hljs-comment">//当前页面第一个元素在数据库中的行号</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> startRow;<br><span class="hljs-comment">//当前页面最后一个元素在数据库中的行号</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> endRow;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> total;<br><span class="hljs-comment">//总页数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pages;<br><span class="hljs-comment">//结果集</span><br><span class="hljs-keyword">private</span> List list;<br><span class="hljs-comment">//前一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> prePage;<br><span class="hljs-comment">//下一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nextPage;<br><span class="hljs-comment">//是否为第一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isFirstPage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//是否为最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLastPage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//是否有前一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasPreviousPage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//是否有下一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasNextPage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//导航页码数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> navigatePages;<br><span class="hljs-comment">//所有导航页号</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] navigatepageNums;<br><span class="hljs-comment">//导航条上的第一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> navigateFirstPage;<br><span class="hljs-comment">//导航条上的最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> navigateLastPage;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十三、oss对象存储"><a href="#二十三、oss对象存储" class="headerlink" title="二十三、oss对象存储"></a>二十三、oss对象存储</h2><blockquote><p>专业名词术语</p></blockquote><table><thead><tr><th align="center">存储空间</th><th>Bucket</th><th>存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。</th></tr></thead><tbody><tr><td align="center">对象&#x2F;文件</td><td>Object</td><td>对象是 OSS 存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。</td></tr><tr><td align="center">地域</td><td>Region</td><td>地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请查看<a href="https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db">OSS已经开通的Region</a>。</td></tr><tr><td align="center">访问域名</td><td>Endpoint</td><td>Endpoint 表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见<a href="https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db">各个Region对应的Endpoint</a>。</td></tr><tr><td align="center">访问密钥</td><td>AccessKey</td><td>AccessKey，简称 AK，指的是访问身份验证中用到的AccessKeyId 和AccessKeySecret。OSS通过使用AccessKeyId 和AccessKeySecret对称加密的方法来验证某个请求的发送者身份。AccessKeyId用于标识用户，AccessKeySecret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，其中AccessKeySecret 必须保密。</td></tr></tbody></table><blockquote><p>使用步骤</p></blockquote><ol><li>创建bucket</li></ol><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013212906266.png" alt="image-20221013212906266"></p><ol start="2"><li>配置accessKey</li></ol><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013213434850.png" alt="image-20221013213434850"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013213509562.png" alt="image-20221013213509562"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013213654484.png" alt="image-20221013213654484"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013213736635.png" alt="image-20221013213736635"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013213930585.png" alt="image-20221013213930585"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221013214055547.png" alt="image-20221013214055547"></p><blockquote><p>跨域配置</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221016144731903.png" alt="image-20221016144731903"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221016144829546.png" alt="image-20221016144829546"></p><blockquote><p>oss工具类</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阿里云-对象存储服务（OSS） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- joda--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常量配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 符号常量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 15:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SymbolConstants</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">COLON</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;:&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">COMMA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SPOT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SLASH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKSLASH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">UNDERLINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">LINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">PERCENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DOUBLE_PERCENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%%&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">STAR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUESTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;?&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">EQUAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;=&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">COMBINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&amp;&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NEW_LINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;   &quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">STOP_SIGN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;、&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NEXT_LINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件类型枚举:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 图片上传类型枚举</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 15:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FileType</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 图片jpg</span><br><span class="hljs-comment">   */</span><br>  JPGANDPNG(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * excel</span><br><span class="hljs-comment">   */</span><br>  EXCEL(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;xls&quot;</span>, <span class="hljs-string">&quot;application/x-xls&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;xls&quot;</span>, <span class="hljs-string">&quot;xlsx&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * word</span><br><span class="hljs-comment">   */</span><br>  WORD(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;application/msword&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;docx&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * pdf</span><br><span class="hljs-comment">   */</span><br>  PDF(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;pdf&quot;</span>, <span class="hljs-string">&quot;application/pdf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;pdf&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * ppt</span><br><span class="hljs-comment">   */</span><br>  PPT(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;ppt&quot;</span>, <span class="hljs-string">&quot;application/x-ppt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;ppt&quot;</span>, <span class="hljs-string">&quot;pptx&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * other</span><br><span class="hljs-comment">   */</span><br>  OTHER(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;other&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;&quot;</span>&#125;),<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * text</span><br><span class="hljs-comment">   */</span><br>  TEXT(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;txt&quot;</span>&#125;),<br>  ;<br><br>  <span class="hljs-keyword">private</span> Integer code;<br>  <span class="hljs-keyword">private</span> String desc;<br>  <span class="hljs-keyword">private</span> String contentType;<br>  <span class="hljs-keyword">private</span> String[] suffix;<br><br><br>  FileType(Integer code, String desc, String contentType, String[] suffix) &#123;<br>    <span class="hljs-built_in">this</span>.code = code;<br>    <span class="hljs-built_in">this</span>.desc = desc;<br>    <span class="hljs-built_in">this</span>.contentType = contentType;<br>    <span class="hljs-built_in">this</span>.suffix = suffix;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 枚举对象查询</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code 对应的序号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 图片上传类型</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileType <span class="hljs-title function_">getFileType</span><span class="hljs-params">(Integer code)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(code)) &#123;<br>      FileType[] values = FileType.values();<br>      <span class="hljs-keyword">for</span> (FileType item : values) &#123;<br>        <span class="hljs-keyword">if</span> (item.getCode().equals(code)) &#123;<br>          <span class="hljs-keyword">return</span> item;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OTHER;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 校验文件格式</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileSuffix 文件后缀</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 图片上传类型</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileType <span class="hljs-title function_">getUploadType</span><span class="hljs-params">(String fileSuffix)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(fileSuffix)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//将文件格式转为小写，方便比较</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> fileSuffix.toLowerCase();<br>    FileType[] values = FileType.values();<br>    <span class="hljs-comment">//遍历判断该后缀是否支持</span><br>    <span class="hljs-keyword">for</span> (FileType item : values) &#123;<br>      String[] suff = item.getSuffix();<br>      <span class="hljs-keyword">for</span> (String str : suff) &#123;<br>        <span class="hljs-keyword">if</span> (str.equals(suffix)) &#123;<br>          <span class="hljs-keyword">return</span> item;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断文件类型是office文档</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code 类型序号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否是office文档</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOfficeDocument</span><span class="hljs-params">(Integer code)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(code)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> WORD.getCode().equals(code) ||<br>        EXCEL.getCode().equals(code) ||<br>        PPT.getCode().equals(code);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断文件类型是office文档</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileType 文件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否是office文档</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOfficeDocument</span><span class="hljs-params">(FileType fileType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(fileType)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> WORD.equals(fileType) ||<br>        EXCEL.equals(fileType) ||<br>        PPT.equals(fileType);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断需要转pdf的文件格式</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileType 文件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否可以转pdf</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needToPdf</span><span class="hljs-params">(FileType fileType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(fileType)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> WORD.equals(fileType) ||<br>        EXCEL.equals(fileType) ||<br>        PPT.equals(fileType) ||<br>        TEXT.equals(fileType);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断文件类型是否是excel</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code 文件序号</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否是excel</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExcel</span><span class="hljs-params">(Integer code)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(code)) &#123;<br>      <span class="hljs-keyword">return</span> EXCEL.getCode().equals(code);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据文件名称获取文件类型</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> name 文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件类型</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileType <span class="hljs-title function_">getUploadTypeByFileName</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//将文件名转为小写，方便比较</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> name.toLowerCase();<br>    FileType[] values = FileType.values();<br>    <span class="hljs-comment">//便利</span><br>    <span class="hljs-keyword">for</span> (FileType item : values) &#123;<br>      String[] suff = item.getSuffix();<br>      <span class="hljs-comment">//遍历</span><br>      <span class="hljs-keyword">for</span> (String str : suff) &#123;<br>        <span class="hljs-keyword">if</span> (name.contains(str)) &#123;<br>          <span class="hljs-keyword">return</span> item;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断是否为图片</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileType 文件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否是图片</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isImage</span><span class="hljs-params">(FileType fileType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!Objects.isNull(fileType)) &#123;<br>      <span class="hljs-keyword">if</span> (fileType.getCode().equals(FileType.JPGANDPNG.getCode())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断是否为文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileType 文件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否为文件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFile</span><span class="hljs-params">(FileType fileType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!Objects.isNull(fileType)) &#123;<br>      <span class="hljs-keyword">if</span> (fileType.getCode().equals(FileType.WORD.getCode()) ||<br>          fileType.getCode().equals(FileType.PDF.getCode()) ||<br>          fileType.getCode().equals(FileType.EXCEL.getCode())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件后缀</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> name 文件全名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件后缀</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">suffix</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">return</span> name.substring(index + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>oss配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 阿里云oss配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 15:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOssProperties</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 地域</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ENDPOINT;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * AccessKey</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * accessKeySecret</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_SECRET;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * bucketName</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String BUCKET_NAME;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 文件存储路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_DIR_LOCATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;file/&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * dddd 过期时间，单位小时</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXPIRATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 文件过期时间：10年</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HUNDRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 0 不可编辑 1.可编辑</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREVIEW_DOC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;imm/previewdoc,copy_0&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 默认最大大小 50M</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">DEFAULT_MAX_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 默认的文件名最大长度 100</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_FILE_NAME_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * OSS默认的域名</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DOMAIN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://oss-for-zhgd-file.oss-cn-shenzhen.aliyuncs.com/&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 预览用域名，需要在OSS提前配置，用这个域名替换默认的域名就可以预览</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Second_Domain</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://pview.zghxsjy.com/&quot;</span>;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;oss.endPoint&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setENDPOINT</span><span class="hljs-params">(String ENDPOINT)</span> &#123;<br>    AliOssProperties.ENDPOINT = ENDPOINT;<br>  &#125;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;oss.accessKeyId&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccessKeyId</span><span class="hljs-params">(String accessKeyId)</span> &#123;<br>    ACCESS_KEY_ID = accessKeyId;<br>  &#125;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;oss.accessKeySecret&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccessKeySecret</span><span class="hljs-params">(String accessKeySecret)</span> &#123;<br>    ACCESS_KEY_SECRET = accessKeySecret;<br>  &#125;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;oss.bucketName&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBucketName</span><span class="hljs-params">(String bucketName)</span> &#123;<br>    BUCKET_NAME = bucketName;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">oss:</span><br>  <span class="hljs-attr">endPoint:</span> <span class="hljs-string">oss-cn-chengdu</span><br>  <span class="hljs-attr">bucketName:</span> <span class="hljs-string">gulimall-test-gz</span><br>  <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI5tAAwrmKqPqHQcpoGHzZ</span><br>  <span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">JpbNZauHLkk5nY5MiXdIqViXP0iC94</span><br></code></pre></td></tr></table></figure><p>文件返回信息封装:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 集采OSS云服务图片上传返回类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 14:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@ApiModel(&quot;上传文件返回信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCloudOss</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">4492385715419651734L</span>;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;返回的url&quot;)</span><br>  <span class="hljs-keyword">private</span> String url;<br><br>  <span class="hljs-meta">@ApiModelProperty(&quot;文件在云存储上的key&quot;)</span><br>  <span class="hljs-keyword">private</span> String objectKey;<br><br>  <span class="hljs-meta">@ApiModelProperty(&quot;bucket&quot;)</span><br>  <span class="hljs-keyword">private</span> String bucketName;<br><br>  <span class="hljs-meta">@ApiModelProperty(&quot;fileName&quot;)</span><br>  <span class="hljs-keyword">private</span> String fileName;<br>&#125;<br></code></pre></td></tr></table></figure><p>上传文件命名处理器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 命名处理抽象类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 14:56</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractNameHandle</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建名称+路径</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file 上传文件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 路径名称</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">createName</span><span class="hljs-params">(MultipartFile file)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.gz.mall.constant.SymbolConstants;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 通用命名处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 15:27</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonNameHandle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractNameHandle</span> &#123;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createName</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/images/realtime/&quot;</span> + path + SymbolConstants.BACKSLASH + file.getOriginalFilename();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 文件名称命名器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 14:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileNameHandle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractNameHandle</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createName</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>    <span class="hljs-keyword">return</span> AliOssProperties.FILE_DIR_LOCATION + path + SymbolConstants.BACKSLASH + file<br>        .getOriginalFilename();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传处理器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.gz.mall.constant.FileType;<br><span class="hljs-keyword">import</span> com.gz.mall.entity.FileCloudOss;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 文件上传处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/13 22:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFileHandle</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取阿里云实例对象</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 阿里云实例对象</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractFileHandle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> OssFileHandle.getInstance();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 本地图片上传</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file 上传文件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件返回信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> FileCloudOss <span class="hljs-title function_">uploadLocal</span><span class="hljs-params">(MultipartFile file)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 本地图片上传</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file 上传文件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件返回信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">uploadLocalFile</span><span class="hljs-params">(MultipartFile file, AbstractNameHandle nameHandle)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 文件下载</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> url              文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> commonNameHandle 通用命名处理器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 输入流</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> InputStream <span class="hljs-title function_">downLoad</span><span class="hljs-params">(String url, CommonNameHandle commonNameHandle)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件预览地址</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bucketName 存储容器名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileName   上传的文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileType   文件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 文件预览地址</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getPreviewUrl</span><span class="hljs-params">(String bucketName, String fileName, FileType fileType)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取Oss文件名称</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file       文件上传对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> nameHandle 命名处理器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Oss文件名称</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getOssFileName</span><span class="hljs-params">(MultipartFile file, AbstractNameHandle nameHandle)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aliyun.oss.ClientException;<br><span class="hljs-keyword">import</span> com.aliyun.oss.HttpMethod;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSException;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.GeneratePresignedUrlRequest;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.OSSObject;<br><span class="hljs-keyword">import</span> com.gz.mall.constant.AliOssProperties;<br><span class="hljs-keyword">import</span> com.gz.mall.constant.FileType;<br><span class="hljs-keyword">import</span> com.gz.mall.entity.FileCloudOss;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.joda.time.DateTime;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> oss文件上传处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 15:31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssFileHandle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFileHandle</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * oss 客户端</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> OSS ossClient;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化oss客户端</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">OssFileHandle</span><span class="hljs-params">()</span> &#123;<br>    ossClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(AliOssProperties.ENDPOINT,<br>        AliOssProperties.ACCESS_KEY_ID,<br>        AliOssProperties.ACCESS_KEY_SECRET);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取oss实例对象</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> oss实例对象</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OssFileHandle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OssFileHandle</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> FileCloudOss <span class="hljs-title function_">uploadLocal</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">ossName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + <span class="hljs-string">&quot;-&quot;</span> + file.getOriginalFilename();<br>      <span class="hljs-comment">//上传</span><br>      ossClient.putObject(AliOssProperties.BUCKET_NAME, ossName, inputStream);<br>      <span class="hljs-comment">//返回文件对象</span><br>      <span class="hljs-type">FileCloudOss</span> <span class="hljs-variable">fileCloudOss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileCloudOss</span>();<br>      fileCloudOss<br>          .setBucketName(AliOssProperties.BUCKET_NAME)<br>          .setObjectKey(ossName)<br>          .setFileName(file.getOriginalFilename())<br>          <span class="hljs-comment">//上传成功 获取访问的url</span><br>          .setUrl(getPreviewUrl(AliOssProperties.BUCKET_NAME, ossName,<br>              FileType.JPGANDPNG));<br>      ossClient.shutdown();<br>      <span class="hljs-keyword">return</span> fileCloudOss;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException | OSSException | ClientException ioException) &#123;<br>      log.error(ioException.toString());<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadLocalFile</span><span class="hljs-params">(MultipartFile file, AbstractNameHandle nameHandle)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (file.getSize() &gt; AliOssProperties.DEFAULT_MAX_SIZE) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传文件格式或者大小不正确&quot;</span>;<br>      &#125;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">fileSuffix</span> <span class="hljs-operator">=</span> FileType.suffix(file.getOriginalFilename());<br>      <span class="hljs-type">FileType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> FileType.getUploadType(fileSuffix);<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> type.getCode();<br>      <span class="hljs-keyword">if</span> (FileType.isExcel(code) || FileType.PDF.getCode().equals(code) || FileType.WORD.getCode()<br>          .equals(code)) &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ossName</span> <span class="hljs-operator">=</span> getOssFileName(file, nameHandle);<br>        ossClient.putObject(AliOssProperties.BUCKET_NAME, ossName, inputStream);<br>        <span class="hljs-keyword">return</span> getPreviewUrl(AliOssProperties.BUCKET_NAME, ossName, FileType.JPGANDPNG);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传文件格式或者大小不正确&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException | OSSException | ClientException ioException) &#123;<br>      log.error(ioException.toString());<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">downLoad</span><span class="hljs-params">(String uri, CommonNameHandle commonNameHandle)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(uri)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">OSSObject</span> <span class="hljs-variable">ossObj</span> <span class="hljs-operator">=</span> ossClient.getObject(AliOssProperties.BUCKET_NAME, uri);<br>    <span class="hljs-keyword">return</span> ossObj.getObjectContent();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPreviewUrl</span><span class="hljs-params">(String bucketName, String fileName, FileType fileType)</span> &#123;<br>    <span class="hljs-comment">// 填写签名URL的过期时间。2小时过期</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> DateTime.now().plusHours(AliOssProperties.EXPIRATION).toDate();<br>    <span class="hljs-comment">//如果是图片，将时间拉长</span><br>    <span class="hljs-keyword">if</span> (FileType.isImage(fileType)) &#123;<br>      <span class="hljs-comment">// 10年过期</span><br>      expiration = DateTime.now().plusYears(AliOssProperties.HUNDRED).toDate();<br>    &#125;<br>    <span class="hljs-comment">// 通过HTTP GET请求生成签名URL。</span><br>    <span class="hljs-type">GeneratePresignedUrlRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneratePresignedUrlRequest</span>(bucketName, fileName,<br>        HttpMethod.GET);<br>    <span class="hljs-comment">//如果是图片直接返回url就可以预览</span><br>    <span class="hljs-keyword">if</span> (FileType.isImage(fileType)) &#123;<br>      <span class="hljs-comment">// 设置样式，样式中包含文档预览参数。</span><br>      request.setProcess(AliOssProperties.PREVIEW_DOC);<br>    &#125;<br>    request.setExpiration(expiration);<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> ossClient.generatePresignedUrl(request);<br>    <span class="hljs-comment">// 关闭OSSClient。</span><br>    ossClient.shutdown();<br>    <span class="hljs-comment">//默认的浏览地址 该地址只能下载 不能预览 需要更换为二级域名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">defaultUrl</span> <span class="hljs-operator">=</span> url.toString();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">replace</span> <span class="hljs-operator">=</span> defaultUrl<br>        .replace(AliOssProperties.DEFAULT_DOMAIN, AliOssProperties.Second_Domain);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">replace1</span> <span class="hljs-operator">=</span> replace.replace(<span class="hljs-string">&quot;https://&quot;</span>, <span class="hljs-string">&quot;http://&quot;</span>);<br>    <span class="hljs-comment">//保留简短的文件预览地址去除?Expires 以及以后的字符串</span><br>    <span class="hljs-comment">// 把http://pview.zghxsjy.com/7bc7c9dd-e873-442b-9b81-5f01cc7551d2-444444.jpg?Expires=1976949930&amp;OSSAccessKeyId=LTAI5tEXqSc4Z1ezE45rnq8x&amp;Signature=BSaj1kWxh%2FcxhPJ11vo%2FY2cdgi4%3D</span><br>    <span class="hljs-comment">// 变为http://pview.zghxsjy.com/7bc7c9dd-e873-442b-9b81-5f01cc7551d2-444444.jpg进行存储</span><br>    replace1 = replace1.substring(<span class="hljs-number">0</span>, replace1.indexOf(<span class="hljs-string">&quot;?Expires&quot;</span>));<br>    <span class="hljs-keyword">return</span> replace1;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOssFileName</span><span class="hljs-params">(MultipartFile file, AbstractNameHandle nameHandle)</span> &#123;<br>    <span class="hljs-comment">//没有命名处理器，使用默认的文件名储存 存在bucket的img目录下</span><br>    <span class="hljs-keyword">if</span> (Objects.isNull(nameHandle)) &#123;<br>      <span class="hljs-keyword">return</span> AliOssProperties.FILE_DIR_LOCATION + UUID.randomUUID().toString() + <span class="hljs-string">&quot;_&quot;</span><br>          + file<br>          .getName();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//在img目录下创建当日日期命名的文件夹，并上传到该文件夹</span><br>      <span class="hljs-keyword">return</span> nameHandle.createName(file);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>相关接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 文件上传服务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 17:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UploadService</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传图片</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> multipartFile 文件上传对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 上传文件返回信息</span><br><span class="hljs-comment">   */</span><br>  FileCloudOss <span class="hljs-title function_">uploadImg</span><span class="hljs-params">(MultipartFile multipartFile)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 上传pdf</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> multipartFile 文件上传对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 上传文件返回信息</span><br><span class="hljs-comment">   */</span><br>  FileCloudOss <span class="hljs-title function_">uploadPdf</span><span class="hljs-params">(MultipartFile multipartFile)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 下载文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileUrl  文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response 响应流</span><br><span class="hljs-comment">   */</span><br>  InputStream <span class="hljs-title function_">download</span><span class="hljs-params">(String fileUrl, HttpServletResponse response)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 文件上传实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/14 17:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UploadService</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> FileCloudOss <span class="hljs-title function_">uploadImg</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br>    <span class="hljs-comment">//判断是否为图片格式</span><br>    <span class="hljs-type">FileType</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> FileType.getUploadTypeByFileName(multipartFile.getOriginalFilename());<br>    <span class="hljs-keyword">if</span> (Objects.isNull(fileType) || !fileType.getCode().equals(FileType.JPGANDPNG.getCode())) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.IMAGE_FORMAT_FAIL);<br>    &#125;<br>    <span class="hljs-comment">//判断文件的大小是否大于5M</span><br>    <span class="hljs-keyword">if</span> (multipartFile.getSize() &gt; FileSizeEnum.MB.getSize() * <span class="hljs-number">5L</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.FILE_IS_TOO_LARGE);<br>    &#125;<br>    <span class="hljs-comment">//图片上传逻辑</span><br>    <span class="hljs-keyword">return</span> AbstractFileHandle.getInstance()<br>        .uploadLocal(multipartFile);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> FileCloudOss <span class="hljs-title function_">uploadPdf</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br>    <span class="hljs-comment">//判断是否为图片格式</span><br>    <span class="hljs-type">FileType</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> FileType.getUploadTypeByFileName(multipartFile.getOriginalFilename());<br>    <span class="hljs-keyword">if</span> (Objects.isNull(fileType) || !fileType.getCode().equals(FileType.PDF.getCode())) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.IMAGE_FORMAT_FAIL);<br>    &#125;<br>    <span class="hljs-comment">//判断文件的大小是否大于50M</span><br>    <span class="hljs-keyword">if</span> (multipartFile.getSize() &gt; FileSizeEnum.MB.getSize() * <span class="hljs-number">5L</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ExceptionCodeEnum.FILE_IS_TOO_LARGE);<br>    &#125;<br>    <span class="hljs-comment">//图片上传逻辑</span><br>    <span class="hljs-keyword">return</span> AbstractFileHandle.getInstance()<br>        .uploadLocal(multipartFile);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">download</span><span class="hljs-params">(String fileUrl, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-keyword">return</span> AbstractFileHandle.getInstance().downLoad(fileUrl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonNameHandle</span>());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/licenseImgs&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(value = &quot;上传相关接口(oss)&quot;, tags = &quot;图片上传接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> UploadService uploadService;<br><br>  <span class="hljs-meta">@PostMapping(&quot;/uploadSingleImg&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;图片上传&quot;, notes = &quot;图片上传&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;FileCloudOss&gt; <span class="hljs-title function_">uploadImg</span><span class="hljs-params">(</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile)</span> &#123;<br>    <span class="hljs-type">FileCloudOss</span> <span class="hljs-variable">fileCloudDTO</span> <span class="hljs-operator">=</span> uploadService.uploadImg(multipartFile);<br>    <span class="hljs-keyword">return</span> Result.success(fileCloudDTO);<br>  &#125;<br><br>  <span class="hljs-meta">@PostMapping(&quot;/uploadBatchImgs&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;图片上传批量&quot;, notes = &quot;图片上传&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;List&lt;FileCloudOss&gt;&gt; <span class="hljs-title function_">uploadImgs</span><span class="hljs-params">(</span><br><span class="hljs-params">      <span class="hljs-meta">@RequestPart(value = &quot;file&quot;, required = false)</span> MultipartFile[] multipartFiles)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(multipartFiles) || multipartFiles.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    ArrayList&lt;FileCloudOss&gt; fileCloudDTOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (MultipartFile multipartFile : multipartFiles) &#123;<br>      <span class="hljs-type">FileCloudOss</span> <span class="hljs-variable">fileCloudDTO</span> <span class="hljs-operator">=</span> uploadService.uploadImg(multipartFile);<br>      fileCloudDTOS.add(fileCloudDTO);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.success(fileCloudDTOS);<br>  &#125;<br><br>  <span class="hljs-meta">@PostMapping(&quot;/uploadPdf&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;PDF文件上传&quot;, notes = &quot;文件上传&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;FileCloudOss&gt; <span class="hljs-title function_">uploadPdf</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile)</span> &#123;<br>    <span class="hljs-type">FileCloudOss</span> <span class="hljs-variable">fileCloudDTO</span> <span class="hljs-operator">=</span> uploadService.uploadPdf(multipartFile);<br>    fileCloudDTO.setFileName(multipartFile.getOriginalFilename());<br>    <span class="hljs-keyword">return</span> Result.success(fileCloudDTO);<br>  &#125;<br><br>  <span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;文件下载&quot;, notes = &quot;文件下载&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String fileUrl, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> uploadService.download(fileUrl, response);<br>      <span class="hljs-comment">// 配置文件下载</span><br>      response.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>      response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>      <span class="hljs-comment">// 下载文件能正常显示中文</span><br>      response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder<br>          .encode(fileUrl, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>      <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>      <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> ((len = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>        os.write(b, <span class="hljs-number">0</span>, len);<br>      &#125;<br>      in.close();<br>      os.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(<span class="hljs-string">&quot;文件下载失败&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@GetMapping(value = &quot;/preview&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;PDF文件预览&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reviewPriceData</span><span class="hljs-params">(String pdfPath,</span><br><span class="hljs-params">      HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 获取pdf文件路径（包括文件名）</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> uploadService.download(pdfPath, response);<br>    <span class="hljs-comment">// 设置输出的格式</span><br>    response.setContentType(<span class="hljs-string">&quot;application/pdf&quot;</span>);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span> ((count = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>      outputStream.write(buffer, <span class="hljs-number">0</span>, count);<br>    &#125;<br>    outputStream.flush();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二十四、redis工具类"><a href="#二十四、redis工具类" class="headerlink" title="二十四、redis工具类"></a>二十四、redis工具类</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>yaml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># Redis服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">19.1</span><span class="hljs-number">.5</span><span class="hljs-number">.11</span><br>    <span class="hljs-comment"># Redis服务器端口号</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment"># 使用的数据库索引，默认是0</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 连接超时时间</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">1800000</span><br>     <span class="hljs-comment"># 设置密码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 最大阻塞等待时间，负数表示没有限制</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 连接池中的最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 连接池中最大连接数，负数表示没有限制</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><blockquote><p>redis序列化配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * redis配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022年4月22日</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>  <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>    RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();<br>    template.setConnectionFactory(factory);<br>    <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(<br>        Object.class);<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>    om.registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>());<br>    jackson2JsonRedisSerializer.setObjectMapper(om);<br>    <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br>    <span class="hljs-comment">// key采用String的序列化方式</span><br>    template.setKeySerializer(stringRedisSerializer);<br><br>    <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>    template.setHashKeySerializer(stringRedisSerializer);<br><br>    <span class="hljs-comment">// value序列化方式采用jackson</span><br>    template.setValueSerializer(jackson2JsonRedisSerializer);<br><br>    <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>    template.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>    template.afterPropertiesSet();<br>    <span class="hljs-keyword">return</span> template;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>redis工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.BooleanUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.dao.DataAccessException;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnection;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisStringCommands;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.BoundListOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisCallback;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.types.Expiration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> redis工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/11/08 13:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtils</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MUTEX_LOCK_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mutex:key:&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">CACHE_NULL_TTL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//string 类型操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置新的value</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key   redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time  过期时间</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> unit  时间单位</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>    redisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置新value并返回之前的值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 之前存储的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">set</span><span class="hljs-params">(String k, Object value)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> redisTemplate.boundValueOps(k).getAndSet(JSONUtil.toJsonStr(value));<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> == o ? <span class="hljs-literal">null</span> : (T) o;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置新value并返回之前的值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time  设置过期时间，默认毫秒</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 之前存储的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">set</span><span class="hljs-params">(String k, T value, <span class="hljs-type">long</span> time)</span> &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> set(k, value);<br>    expire(k, time);<br>    <span class="hljs-keyword">return</span> pre;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置新value并返回之前的值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k        redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value    key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time     设置过期时间</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeUnit 过期时间对应的时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 之前存储的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">set</span><span class="hljs-params">(String k, Object value, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> set(k, value);<br>    expire(k, time, timeUnit);<br>    <span class="hljs-keyword">return</span> pre;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据key获取值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 对应的value</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">get</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-keyword">return</span> (T) redisTemplate.boundValueOps(k).get();<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//list 类型操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存储一个新的list，如果旧key存在，则会删除旧key</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lset</span><span class="hljs-params">(String k, List value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (hasKey(k)) &#123;<br>      deleteKey(k);<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundListOps(k).rightPushAll(value.toArray());<br>    <span class="hljs-keyword">return</span> Objects.equals(count, Long.valueOf(value.size()));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存储一个新的list，如果旧key存在，则会删除旧key</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time  过期时间，默认毫秒</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lset</span><span class="hljs-params">(String k, List value, <span class="hljs-type">long</span> time)</span> &#123;<br>    <span class="hljs-keyword">return</span> lset(k, value, time, TimeUnit.MILLISECONDS);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存储一个新的list，如果旧key存在，则会删除旧key</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k        redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value    key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time     过期时间</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeUnit 过期时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lset</span><span class="hljs-params">(String k, List value, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> lset(k, value);<br>    <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>      redisTemplate.expire(k, time, timeUnit);<br>    &#125;<br>    <span class="hljs-keyword">return</span> isSuccess;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 为已有的list追加新值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#addAll(Collection)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#add(Object)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">ladd</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">preSize</span> <span class="hljs-operator">=</span> lsize(k);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundListOps(k).rightPushAll(value);<br>    <span class="hljs-keyword">return</span> Objects.equals(count, Long.valueOf(value.length + preSize));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取list的所有value</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> list value</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">lget</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.boundListOps(k).range(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 由于list存在重复元素，该方法从左往右移除第一个匹配的value</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 要移除的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#remove(Object)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#removeAll(Collection)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lremove</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-type">BoundListOperations</span> <span class="hljs-variable">operations</span> <span class="hljs-operator">=</span> redisTemplate.boundListOps(k);<br>    <span class="hljs-keyword">for</span> (Object o : value) &#123;<br>      operations.remove(<span class="hljs-number">1</span>, o);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 从左往右移除list所有匹配的value</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 要移除的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否成功（true/false)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#remove(Object)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> List#removeAll(Collection)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lremoveAll</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-type">BoundListOperations</span> <span class="hljs-variable">operations</span> <span class="hljs-operator">=</span> redisTemplate.boundListOps(k);<br>    <span class="hljs-keyword">for</span> (Object o : value) &#123;<br>      operations.remove(<span class="hljs-number">0</span>, o);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回list size</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> list size</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lsize</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> redisTemplate.boundListOps(k).size();<br>    <span class="hljs-keyword">return</span> size != <span class="hljs-literal">null</span> ? size.intValue() : <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//map 类型操作 redis hash</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 为map增加一个key-value组合</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key   map的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value map的value</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Map#put(Object, Object)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hput</span><span class="hljs-params">(String k, Object key, Object value)</span> &#123;<br>    redisTemplate.boundHashOps(k).put(key, value);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 增加一个map,并设置时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key   map的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value map的value</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Map#put(Object, Object)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hput</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>    redisTemplate.opsForHash().putAll(key, map);<br>    <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>      expire(key, time);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 增加一个map</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k   redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> map 增加的map</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Map#putAll(Map)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hput</span><span class="hljs-params">(String k, Map map)</span> &#123;<br>    redisTemplate.boundHashOps(k).putAll(map);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取map里指定key的值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k   redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key map中的某一个key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">hget</span><span class="hljs-params">(String k, Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> (T) redisTemplate.boundHashOps(k).get(key);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取map所有值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> redis map</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T, R&gt; Map&lt;T, R&gt; <span class="hljs-title function_">hEntrys</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.boundHashOps(k).entries();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除map中指定的key</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k   redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key map中的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 成功删除的个数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Map#remove(Object)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hdel</span><span class="hljs-params">(String k, Object... key)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundHashOps(k).delete(key);<br>    <span class="hljs-keyword">return</span> count == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : count.intValue();<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//set 类型操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置一个新set,如果旧set存在，先移除</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value set集合值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 添加成功的数量，不包含由于重复值导致已忽略的</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sset</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (hasKey(k)) &#123;<br>      deleteKey(k);<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundSetOps(k).add(value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> == count ? <span class="hljs-number">0</span> : count.intValue();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置一个新set,如果旧set存在，先移除</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time  过期时间，默认毫秒</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value set集合值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 添加成功的数量，不包含由于重复值导致已忽略的</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sset</span><span class="hljs-params">(String k, <span class="hljs-type">long</span> time, Object... value)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sset(k, value);<br>    expire(k, time);<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置一个新set,如果旧set存在，先移除</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k        redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time     过期时间</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value    set集合值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeUnit 过期时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 添加成功的数量，不包含由于重复值导致已忽略的</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sset</span><span class="hljs-params">(String k, <span class="hljs-type">long</span> time, TimeUnit timeUnit, Object... value)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sset(k, value);<br>    expire(k, time, timeUnit);<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 为已存在的set追加值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 要追加的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 添加成功的数量，不包含由于重复值导致已忽略的</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Set#addAll(Collection)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Set#add(Object)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sadd</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundSetOps(k).add(value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> == count ? <span class="hljs-number">0</span> : count.intValue();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取set集合</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="hljs-title function_">sget</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.boundSetOps(k).members();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 移除set中指定的值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k     redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 要移除的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 成功移除的数量</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Set#removeAll(Collection)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> Set#remove(Object)</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sremove</span><span class="hljs-params">(String k, Object... value)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.boundSetOps(k).remove(value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> == count ? <span class="hljs-number">0</span> : count.intValue();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回set size</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> k redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> set size</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ssize</span><span class="hljs-params">(String k)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> redisTemplate.boundSetOps(k).size();<br>    <span class="hljs-keyword">return</span> size != <span class="hljs-literal">null</span> ? size.intValue() : <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//redis key相关操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置key的过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key  redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time 过期时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>    redisTemplate.expire(key, time, TimeUnit.MILLISECONDS);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置key的过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key      redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time     过期时间</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> timeUnit 过期时间单位</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>    redisTemplate.expire(key, time, timeUnit);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除指定的key</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key 删除的key</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteKey</span><span class="hljs-params">(String key)</span> &#123;<br>    redisTemplate.delete(key);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定key的剩余过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 当 key 不存在时，返回 -2 ;当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.getExpire(key);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询key是否存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否存在（true/false)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//redis pipeline操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 功能描述: 使用pipelined批量存储</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span>: [map, seconds]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span>: void</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executePipelined</span><span class="hljs-params">(Map&lt;String, String&gt; map, <span class="hljs-type">long</span> seconds)</span> &#123;<br>    RedisSerializer&lt;String&gt; serializer = redisTemplate.getStringSerializer();<br>    redisTemplate.executePipelined(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCallback</span>&lt;String&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doInRedis</span><span class="hljs-params">(RedisConnection connection)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>        map.forEach((key, value) -&gt; &#123;<br>          connection.set(serializer.serialize(key), serializer.serialize(value),<br>              Expiration.seconds(seconds), RedisStringCommands.SetOption.UPSERT);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;, serializer);<br>  &#125;<br><br>  <span class="hljs-comment">//*****************************************************</span><br>  <span class="hljs-comment">//redis 解决缓存穿透等相关操作</span><br>  <span class="hljs-comment">//*****************************************************</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置逻辑过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key   redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value key对应的值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time  时长</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> unit  时间单位</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>    <span class="hljs-comment">// 设置逻辑过期</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(value);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>    <span class="hljs-comment">// 写入Redis</span><br>    redisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 缓存查询数据，并解决缓存穿透</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> keyPrefix  redis key前缀</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id         该模块的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type       返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dbFallback 查询数据库</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time       缓存时长</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> unit       时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;R&gt;        返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;ID&gt;       id类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(</span><br><span class="hljs-params">      String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time,</span><br><span class="hljs-params">      TimeUnit unit)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + id;<br>    <span class="hljs-comment">// 1.从redis查询缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">// 2.判断是否存在</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>      <span class="hljs-comment">// 3.存在，直接返回</span><br>      <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>    &#125;<br>    <span class="hljs-comment">// 判断命中的是否是空值</span><br>    <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 返回一个错误信息</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.不存在，根据id查询数据库</span><br>    <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>    <span class="hljs-comment">// 5.不存在，返回错误</span><br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 将空值写入redis</span><br>      redisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>      <span class="hljs-comment">// 返回错误信息</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 6.存在，写入redis</span><br>    <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 利用逻辑过期解决缓存击穿问题</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> keyPrefix  redis key前缀</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id         该模块的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type       返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dbFallback 查询数据库</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time       缓存时长</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> unit       时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;R&gt;        返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;ID&gt;       id类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">      String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time,</span><br><span class="hljs-params">      TimeUnit unit)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>    <span class="hljs-comment">// 1.从redis查询缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">// 2.判断是否存在</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>      <span class="hljs-comment">// 3.存在，直接返回</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.命中，需要先把json反序列化为对象</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>    <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-comment">// 5.判断是否过期</span><br>    <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>      <span class="hljs-comment">// 5.1.未过期，直接返回店铺信息</span><br>      <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    <span class="hljs-comment">// 5.2.已过期，需要缓存重建</span><br>    <span class="hljs-comment">// 6.缓存重建</span><br>    <span class="hljs-comment">// 6.1.获取互斥锁</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> MUTEX_LOCK_KEY + id;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-comment">// 6.2.判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span> (isLock) &#123;<br>      <span class="hljs-comment">// 6.3.成功，开启独立线程，实现缓存重建</span><br>      CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 查询数据库</span><br>          <span class="hljs-type">R</span> <span class="hljs-variable">newR</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>          <span class="hljs-comment">// 重建缓存</span><br>          <span class="hljs-built_in">this</span>.setWithLogicalExpire(key, newR, time, unit);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">// 释放锁</span><br>          unlock(lockKey);<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-comment">// 6.4.返回过期的商铺信息</span><br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 利用互斥锁解决缓存穿透</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> keyPrefix  redis key前缀</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> id         该模块的key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type       返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dbFallback 查询数据库</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> time       缓存时长</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> unit       时间单位</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;R&gt;        返回值类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;ID&gt;       id类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(</span><br><span class="hljs-params">      String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time,</span><br><span class="hljs-params">      TimeUnit unit)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>    <span class="hljs-comment">// 1.从redis查询缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> String.valueOf(redisTemplate.opsForValue().get(key));<br>    <span class="hljs-comment">// 2.判断是否存在</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>      <span class="hljs-comment">// 3.存在，直接返回</span><br>      <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>    &#125;<br>    <span class="hljs-comment">// 判断命中的是否是空值</span><br>    <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 返回一个错误信息</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 4.实现缓存重建</span><br>    <span class="hljs-comment">// 4.1.获取互斥锁</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> MUTEX_LOCK_KEY + id;<br>    <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>      <span class="hljs-comment">// 4.2.判断是否获取成功</span><br>      <span class="hljs-keyword">if</span> (!isLock) &#123;<br>        <span class="hljs-comment">// 4.3.获取锁失败，休眠并重试</span><br>        Thread.sleep(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);<br>      &#125;<br>      <span class="hljs-comment">// 4.4.获取锁成功，根据id查询数据库</span><br>      r = dbFallback.apply(id);<br>      <span class="hljs-comment">// 5.不存在，返回错误</span><br>      <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 将空值写入redis</span><br>        redisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-comment">// 返回错误信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-comment">// 6.存在，写入redis</span><br>      <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 7.释放锁</span><br>      unlock(lockKey);<br>    &#125;<br>    <span class="hljs-comment">// 8.返回</span><br>    <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 尝试加锁</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key redis key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否加锁成功 true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解锁</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key redis key</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>    redisTemplate.delete(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Data</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> LocalDateTime expireTime;<br>    <span class="hljs-keyword">private</span> Object data;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十五、CompletableFuture异步编排"><a href="#二十五、CompletableFuture异步编排" class="headerlink" title="二十五、CompletableFuture异步编排"></a>二十五、CompletableFuture异步编排</h2><blockquote><p>创建异步对象</p></blockquote><p>completableFuture使用了四个静态方法来创建异步对象</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208110514058-0468719.png" alt="image-20221208110514058"></p><ol><li>runXXX都是没有返回结果的,supplyXXX都是可以获取返回结果的</li><li>可以传入自定义的线程池,否则就会用默认的线程池</li></ol><blockquote><p>完成后的回调方法</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208110756763-0468878.png" alt="image-20221208110756763"></p><p>whenComplete可以处理正常和异常的计算结果,exceptionally处理异常情况.</p><p>whenComplete和whenCompleteAsync的区别:</p><ol><li>whenComplete是执行当前任务的线程执行继续执行whenComplete的任务</li><li>whenCompleteAsync是执行把whenCompleteAsync这个任务继续提交给线程池来进行执行</li></ol><p><strong>方法不以Async结尾,意味着Action使用相同的线程执行,而Async可能会使用其他线程执行(如果是使用相同的线程池,也可能会被同一个线程选中执行)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completableFutureDemo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    CompletableFuture&lt;Object&gt; future = CompletableFuture.supplyAsync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;Object&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t completableFuture&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>      &#125;<br>    &#125;).whenComplete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BiConsumer</span>&lt;Object, Throwable&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Object o, Throwable throwable)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;o= &quot;</span> + o.toString());<br>        System.out.println(<span class="hljs-string">&quot;throwable= &quot;</span> + throwable);<br>      &#125;<br>    &#125;).exceptionally(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Throwable, Object&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">apply</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;throwable= &quot;</span> + throwable);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">6666</span>;<br>      &#125;<br>    &#125;);<br>    System.out.println(future.get());<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>handle方法</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208112043652.png" alt="image-20221208112043652"></p><p>和complete一样,可对结果做最后的处理(可处理异常),可改变返回值</p><blockquote><p>线程串行的方法</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208112259603-0469781.png" alt="image-20221208112259603"></p><ul><li>thenApply方法: 当一个线程依赖另一个线程时,获取上一个任务返回的结果,<strong>并返回当前任务的返回值</strong></li><li>thenAccept方法:消息处理结果.接收任务的处理结果,并消费处理,<strong>无返回结果</strong></li><li>thenRun方法:只要上面的任务执行完成,就开始执行thenRun,只是处理完任务后,执行thenRun的后续操作</li><li>带有Async默认都是异步执行</li><li>以上都必须前置任务成功完成. Function&lt;? superT,? extends U&gt;    T:上一个任务返回结果的类型,U:当前任务返回结果的类型</li></ul><blockquote><p>两个任务中任意一个任务完成</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208112927527.png" alt="image-20221208112927527"></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208112941485.png" alt="image-20221208112941485"></p><p>当两个任务中,任意一个future任务完成的时候,执行任务.</p><ul><li>applyToEither: 两个任务又一个执行完成,获取它的返回值,处理任务并有新的返回值</li><li>acceptEither: 两个任务有一个执行完成,获取它的返回值,处理任务,没有返回值</li><li>runAfterEither: 两个任务有一个执行完成,不需要获取future的结果,处理任务,也没有返回值</li></ul><blockquote><p>多任务组合</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221208130727584.png" alt="image-20221208130727584"></p><ul><li>allOf: 等待所有任务完成</li><li>any Of: 只要有一个任务完成</li></ul><h2 id="二十六、腾讯云短信发送"><a href="#二十六、腾讯云短信发送" class="headerlink" title="二十六、腾讯云短信发送"></a>二十六、腾讯云短信发送</h2><blockquote><p>短信发送工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:tencentcloud.properties&quot;)</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;tencent.cloud&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TencentCloudProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String secretId;<br>    <span class="hljs-keyword">private</span> String secretKey;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">tencent.cloud.secretId</span>=<span class="hljs-string">AKIDnQnueBWdU6VgcIitoTt3xc5JJ3YnoZ4K</span><br><span class="hljs-attr">tencent.cloud.secretKey</span>=<span class="hljs-string">2qOgjXlnbAUYMvEI6f05uTnrfEbiY7PR</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.tencentcloudapi.common.Credential;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.exception.TencentCloudSDKException;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.ClientProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.HttpProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.sms.v20210111.SmsClient;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.sms.v20210111.models.SendSmsRequest;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.sms.v20210111.models.SendSmsResponse;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSUtils</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> TencentCloudProperties tencentCloudProperties;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSMS</span><span class="hljs-params">(String phone, String code)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">/* 必要步骤：</span><br><span class="hljs-comment">       * 实例化一个认证对象，入参需要传入腾讯云账户密钥对secretId，secretKey。</span><br><span class="hljs-comment">       * 这里采用的是从环境变量读取的方式，需要在环境变量中先设置这两个值。</span><br><span class="hljs-comment">       * 你也可以直接在代码中写死密钥对，但是小心不要将代码复制、上传或者分享给他人，</span><br><span class="hljs-comment">       * 以免泄露密钥对危及你的财产安全。</span><br><span class="hljs-comment">       * CAM密匙查询获取: https://console.cloud.tencent.com/cam/capi</span><br><span class="hljs-comment">       * */</span><br>      <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(tencentCloudProperties.getSecretId(),<br>          tencentCloudProperties.getSecretKey());<br><br>      <span class="hljs-comment">// 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>      <span class="hljs-type">HttpProfile</span> <span class="hljs-variable">httpProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpProfile</span>();<br><br>      <span class="hljs-comment">/* SDK会自动指定域名。通常是不需要特地指定域名的，但是如果你访问的是金融区的服务</span><br><span class="hljs-comment">       * 则必须手动指定域名，例如sms的上海金融区域名： sms.ap-shanghai-fsi.tencentcloudapi.com */</span><br>      httpProfile.setEndpoint(<span class="hljs-string">&quot;sms.tencentcloudapi.com&quot;</span>);<br><br>      <span class="hljs-comment">// 实例化一个client选项</span><br>      <span class="hljs-type">ClientProfile</span> <span class="hljs-variable">clientProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProfile</span>();<br>      clientProfile.setHttpProfile(httpProfile);<br>      <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>      <span class="hljs-type">SmsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br><br>      <span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>      <span class="hljs-type">SendSmsRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendSmsRequest</span>();<br>      String[] phoneNumberSet1 = &#123;<span class="hljs-string">&quot;+86&quot;</span> + phone&#125;;<span class="hljs-comment">//电话号码</span><br>      req.setPhoneNumberSet(phoneNumberSet1);<br>      req.setSmsSdkAppId(<span class="hljs-string">&quot;1400726285&quot;</span>);   <span class="hljs-comment">// 短信应用ID: 短信SdkAppId在 [应用管理-应用列表] 添加应用后生成的实际SdkAppId</span><br>      req.setSignName(<span class="hljs-string">&quot;一颗小红豆教你开发公众号&quot;</span>);         <span class="hljs-comment">// 签名</span><br>      req.setTemplateId(<span class="hljs-string">&quot;1635274&quot;</span>);       <span class="hljs-comment">// 模板id：必须填写已审核通过的模板 ID。模板ID可登录 [短信控制台] 查看</span><br><br>      <span class="hljs-comment">/* 模板参数（自定义占位变量）: 若无模板参数，则设置为空 */</span><br>      String[] templateParamSet1 = &#123;code&#125;;<br>      req.setTemplateParamSet(templateParamSet1);<br><br>      <span class="hljs-comment">// 返回的resp是一个SendSmsResponse的实例，与请求对象对应</span><br>      <span class="hljs-type">SendSmsResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> client.SendSms(req);<br>    &#125; <span class="hljs-keyword">catch</span> (TencentCloudSDKException e) &#123;<br>      System.out.println(e.toString());<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>secretId 和 secretKey 可以访问获取 ：<a href="https://console.cloud.tencent.com/cam/capi">CAM 密钥查询</a></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221211150100749-0742068.png" alt="image-20221211150100749"></p><p>appid 获取 <a href="https://console.cloud.tencent.com/smsv2/app-manage">AppID</a> 刚开始会有个默认应用，也可以自行创建</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221211150130877.png" alt="image-20221211150130877"></p><p>模版id:</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221211150202811-0742125.png" alt="image-20221211150202811"></p><h2 id="二十七、脱敏工具"><a href="#二十七、脱敏工具" class="headerlink" title="二十七、脱敏工具"></a>二十七、脱敏工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用脱敏工具类 可用于： 用户名 手机号 邮箱 地址等</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DesensitizationUtil</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYMBOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> commonDisplay(<span class="hljs-string">&quot;慕课网&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">mobile</span> <span class="hljs-operator">=</span> commonDisplay(<span class="hljs-string">&quot;13900000000&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> commonDisplay(<span class="hljs-string">&quot;admin@imooc.com&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> commonDisplay(<span class="hljs-string">&quot;北京大运河东路888号&quot;</span>);<br><br>    System.out.println(name);<br>    System.out.println(mobile);<br>    System.out.println(mail);<br>    System.out.println(address);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通用脱敏方法</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">commonDisplay</span><span class="hljs-params">(String value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == value || <span class="hljs-string">&quot;&quot;</span>.equals(value)) &#123;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> value.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pamaone</span> <span class="hljs-operator">=</span> len / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pamatwo</span> <span class="hljs-operator">=</span> pamaone - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pamathree</span> <span class="hljs-operator">=</span> len % <span class="hljs-number">2</span>;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">if</span> (pamathree == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> SYMBOL;<br>      &#125;<br>      stringBuilder.append(SYMBOL);<br>      stringBuilder.append(value.charAt(len - <span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (pamatwo &lt;= <span class="hljs-number">0</span>) &#123;<br>        stringBuilder.append(value.charAt(<span class="hljs-number">0</span>));<br>        stringBuilder.append(SYMBOL);<br>        stringBuilder.append(value.charAt(len - <span class="hljs-number">1</span>));<br><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pamatwo &gt;= SIZE / <span class="hljs-number">2</span> &amp;&amp; SIZE + <span class="hljs-number">1</span> != len) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pamafive</span> <span class="hljs-operator">=</span> (len - SIZE) / <span class="hljs-number">2</span>;<br>        stringBuilder.append(value.substring(<span class="hljs-number">0</span>, pamafive));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; SIZE; i++) &#123;<br>          stringBuilder.append(SYMBOL);<br>        &#125;<br>        stringBuilder.append(value, len - (pamafive + <span class="hljs-number">1</span>), len);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pamafour</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">2</span>;<br>        stringBuilder.append(value.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pamafour; i++) &#123;<br>          stringBuilder.append(SYMBOL);<br>        &#125;<br>        stringBuilder.append(value.charAt(len - <span class="hljs-number">1</span>));<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stringBuilder.toString();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十八、AOP日志"><a href="#二十八、AOP日志" class="headerlink" title="二十八、AOP日志"></a>二十八、AOP日志</h2><blockquote><p>sql</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_user_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `module_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `type` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `operator_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `operate_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><blockquote><p>UserLogDO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户操作日志表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;sys_user_log&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLogDO</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Long id;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 本次操作的系统模块</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String moduleCode;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作类型</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Integer type;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 标题</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String title;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作人</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Long operatorId;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Date operateTime;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> String content;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>UserLogDTO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户日志DTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLogDTO</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Long id;<br><br>  <span class="hljs-keyword">private</span> String moduleCode;<br><br>  <span class="hljs-keyword">private</span> Integer type;<br><br>  <span class="hljs-keyword">private</span> String title;<br><br>  <span class="hljs-keyword">private</span> Long operatorId;<br><br>  <span class="hljs-keyword">private</span> Date operateTime;<br><br>  <span class="hljs-keyword">private</span> String content;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>UserLogService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.gz.entity.dto.UserLogDTO;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户日志服务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserLogService</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 插入用户操作日志</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> userLogDTO 用户日志DTO</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否添加成功</span><br><span class="hljs-comment">   */</span><br>  Boolean <span class="hljs-title function_">addSysLog</span><span class="hljs-params">(UserLogDTO userLogDTO)</span>;<br><br>&#125;<br><br>-----------------------------------------------------------<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.gz.entity.UserLogDO;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户操作日志Mapper接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserLogMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;UserLogDO&gt; &#123;<br><br>&#125;<br><br>-----------------------------------------------------------<br><span class="hljs-keyword">import</span> com.gz.entity.UserLogDO;<br><span class="hljs-keyword">import</span> com.gz.entity.dto.UserLogDTO;<br><span class="hljs-keyword">import</span> com.gz.mapper.UserLogMapper;<br><span class="hljs-keyword">import</span> com.gz.service.UserLogService;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户日志服务实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;UserLogService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserLogService</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> UserLogMapper userLogMapper;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">addSysLog</span><span class="hljs-params">(UserLogDTO userLogDTO)</span> &#123;<br>    <span class="hljs-type">UserLogDO</span> <span class="hljs-variable">userLogDO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLogDO</span>();<br>    userLogDO.setModuleCode(userLogDTO.getModuleCode());<br>    userLogDO.setType(userLogDTO.getType());<br>    userLogDO.setTitle(userLogDTO.getTitle());<br>    userLogDO.setOperatorId(userLogDTO.getOperatorId());<br>    userLogDO.setOperateTime(userLogDTO.getOperateTime());<br>    userLogDO.setContent(userLogDTO.getContent());<br><br>    <span class="hljs-keyword">return</span> userLogMapper.insert(userLogDO) &gt; <span class="hljs-number">0</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>OperationEnum</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 操作类型枚举</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">OperationEnum</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 新建</span><br><span class="hljs-comment">   */</span><br>  ADD(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;新建&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 修改</span><br><span class="hljs-comment">   */</span><br>  MODIFY(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;修改&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除</span><br><span class="hljs-comment">   */</span><br>  DELETE(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;删除&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 导入</span><br><span class="hljs-comment">   */</span><br>  IMPORT(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;导入&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 导出</span><br><span class="hljs-comment">   */</span><br>  EXPORT(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;导出&quot;</span>);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer value;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String operationType;<br><br>  OperationEnum(Integer value, String operationType) &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>    <span class="hljs-built_in">this</span>.operationType = operationType;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ModuleEnum</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 系统模块枚举类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ModuleEnum</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 课程</span><br><span class="hljs-comment">   */</span><br>  COURSE(<span class="hljs-string">&quot;课程&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户</span><br><span class="hljs-comment">   */</span><br>  USER(<span class="hljs-string">&quot;用户&quot;</span>),<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 消息</span><br><span class="hljs-comment">   */</span><br>  MESSAGE(<span class="hljs-string">&quot;消息&quot;</span>);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String moduleCode;<br><br>  ModuleEnum(String moduleCode) &#123;<br>    <span class="hljs-built_in">this</span>.moduleCode = moduleCode;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>UserLog</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户操作日志注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> UserLog &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 所属模块名</span><br><span class="hljs-comment">   */</span><br>  ModuleEnum <span class="hljs-title function_">module</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作标题</span><br><span class="hljs-comment">   */</span><br>  String <span class="hljs-title function_">title</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 操作类型</span><br><span class="hljs-comment">   */</span><br>  OperationEnum <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">UserLogAspect</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.gz.entity.dto.UserLogDTO;<br><span class="hljs-keyword">import</span> com.gz.service.UserLogService;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterReturning;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 操作日志注解切面实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLogAspect</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> HttpServletRequest request;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> ObjectMapper objectMapper;<br><br>  <span class="hljs-meta">@Resource</span><br>  UserLogService userLogService;<br><br><br>  <span class="hljs-meta">@Pointcut(&quot;@annotation(com.gz.aop.UserLog)&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-meta">@AfterReturning(&quot;pointcut()&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint point)</span> &#123;<br>    saveSysUserLog(point);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveSysUserLog</span><span class="hljs-params">(JoinPoint point)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户</span><br>    <span class="hljs-type">UserInfoDTO</span> <span class="hljs-variable">userInfoDTO</span> <span class="hljs-operator">=</span> getUserInfoDTO();<br><br>    <span class="hljs-comment">// 目标方法、以及方法上的@UserLog注解</span><br>    <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) point.getSignature();<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>    <span class="hljs-type">UserLog</span> <span class="hljs-variable">userLogAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(UserLog.class);<br>    <span class="hljs-keyword">if</span> (userLogAnnotation == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 收集相关信息并保存</span><br>    <span class="hljs-type">UserLogDTO</span> <span class="hljs-variable">userLogDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLogDTO</span>();<br>    userLogDTO.setModuleCode(userLogAnnotation.<span class="hljs-keyword">module</span>().getModuleCode());<br>    userLogDTO.setContent(getContentJson(point));<br>    userLogDTO.setTitle(userLogAnnotation.title());<br>    userLogDTO.setOperatorId(userInfoDTO.getId());<br>    userLogDTO.setOperateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    userLogDTO.setType(userLogAnnotation.type().getValue());<br><br>    userLogService.addSysLog(userLogDTO);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> UserInfoDTO <span class="hljs-title function_">getUserInfoDTO</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// UserInfoDTO userInfoDTO = (UserInfoDTO) ThreadLocalMap.get(WebConst.USER_INFO_DTO);</span><br>    <span class="hljs-comment">// 模拟从ThreadLocal获取用户信息，关于ThreadLocal请参考小册相关章节</span><br>    <span class="hljs-type">UserInfoDTO</span> <span class="hljs-variable">userInfoDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfoDTO</span>();<br>    userInfoDTO.setId(<span class="hljs-number">10086L</span>);<br>    <span class="hljs-keyword">return</span> userInfoDTO;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContentJson</span><span class="hljs-params">(JoinPoint point)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestType</span> <span class="hljs-operator">=</span> request.getMethod();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;GET&quot;</span>.equals(requestType)) &#123;<br>      <span class="hljs-comment">// 如果是GET请求，直接返回QueryString（目前没有针对查询操作进行日志记录，先留着吧）</span><br>      <span class="hljs-keyword">return</span> request.getQueryString();<br>    &#125;<br><br>    Object[] args = point.getArgs();<br>    Object[] arguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[args.length];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>      <span class="hljs-comment">// 只打印客户端传递的参数，排除Spring注入的参数，比如HttpServletRequest</span><br>      <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> ServletRequest<br>          || args[i] <span class="hljs-keyword">instanceof</span> ServletResponse<br>          || args[i] <span class="hljs-keyword">instanceof</span> MultipartFile) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      arguments[i] = args[i];<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> objectMapper.writeValueAsString(arguments);<br>    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>      log.error(<span class="hljs-string">&quot;UserLogAspect#getContentJson JsonProcessingException&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">EnableUserLog</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 开启用户日志记录</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/05 23:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Import(UserLogAspect.class)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableUserLog &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableUserLog</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.gz.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityApplication</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(SecurityApplication.class, args);<br>    System.out.println(<span class="hljs-string">&quot;security-demo running&quot;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@UserLog(module = ModuleEnum.USER, title = &quot;批量更新用户&quot;, type = OperationEnum.MODIFY)</span><br>    <span class="hljs-meta">@PostMapping(&quot;updateBatchUser&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Boolean&gt; <span class="hljs-title function_">updateBatchUser</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> ValidationList&lt;User&gt; userList)</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@UserLog(module = ModuleEnum.USER, title = &quot;新增用户&quot;, type = OperationEnum.ADD)</span><br>    <span class="hljs-meta">@PostMapping(&quot;insertUser&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Boolean&gt; <span class="hljs-title function_">insertUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十九、-阿里云消息推送工具类"><a href="#二十九、-阿里云消息推送工具类" class="headerlink" title="二十九、 阿里云消息推送工具类"></a>二十九、 阿里云消息推送工具类</h2><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">access-key-id-em:</span> <span class="hljs-string">LTAI5tA834xqY2Vk4N8oFH5k</span><br>    <span class="hljs-attr">access-key-secret-em:</span> <span class="hljs-string">PmjiAYX2YmABySnQncMFD1WtrnTsM2</span><br>    <span class="hljs-attr">app-key-android-em:</span> <span class="hljs-number">333720016</span><br>    <span class="hljs-attr">app-key-ios-em:</span> <span class="hljs-number">333720024</span><br>    <span class="hljs-attr">region-id:</span> <span class="hljs-string">cn-hangzhou</span><br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.aliyuncs.DefaultAcsClient;<br><span class="hljs-keyword">import</span> com.aliyuncs.exceptions.ClientException;<br><span class="hljs-keyword">import</span> com.aliyuncs.profile.DefaultProfile;<br><span class="hljs-keyword">import</span> com.aliyuncs.profile.IClientProfile;<br><span class="hljs-keyword">import</span> com.aliyuncs.push.model.v20160801.PushRequest;<br><span class="hljs-keyword">import</span> com.aliyuncs.push.model.v20160801.PushResponse;<br><span class="hljs-keyword">import</span> com.jysj.hawk.entity.dto.PushParamDTO;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPushUtil</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG_DEVICE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DEVICE&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG_ALIAS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ALIAS&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG_ACCOUNT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ACCOUNT&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TAG&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG_ALL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ALL&quot;</span>;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;aliyun.push.access-key-id-em&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String accessKeyId;<br>  <span class="hljs-meta">@Value(&quot;$&#123;aliyun.push.access-key-secret-em&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String accessKeySecret;<br>  <span class="hljs-meta">@Value(&quot;$&#123;aliyun.push.app-key-ios-em&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String appKeyIos;<br>  <span class="hljs-meta">@Value(&quot;$&#123;aliyun.push.app-key-android-em&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String appKeyAndroid;<br>  <span class="hljs-meta">@Value(&quot;$&#123;aliyun.push.region-id&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String regionId;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAndroidMessage</span><span class="hljs-params">(String targetValue, String title, String content,</span><br><span class="hljs-params">      PushParamDTO params)</span> &#123;<br>    <span class="hljs-type">IClientProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);<br>    <span class="hljs-type">DefaultAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br>    <span class="hljs-type">PushRequest</span> <span class="hljs-variable">pushRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PushRequest</span>();<br>    <span class="hljs-comment">// 推送目标</span><br>    pushRequest.setAppKey(Long.parseLong(appKeyAndroid));<br>    <span class="hljs-comment">//推送目标: DEVICE:按设备推送 ALIAS : 按别名推送 ACCOUNT:按帐号推送  TAG:按标签推送; ALL: 广播推送</span><br>    pushRequest.setTarget(<span class="hljs-string">&quot;ACCOUNT&quot;</span>);<br>    <span class="hljs-comment">//根据Target来设定，如Target=DEVICE, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔.(帐号与设备有一次最多100个的限制)</span><br>    pushRequest.setTargetValue(targetValue);<br><span class="hljs-comment">//        pushRequest.setTarget(&quot;ALL&quot;); //推送目标: DEVICE:推送给设备; ACCOUNT:推送给指定帐号,TAG:推送给自定义标签; ALL: 推送给全部</span><br><span class="hljs-comment">//        pushRequest.setTargetValue(&quot;ALL&quot;); //根据Target来设定，如Target=DEVICE, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔.(帐号与设备有一次最多100个的限制)</span><br>    <span class="hljs-comment">// 消息类型 MESSAGE NOTICE</span><br>    pushRequest.setPushType(<span class="hljs-string">&quot;NOTICE&quot;</span>);<br><span class="hljs-comment">//    pushRequest.setAndroidOpenType();</span><br>    <span class="hljs-comment">// 设备类型 ANDROID iOS ALL.</span><br>    pushRequest.setDeviceType(<span class="hljs-string">&quot;ALL&quot;</span>);<br>    <span class="hljs-comment">// 推送配置</span><br>    <span class="hljs-comment">// 消息的标题</span><br>    pushRequest.setTitle(title);<br>    pushRequest.setIOSRemind(Boolean.TRUE);<br>    pushRequest.setAndroidRemind(Boolean.TRUE);<br>    pushRequest.setIOSRemindBody(content);<br>    pushRequest.setAndroidPopupTitle(title);<br>    pushRequest.setAndroidPopupBody(content);<br>    pushRequest.setAndroidExtParameters(JSONObject.toJSONString(params));<br>    pushRequest.setIOSExtParameters(JSONObject.toJSONString(params));<br>    <span class="hljs-comment">// 离线消息是否保存,若保存, 在推送时候，用户即使不在线，下一次上线则会收到</span><br>    pushRequest.setStoreOffline(Boolean.TRUE);<br>    pushRequest.setAndroidNotificationChannel(<span class="hljs-string">&quot;inspection&quot;</span>);<br>    <span class="hljs-comment">//点击通知后动作 &quot;APPLICATION&quot; : 打开应用 &quot;ACTIVITY&quot; : 打开AndroidActivity &quot;URL&quot; : 打开URL &quot;NONE&quot; : 无跳转</span><br>    pushRequest.setAndroidOpenType(<span class="hljs-string">&quot;APPLICATION&quot;</span>);<br>    pushRequest.setAndroidNotifyType(<span class="hljs-string">&quot;BOTH&quot;</span>);<br>    pushRequest<br>        .setAndroidActivity(<span class="hljs-string">&quot;com.alibaba.uniplugin.android.third.push.ThirdPushPopupActivity&quot;</span>);<br>    pushRequest<br>        .setAndroidPopupActivity(<span class="hljs-string">&quot;com.alibaba.uniplugin.android.third.push.ThirdPushPopupActivity&quot;</span>);<br>    pushRequest.setAndroidVivoPushMode(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 消息的内容</span><br>    pushRequest.setBody(content);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">PushResponse</span> <span class="hljs-variable">pushResponse</span> <span class="hljs-operator">=</span> client.getAcsResponse(pushRequest);<br>      log.info(<span class="hljs-string">&quot;RequestId: &#123;&#125;, MessageID: &#123;&#125;\n&quot;</span>, pushResponse.getRequestId(),<br>          pushResponse.getMessageId());<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>      log.error(<span class="hljs-string">&quot;消息推送失败：&#123;&#125;&quot;</span>, e.toString());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushIOSMessage</span><span class="hljs-params">(String targetValue, String title, String content,</span><br><span class="hljs-params">      PushParamDTO params)</span> &#123;<br>    <span class="hljs-type">IClientProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);<br>    <span class="hljs-type">DefaultAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br>    <span class="hljs-type">PushRequest</span> <span class="hljs-variable">pushRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PushRequest</span>();<br>    <span class="hljs-comment">// 推送目标</span><br>    pushRequest.setAppKey(Long.parseLong(appKeyIos));<br>    <span class="hljs-comment">// 消息类型 MESSAGE NOTICE</span><br>    pushRequest.setPushType(<span class="hljs-string">&quot;NOTICE&quot;</span>);<br>    <span class="hljs-comment">// 设备类型 ANDROID iOS ALL.</span><br>    pushRequest.setDeviceType(<span class="hljs-string">&quot;ALL&quot;</span>);<br>    pushRequest.setIOSRemind(Boolean.TRUE);<br>    pushRequest.setAndroidRemind(Boolean.TRUE);<br>    <span class="hljs-comment">//推送目标: DEVICE:按设备推送 ALIAS : 按别名推送 ACCOUNT:按帐号推送  TAG:按标签推送; ALL: 广播推送</span><br>    pushRequest.setTarget(<span class="hljs-string">&quot;ACCOUNT&quot;</span>);<br>    <span class="hljs-comment">//根据Target来设定，如Target=DEVICE, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔.(帐号与设备有一次最多100个的限制)</span><br>    pushRequest.setTargetValue(targetValue);<br><span class="hljs-comment">//        pushRequest.setTarget(&quot;ALL&quot;); //推送目标: DEVICE:推送给设备; ACCOUNT:推送给指定帐号,TAG:推送给自定义标签; ALL: 推送给全部</span><br><span class="hljs-comment">//        pushRequest.setTargetValue(&quot;ALL&quot;); //根据Target来设定，如Target=DEVICE, 则对应的值为 设备id1,设备id2. 多个值使用逗号分隔.(帐号与设备有一次最多100个的限制)</span><br><span class="hljs-comment">//    pushRequest.setAndroidOpenType();</span><br>    <span class="hljs-comment">// 推送配置</span><br>    <span class="hljs-comment">// 消息的标题</span><br>    pushRequest.setTitle(title);<br>    <span class="hljs-comment">// 消息的内容</span><br>    pushRequest.setBody(content);<br>    pushRequest.setIOSRemindBody(content);<br>    pushRequest.setAndroidPopupTitle(title);<br>    pushRequest.setAndroidPopupBody(content);<br>    pushRequest.setAndroidExtParameters(JSONObject.toJSONString(params));<br>    pushRequest.setIOSExtParameters(JSONObject.toJSONString(params));<br>    pushRequest.setStoreOffline(Boolean.TRUE);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">PushResponse</span> <span class="hljs-variable">pushResponse</span> <span class="hljs-operator">=</span> client.getAcsResponse(pushRequest);<br>      log.info(<span class="hljs-string">&quot;RequestId: &#123;&#125;, MessageID: &#123;&#125;\n&quot;</span>, pushResponse.getRequestId(),<br>          pushResponse.getMessageId());<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>      log.error(<span class="hljs-string">&quot;消息推送失败：&#123;&#125;&quot;</span>, e.toString());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三十、发送邮件"><a href="#三十、发送邮件" class="headerlink" title="三十、发送邮件"></a>三十、发送邮件</h2><blockquote><p>开启授权</p></blockquote><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230116165636730-3859398.png" alt="image-20230116165636730"></p><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.mail.MessagingException;<br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> EmailUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 邮件发送工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/4/6 16:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailUtil</span> &#123;<br><br>  <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.from&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String from;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> JavaMailSender mailSender;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送纯文本邮件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> to      接收方</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> subject 邮件主题</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> content 邮件内容（发送内容）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendTextMail</span><span class="hljs-params">(String to, String subject, String content)</span> &#123;<br>    <span class="hljs-comment">// 创建一个邮件对象</span><br>    <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>    msg.setFrom(from); <span class="hljs-comment">// 设置发送发</span><br>    msg.setTo(to); <span class="hljs-comment">// 设置接收方</span><br>    msg.setSubject(subject); <span class="hljs-comment">// 设置邮件主题</span><br>    msg.setText(content); <span class="hljs-comment">// 设置邮件内容</span><br>    <span class="hljs-comment">// 发送邮件</span><br>    mailSender.send(msg);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送邮件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> to      接收方</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> subject 邮件主题</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> content 邮件内容（发送内容）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">(String to, String subject, String content)</span> &#123;<br>    <span class="hljs-comment">// 创建一个邮件对象</span><br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>    <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 设置发送方</span><br>      helper.setFrom(from);<br>      <span class="hljs-comment">// 设置接收方</span><br>      helper.setTo(to);<br>      <span class="hljs-comment">// 设置邮件主题</span><br>      helper.setSubject(subject);<br>      <span class="hljs-comment">// 设置邮件内容（开启html）</span><br>      helper.setText(content, <span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 发送邮件</span><br>      mailSender.send(message);<br>      log.info(<span class="hljs-string">&quot;邮件发送成功：&#123;&#125;&quot;</span>, to);<br>    &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>      log.info(<span class="hljs-string">&quot;给邮箱&#123;&#125;发送验证码时发生错误,&#123;&#125;&quot;</span>, to, e.toString());<br>    &#125;<br><br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送带附件的邮件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> to      接收方</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> subject 邮件主题</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> content 邮件内容（发送内容）</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> files   文件数组 // 可发送多个附件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMailWithFiles</span><span class="hljs-params">(String to, String subject, String content, File[] files)</span> &#123;<br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 设置发送方</span><br>      helper.setFrom(from);<br>      <span class="hljs-comment">// 设置接收方</span><br>      helper.setTo(to);<br>      <span class="hljs-comment">// 设置邮件主题</span><br>      helper.setSubject(subject);<br>      <span class="hljs-comment">// 设置邮件内容</span><br>      helper.setText(content);<br>      <span class="hljs-comment">// 添加附件（多个）</span><br>      <span class="hljs-keyword">if</span> (files != <span class="hljs-literal">null</span> &amp;&amp; files.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>          helper.addAttachment(file.getName(), file);<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">// 发送邮件</span><br>    mailSender.send(mimeMessage);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发送带附件的邮件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> to      接收方</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> subject 邮件主题</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> content 邮件内容（发送内容）</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> file    单个文件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMailWithFile</span><span class="hljs-params">(String to, String subject, String content, File file)</span> &#123;<br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 设置发送发</span><br>      helper.setFrom(from);<br>      <span class="hljs-comment">// 设置接收方</span><br>      helper.setTo(to);<br>      <span class="hljs-comment">// 设置邮件主题</span><br>      helper.setSubject(subject);<br>      <span class="hljs-comment">// 设置邮件内容</span><br>      helper.setText(content);<br>      <span class="hljs-comment">// 单个附件</span><br>      helper.addAttachment(file.getName(), file);<br>    &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">// 发送邮件</span><br>    mailSender.send(mimeMessage);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFrom</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> from;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFrom</span><span class="hljs-params">(String from)</span> &#123;<br>    <span class="hljs-built_in">this</span>.from = from;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三十一、JSR303校验"><a href="#三十一、JSR303校验" class="headerlink" title="三十一、JSR303校验"></a>三十一、JSR303校验</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>加入校验</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.content.model.dto;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.NotEmpty;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 添加课程dto</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Mr.M</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/9/7 17:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value=&quot;AddCourseDto&quot;, description=&quot;新增课程基本信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCourseDto</span> &#123;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;课程名称不能为空&quot;)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;课程名称&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String name;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;适用人群不能为空&quot;)</span><br> <span class="hljs-meta">@Size(message = &quot;适用人群内容过少&quot;,min = 10)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;适用人群&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String users;<br><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;课程标签&quot;)</span><br> <span class="hljs-keyword">private</span> String tags;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;课程分类不能为空&quot;)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;大分类&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String mt;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;课程分类不能为空&quot;)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;小分类&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String st;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;课程等级不能为空&quot;)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;课程等级&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String grade;<br><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;教学模式（普通，录播，直播等）&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String teachmode;<br><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;课程介绍&quot;)</span><br> <span class="hljs-keyword">private</span> String description;<br><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;课程图片&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String pic;<br><br> <span class="hljs-meta">@NotEmpty(message = &quot;收费规则不能为空&quot;)</span><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;收费规则，对应数据字典&quot;, required = true)</span><br> <span class="hljs-keyword">private</span> String charge;<br><br> <span class="hljs-meta">@ApiModelProperty(value = &quot;价格&quot;)</span><br> <span class="hljs-keyword">private</span> BigDecimal price;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上边用到了@NotEmpty和@Size两个注解，@NotEmpty表示属性不能为空，@Size表示限制属性内容的长短。</p><p>在javax.validation.constraints包下有很多这样的校验注解</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20220908165105908.png" alt="image-20220908165105908"></p><p>规则如下：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/2022091315452386.png" alt="2022091315452386.png"></p><p>定义好校验规则还需要开启校验，在controller方法中添加@Validated注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;新增课程基础信息&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/course&quot;)</span><br><span class="hljs-keyword">public</span> CourseBaseInfoDto <span class="hljs-title function_">createCourseBase</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> AddCourseDto addCourseDto)</span>&#123;<br>    <span class="hljs-comment">//机构id，由于认证系统没有上线暂时硬编码</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">companyId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>  <span class="hljs-keyword">return</span> courseBaseInfoService.createCourseBase(companyId,addCourseDto);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果校验出错Spring会抛出MethodArgumentNotValidException异常，我们需要在统一异常处理器中捕获异常，解析出异常信息。</p><p>代码 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br><span class="hljs-meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="hljs-keyword">public</span> RestErrorResponse <span class="hljs-title function_">doValidException</span><span class="hljs-params">(MethodArgumentNotValidException argumentNotValidException)</span> &#123;<br><br>   <span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> argumentNotValidException.getBindingResult();<br>   <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br>   List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();<br>   fieldErrors.forEach(error -&gt; &#123;<br>      errMsg.append(error.getDefaultMessage()).append(<span class="hljs-string">&quot;,&quot;</span>);<br>   &#125;);<br>   log.error(errMsg.toString());<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestErrorResponse</span>(errMsg.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三十二、xxl-job-使用"><a href="#三十二、xxl-job-使用" class="headerlink" title="三十二、xxl-job 使用"></a>三十二、xxl-job 使用</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>XXL-JOB是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><p>官网：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></p><p>文档：<a href="https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B">https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B</a></p><p>XXL-JOB主要有调度中心、执行器、任务：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211154930116.png" alt="image-20230211154930116"></p><p><strong>调度中心：</strong></p><p>​    负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码；</p><p>​    主要职责为执行器管理、任务管理、监控运维、日志管理等</p><p><strong>任务执行器：</strong></p><p>​    负责接收调度请求并执行任务逻辑；</p><p>​    只要职责是注册服务、任务执行服务（接收到任务后会放入线程池中的任务队列）、执行结果上报、日志服务等</p><p><strong>任务：</strong>负责执行具体的业务处理。</p><p>调度中心与执行器之间的工作流程如下：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211155138470.png" alt="image-20230211155138470"></p><p><strong>执行流程：</strong></p><p>​    1.任务执行器根据配置的调度中心的地址，自动注册到调度中心</p><p>​    2.达到任务触发条件，调度中心下发任务</p><p>​    3.执行器基于线程池执行任务，并把执行结果放入内存队列中、把执行日志写入日志文件中</p><p>​    4.执行器消费内存队列中的执行结果，主动上报给调度中心</p><p>​    5.当用户在调度中心查看任务日志，调度中心请求任务执行器，任务执行器读取任务日志文件并返回日志详情</p><p>项目使用2.3.1版本： <a href="https://github.com/xuxueli/xxl-job/releases/tag/2.3.1">https://github.com/xuxueli/xxl-job/releases/tag/2.3.1</a></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211155352126-6102035.png" alt="image-20230211155352126"></p><ul><li><p>xxl-job-admin：调度中心</p></li><li><p>xxl-job-core：公共依赖</p></li><li><p>xxl-job-executor-samples：执行器Sample示例（选择合适的版本执行器，可直接使用）</p><p>：xxl-job-executor-sample-springboot：Springboot版本，通过Springboot管理执行器，推荐这种方式；</p><p>：xxl-job-executor-sample-frameless：无框架版本；</p></li></ul><p>doc :文档资料，包含数据库脚本</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><blockquote><p>调度中心</p></blockquote><p>修改配置文件中的数据库连接信息 <span style="color:red;">这里主要要注意端口还有默认的accessToken</span></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211155948987.png" alt="image-20230211155948987"></p><blockquote><p>执行器</p></blockquote><p>在需要引入执行器的模块导入依赖,注意版本使用2.3.1:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuxueli<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxl-job-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在配置文件中引入:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">xxl:</span><br>  <span class="hljs-attr">job:</span><br>    <span class="hljs-attr">admin:</span> <br>      <span class="hljs-comment"># 调度中心的地址</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">http://localhost:8080/xxl-job-admin</span><br>    <span class="hljs-attr">executor:</span><br>    <span class="hljs-comment"># 执行器的名称</span><br>      <span class="hljs-attr">appname:</span> <span class="hljs-string">media-process-service</span><br>      <span class="hljs-attr">address:</span> <br>      <span class="hljs-attr">ip:</span> <br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span><br>      <span class="hljs-comment"># 日志地址</span><br>      <span class="hljs-attr">logpath:</span> <span class="hljs-string">/data/applogs/xxl-job/jobhandler</span><br>      <span class="hljs-comment"># 日志保存天数</span><br>      <span class="hljs-attr">logretentiondays:</span> <span class="hljs-number">30</span><br>    <span class="hljs-comment"># 与调度中心通讯token</span><br>    <span class="hljs-attr">accessToken:</span> <span class="hljs-string">default_token</span><br></code></pre></td></tr></table></figure><p>注意配置中的appname这是执行器的应用名，稍后在调度中心配置执行器时要使用。</p><blockquote><p>配置xxl-job的执行器</p></blockquote><p>将示例工程下配置类拷贝到媒资管理的service工程下</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/clip_image002.jpg" alt="img"></p><p>拷贝至：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/clip_image004.jpg" alt="img"></p><p>下边进入调度中心添加执行器: </p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211160843064.png" alt="image-20230211160843064"></p><p>点击新增，填写执行器信息，appname是前边在nacos中配置xxl信息时指定的执行器的应用名。</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211160907458.png" alt="image-20230211160907458"></p><p>添加成功：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211160925901.png" alt="image-20230211160925901"></p><p>到此完成媒资管理模块service工程配置xxl-job执行器，在xxl-job调度中心添加执行器，下边准备测试执行器与调度中心是否正常通信，因为接口工程依赖了service工程，所以启动媒资管理模块的接口工程。</p><p>启动后观察日志，出现下边的日志表示执行器在调度中心注册成功</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/clip_image002-6102973.jpg" alt="img"></p><p>同时观察调度中心中的执行器界面</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/clip_image002-6102991.jpg" alt="img"></p><p>在线机器地址处已显示1个执行器。</p><blockquote><p>执行任务</p></blockquote><p>下边编写任务，任务类的编写方法参考示例工程，如下图：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/clip_image002-6103023.jpg" alt="img"></p><p>在service包下新建jobhandler存放任务类，下边参考示例工程编写一个任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 测试执行器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Mr.M</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/9/13 20:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@Component</span><br> <span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleJob</span> &#123;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 1、简单任务示例（Bean模式）</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@XxlJob(&quot;testJob&quot;)</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJob</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  log.info(<span class="hljs-string">&quot;开始执行.....&quot;</span>);<br><br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下边在调度中心添加任务，进入任务管理</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161207770.png" alt="image-20230211161207770"></p><p>点击新增，填写任务信息</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161226797.png" alt="image-20230211161226797"></p><p>* 0&#x2F;10 * * * ? 每10分钟触发一次</p><p>运行模式有BEAN和GLUE，bean模式较常用就是在项目工程中编写执行器的任务代码，GLUE是将任务代码编写在调度中心。</p><p>JobHandler任务方法名填写@XxlJob注解中的名称。</p><p>添加成功，启动任务</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161257545.png" alt="image-20230211161257545"></p><p>通过调度日志查看任务执行情况</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161333075.png" alt="image-20230211161333075"></p><p>下边启动媒资管理的service工程，启动执行器。</p><p>观察执行器方法的执行。</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161346572.png" alt="image-20230211161346572"></p><p>如果要停止任务需要在调度中心操作</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161359965.png" alt="image-20230211161359965"></p><p>任务跑一段时间注意清理日志</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211161411074.png" alt="image-20230211161411074"></p><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><blockquote><p>路由策略</p></blockquote><ul><li>FIRST（第一个）：固定选择第一个机器；</li><li>LAST（最后一个）：固定选择最后一个机器；</li><li>ROUND（轮询）：每个节点循环选择</li><li>RANDOM（随机）：随机选择在线的机器；</li><li>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</li><li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</li><li>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</li><li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</li><li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li><li>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数(节点序号和节点总数)；可根据分片参数开发分片任务；</li></ul><blockquote><p>调度过期策略</p></blockquote><p>当执行器执行的过程中,调度中心开始调度下一轮的任务时的策略</p><ul><li>忽略：调度过期后，忽略过期的任务，从当前时间开始重新计算下次触发时间；</li><li>立即执行一次：调度过期后，立即执行一次，并从当前时间开始重新计算下次触发时间；</li></ul><blockquote><p>阻塞处理策略</p></blockquote><ul><li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；</li><li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li><li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务</li><li>任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</li></ul><h3 id="分片广播"><a href="#分片广播" class="headerlink" title="分片广播"></a>分片广播</h3><p>掌握了xxl-job的基本使用，下边思考如何进行分布式任务处理呢？如下图，我们会启动多个执行器组成一个集群，去执行任务。</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211165820478.png" alt="image-20230211165820478"></p><p>下边要重点说的是分片广播策略，分片是指是调度中心将集群中的执行器标上序号：0，1，2，3…，广播是指每次调度会向集群中所有执行器发送调度请求，请求中携带分片参数。</p><p>如下图：</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230211170223041.png" alt="image-20230211170223041"></p><p>每个执行器收到调度请求根据分片参数自行决定是否执行任务。</p><p>另外xxl-job还支持动态分片，当执行器数量有变更时，调度中心会动态修改分片的数量。</p><blockquote><p>分片使用场景</p></blockquote><ul><li><p>分片任务场景：10个执行器的集群来处理10w条数据，每台机器只需要处理1w条数据，耗时降低10倍；</p></li><li><p>广播任务场景：广播执行器同时运行shell脚本、广播集群节点进行缓存更新等。</p></li></ul><p>所以，广播分片方式不仅可以充分发挥每个执行器的能力，并且根据分片参数可以控制任务是否执行，最终灵活控制了执行器集群分布式处理任务。</p><blockquote><p>作业分片方案</p></blockquote><p>对于任务,我们可以将任务堆积到数据库或者其他缓存中,任务添加成功后，对于要处理的任务会添加到待处理任务表中，现在启动多个执行器实例去查询这些待处理任务，此时如何保证多个执行器不会重复执行任务？</p><p>执行器收到调度请求后各自己查询属于自己的任务，这样就保证了执行器之间不会重复执行任务。</p><p>xxl-job设计作业分片就是为了分布式执行任务，XXL-JOB并不直接提供数据处理的功能，它只会给执行器分配好分片序号并向执行器传递分片总数、分片序号这些参数，开发者需要自行处理分片项与真实数据的对应关系。</p><p>下图表示了多个执行器获取视频处理任务的结构：</p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230212002758979.png" alt="image-20230212002758979" style="zoom:67%;"><p>每个执行器收到广播任务有两个参数：分片总数、分片序号。每个执行从数据表取任务时可以让任务id 模上 分片总数，如果等于分片序号则执行此任务。</p><p>上边两个执行器实例那么分片总数为2，序号为0、1，从任务1开始，如下：</p><p>1 % 2 &#x3D; 1  执行器2执行</p><p>2 % 2 &#x3D; 0  执行器1执行</p><p>3 % 2 &#x3D; 1   执行器2执行</p><p>以此类推.</p><h3 id="保证任务不重复执行"><a href="#保证任务不重复执行" class="headerlink" title="保证任务不重复执行"></a>保证任务不重复执行</h3><p>通过作业分片方案保证了执行器之间分配的任务不重复，另外如果同一个执行器在处理一个视频还没有完成，此时调度中心又一次请求调度，为了不重复处理同一个视频该怎么办？</p><ol><li>首先配置调度过期策略</li></ol><p>- 调度过期策略：<br>     - 忽略：调度过期后，忽略过期的任务，从当前时间开始重新计算下次触发时间；<br>     - 立即执行一次：调度过期后，立即执行一次，并从当前时间开始重新计算下次触发时间；<br>   - 阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；</p><p><span style="color:red;">这里我们选择忽略，如果立即执行一次可能会重复调度。</span></p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230212003649475.png" alt="image-20230212003649475"></p><ol start="2"><li>配置阻塞处理策略</li></ol><p>阻塞处理策略就是当前执行器正在执行任务还没有结束时调度时间到达到，此时该如何处理。</p><p>查看文档如下：<br>     单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；<br>     丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；<br>     覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</p><p><span style="color:red;">这里选择 丢弃后续调度，避免重复调度。</span></p><p>下面举个分片查询的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MediaProcessMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;MediaProcess&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 根据分片参数获取待处理任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shardTotal  分片总数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shardindex  分片序号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 任务数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;com.xuecheng.media.model.po.MediaProcess&gt; </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Mr.M</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2022/9/14 8:54</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Select(&quot;SELECT t.* FROM media_process t WHERE t.id % #&#123;shardTotal&#125; = #&#123;shardindex&#125; and t.status=&#x27;1&#x27; limit #&#123;count&#125;&quot;)</span><br>    List&lt;MediaProcess&gt; <span class="hljs-title function_">selectListByShardIndex</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;shardTotal&quot;)</span> <span class="hljs-type">int</span> shardTotal, <span class="hljs-meta">@Param(&quot;shardindex&quot;)</span> <span class="hljs-type">int</span> shardindex, <span class="hljs-meta">@Param(&quot;count&quot;)</span> <span class="hljs-type">int</span> count)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三十三、密码学"><a href="#三十三、密码学" class="headerlink" title="三十三、密码学"></a>三十三、密码学</h2><h3 id="常见加密方式"><a href="#常见加密方式" class="headerlink" title="常见加密方式"></a>常见加密方式</h3><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230214095745301.png" alt="image-20230214095745301" style="zoom:50%;"><h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><p>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p><p>示例</p><ul><li>我们现在有一个原文3要发送给B</li><li>设置密钥为108, 3 * 108 &#x3D; 324, 将324作为密文发送给B</li><li>B拿到密文324后, 使用324&#x2F;108 &#x3D; 3 得到原文</li></ul><h5 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h5><ul><li><p>在Java 8中，Base64编码已经成为Java类库的标准,并内置了 Base64 编码的编码器和解码器。</p></li><li><p>是一种基于 64 个可打印字符来表示二进制数据的表示方法, 由A-Z、a-z、0-9、+、&#x2F;共64个字符组成，去掉i I o O + &#x2F;即base58</p></li><li><p>常用于在处理文本数据的场合,表示、传输、存储一些二进制数据,包括MIME的电子邮件及XML的一些复杂数据</p></li><li><p>base64以三个字节为一组，如果最后一组不足3个字节，则使用&#x3D;号补充</p></li></ul><blockquote><p>实战</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64Test</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 使用jdk原生来实现base64</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdk</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是一段测试文本&quot;</span>;<br>    <span class="hljs-comment">// 编码 1.8才提供的</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encodedStr</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(str.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 5LmQ5LmL6ICFamF2YQ==</span><br>    System.out.println(<span class="hljs-string">&quot;encodedStr:&quot;</span> + encodedStr);<br>    <span class="hljs-comment">// 解码</span><br>    <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(encodedStr.getBytes(StandardCharsets.UTF_8));<br>    System.out.println(<span class="hljs-string">&quot;decodedStr:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode, StandardCharsets.UTF_8));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 使用commons-codec来实现base64</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">codec</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是一段测试文本&quot;</span>;<br>    <span class="hljs-comment">// 编码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encodedStr</span> <span class="hljs-operator">=</span> org.apache.commons.codec.binary.Base64<br>        .encodeBase64String(str.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 5LmQ5LmL6ICFamF2YQ==</span><br>    System.out.println(<span class="hljs-string">&quot;encodedStr:&quot;</span> + encodedStr);<br>    <span class="hljs-comment">// 解码</span><br>    <span class="hljs-type">byte</span>[] decode = org.apache.commons.codec.binary.Base64<br>        .decodeBase64(encodedStr.getBytes(StandardCharsets.UTF_8));<br>    System.out.println(<span class="hljs-string">&quot;decodedStr:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode, StandardCharsets.UTF_8));<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Base64工具类</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> admin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">BASELENGTH</span>           <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">LOOKUPLENGTH</span>         <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">TWENTYFOURBITGROUP</span>   <span class="hljs-operator">=</span> <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">EIGHTBIT</span>             <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">SIXTEENBIT</span>           <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">FOURBYTE</span>             <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>     <span class="hljs-variable">SIGN</span>                 <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>    <span class="hljs-variable">PAD</span>                  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;=&#x27;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[]  base64Alphabet       = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[BASELENGTH];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[]  lookUpBase64Alphabet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[LOOKUPLENGTH];<br><br>    <span class="hljs-keyword">static</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; BASELENGTH; ++i)<br>        &#123;<br>            base64Alphabet[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z&#x27;</span>; i &gt;= <span class="hljs-string">&#x27;A&#x27;</span>; i--)<br>        &#123;<br>            base64Alphabet[i] = (<span class="hljs-type">byte</span>) (i - <span class="hljs-string">&#x27;A&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;z&#x27;</span>; i &gt;= <span class="hljs-string">&#x27;a&#x27;</span>; i--)<br>        &#123;<br>            base64Alphabet[i] = (<span class="hljs-type">byte</span>) (i - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">26</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;9&#x27;</span>; i &gt;= <span class="hljs-string">&#x27;0&#x27;</span>; i--)<br>        &#123;<br>            base64Alphabet[i] = (<span class="hljs-type">byte</span>) (i - <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">52</span>);<br>        &#125;<br><br>        base64Alphabet[<span class="hljs-string">&#x27;+&#x27;</span>] = <span class="hljs-number">62</span>;<br>        base64Alphabet[<span class="hljs-string">&#x27;/&#x27;</span>] = <span class="hljs-number">63</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">25</span>; i++)<br>        &#123;<br>            lookUpBase64Alphabet[i] = (<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;A&#x27;</span> + i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>, j = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">51</span>; i++, j++)<br>        &#123;<br>            lookUpBase64Alphabet[i] = (<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + j);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">52</span>, j = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">61</span>; i++, j++)<br>        &#123;<br>            lookUpBase64Alphabet[i] = (<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;0&#x27;</span> + j);<br>        &#125;<br>        lookUpBase64Alphabet[<span class="hljs-number">62</span>] = (<span class="hljs-type">char</span>) <span class="hljs-string">&#x27;+&#x27;</span>;<br>        lookUpBase64Alphabet[<span class="hljs-number">63</span>] = (<span class="hljs-type">char</span>) <span class="hljs-string">&#x27;/&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWhiteSpace</span><span class="hljs-params">(<span class="hljs-type">char</span> octect)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (octect == <span class="hljs-number">0x20</span> || octect == <span class="hljs-number">0xd</span> || octect == <span class="hljs-number">0xa</span> || octect == <span class="hljs-number">0x9</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPad</span><span class="hljs-params">(<span class="hljs-type">char</span> octect)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (octect == PAD);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isData</span><span class="hljs-params">(<span class="hljs-type">char</span> octect)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (octect &lt; BASELENGTH &amp;&amp; base64Alphabet[octect] != -<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Encodes hex octects into Base64</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> binaryData Array containing binaryData</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Encoded Base64 array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] binaryData)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (binaryData == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lengthDataBits</span> <span class="hljs-operator">=</span> binaryData.length * EIGHTBIT;<br>        <span class="hljs-keyword">if</span> (lengthDataBits == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">fewerThan24bits</span> <span class="hljs-operator">=</span> lengthDataBits % TWENTYFOURBITGROUP;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberTriplets</span> <span class="hljs-operator">=</span> lengthDataBits / TWENTYFOURBITGROUP;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberQuartet</span> <span class="hljs-operator">=</span> fewerThan24bits != <span class="hljs-number">0</span> ? numberTriplets + <span class="hljs-number">1</span> : numberTriplets;<br>        <span class="hljs-type">char</span> encodedData[] = <span class="hljs-literal">null</span>;<br><br>        encodedData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[numberQuartet * <span class="hljs-number">4</span>];<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>, b1 = <span class="hljs-number">0</span>, b2 = <span class="hljs-number">0</span>, b3 = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">encodedIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dataIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numberTriplets; i++)<br>        &#123;<br>            b1 = binaryData[dataIndex++];<br>            b2 = binaryData[dataIndex++];<br>            b3 = binaryData[dataIndex++];<br><br>            l = (<span class="hljs-type">byte</span>) (b2 &amp; <span class="hljs-number">0x0f</span>);<br>            k = (<span class="hljs-type">byte</span>) (b1 &amp; <span class="hljs-number">0x03</span>);<br><br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> ((b1 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b1 &gt;&gt; <span class="hljs-number">2</span>) : (<span class="hljs-type">byte</span>) ((b1) &gt;&gt; <span class="hljs-number">2</span> ^ <span class="hljs-number">0xc0</span>);<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val2</span> <span class="hljs-operator">=</span> ((b2 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b2 &gt;&gt; <span class="hljs-number">4</span>) : (<span class="hljs-type">byte</span>) ((b2) &gt;&gt; <span class="hljs-number">4</span> ^ <span class="hljs-number">0xf0</span>);<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val3</span> <span class="hljs-operator">=</span> ((b3 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b3 &gt;&gt; <span class="hljs-number">6</span>) : (<span class="hljs-type">byte</span>) ((b3) &gt;&gt; <span class="hljs-number">6</span> ^ <span class="hljs-number">0xfc</span>);<br><br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k &lt;&lt; <span class="hljs-number">4</span>)];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[(l &lt;&lt; <span class="hljs-number">2</span>) | val3];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 &amp; <span class="hljs-number">0x3f</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// form integral number of 6-bit groups</span><br>        <span class="hljs-keyword">if</span> (fewerThan24bits == EIGHTBIT)<br>        &#123;<br>            b1 = binaryData[dataIndex];<br>            k = (<span class="hljs-type">byte</span>) (b1 &amp; <span class="hljs-number">0x03</span>);<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> ((b1 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b1 &gt;&gt; <span class="hljs-number">2</span>) : (<span class="hljs-type">byte</span>) ((b1) &gt;&gt; <span class="hljs-number">2</span> ^ <span class="hljs-number">0xc0</span>);<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[k &lt;&lt; <span class="hljs-number">4</span>];<br>            encodedData[encodedIndex++] = PAD;<br>            encodedData[encodedIndex++] = PAD;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fewerThan24bits == SIXTEENBIT)<br>        &#123;<br>            b1 = binaryData[dataIndex];<br>            b2 = binaryData[dataIndex + <span class="hljs-number">1</span>];<br>            l = (<span class="hljs-type">byte</span>) (b2 &amp; <span class="hljs-number">0x0f</span>);<br>            k = (<span class="hljs-type">byte</span>) (b1 &amp; <span class="hljs-number">0x03</span>);<br><br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> ((b1 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b1 &gt;&gt; <span class="hljs-number">2</span>) : (<span class="hljs-type">byte</span>) ((b1) &gt;&gt; <span class="hljs-number">2</span> ^ <span class="hljs-number">0xc0</span>);<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">val2</span> <span class="hljs-operator">=</span> ((b2 &amp; SIGN) == <span class="hljs-number">0</span>) ? (<span class="hljs-type">byte</span>) (b2 &gt;&gt; <span class="hljs-number">4</span>) : (<span class="hljs-type">byte</span>) ((b2) &gt;&gt; <span class="hljs-number">4</span> ^ <span class="hljs-number">0xf0</span>);<br><br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k &lt;&lt; <span class="hljs-number">4</span>)];<br>            encodedData[encodedIndex++] = lookUpBase64Alphabet[l &lt;&lt; <span class="hljs-number">2</span>];<br>            encodedData[encodedIndex++] = PAD;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encodedData);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Decodes Base64 data into octects</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encoded string containing Base64 data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Array containind decoded data.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decode(String encoded)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (encoded == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">char</span>[] base64Data = encoded.toCharArray();<br>        <span class="hljs-comment">// remove white spaces</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> removeWhiteSpace(base64Data);<br><br>        <span class="hljs-keyword">if</span> (len % FOURBYTE != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// should be divisible by four</span><br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberQuadruple</span> <span class="hljs-operator">=</span> (len / FOURBYTE);<br><br>        <span class="hljs-keyword">if</span> (numberQuadruple == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br><br>        <span class="hljs-type">byte</span> decodedData[] = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b2 = <span class="hljs-number">0</span>, b3 = <span class="hljs-number">0</span>, b4 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, d2 = <span class="hljs-number">0</span>, d3 = <span class="hljs-number">0</span>, d4 = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">encodedIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dataIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        decodedData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(numberQuadruple) * <span class="hljs-number">3</span>];<br><br>        <span class="hljs-keyword">for</span> (; i &lt; numberQuadruple - <span class="hljs-number">1</span>; i++)<br>        &#123;<br><br>            <span class="hljs-keyword">if</span> (!isData((d1 = base64Data[dataIndex++])) || !isData((d2 = base64Data[dataIndex++]))<br>                    || !isData((d3 = base64Data[dataIndex++])) || !isData((d4 = base64Data[dataIndex++])))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-comment">// if found &quot;no data&quot; just return null</span><br><br>            b1 = base64Alphabet[d1];<br>            b2 = base64Alphabet[d2];<br>            b3 = base64Alphabet[d3];<br>            b4 = base64Alphabet[d4];<br><br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (b1 &lt;&lt; <span class="hljs-number">2</span> | b2 &gt;&gt; <span class="hljs-number">4</span>);<br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (((b2 &amp; <span class="hljs-number">0xf</span>) &lt;&lt; <span class="hljs-number">4</span>) | ((b3 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xf</span>));<br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (b3 &lt;&lt; <span class="hljs-number">6</span> | b4);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!isData((d1 = base64Data[dataIndex++])) || !isData((d2 = base64Data[dataIndex++])))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// if found &quot;no data&quot; just return null</span><br>        &#125;<br><br>        b1 = base64Alphabet[d1];<br>        b2 = base64Alphabet[d2];<br><br>        d3 = base64Data[dataIndex++];<br>        d4 = base64Data[dataIndex++];<br>        <span class="hljs-keyword">if</span> (!isData((d3)) || !isData((d4)))<br>        &#123;<span class="hljs-comment">// Check if they are PAD characters</span><br>            <span class="hljs-keyword">if</span> (isPad(d3) &amp;&amp; isPad(d4))<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((b2 &amp; <span class="hljs-number">0xf</span>) != <span class="hljs-number">0</span>)<span class="hljs-comment">// last 4 bits should be zero</span><br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-type">byte</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[i * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>];<br>                System.arraycopy(decodedData, <span class="hljs-number">0</span>, tmp, <span class="hljs-number">0</span>, i * <span class="hljs-number">3</span>);<br>                tmp[encodedIndex] = (<span class="hljs-type">byte</span>) (b1 &lt;&lt; <span class="hljs-number">2</span> | b2 &gt;&gt; <span class="hljs-number">4</span>);<br>                <span class="hljs-keyword">return</span> tmp;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isPad(d3) &amp;&amp; isPad(d4))<br>            &#123;<br>                b3 = base64Alphabet[d3];<br>                <span class="hljs-keyword">if</span> ((b3 &amp; <span class="hljs-number">0x3</span>) != <span class="hljs-number">0</span>)<span class="hljs-comment">// last 2 bits should be zero</span><br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-type">byte</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[i * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>];<br>                System.arraycopy(decodedData, <span class="hljs-number">0</span>, tmp, <span class="hljs-number">0</span>, i * <span class="hljs-number">3</span>);<br>                tmp[encodedIndex++] = (<span class="hljs-type">byte</span>) (b1 &lt;&lt; <span class="hljs-number">2</span> | b2 &gt;&gt; <span class="hljs-number">4</span>);<br>                tmp[encodedIndex] = (<span class="hljs-type">byte</span>) (((b2 &amp; <span class="hljs-number">0xf</span>) &lt;&lt; <span class="hljs-number">4</span>) | ((b3 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xf</span>));<br>                <span class="hljs-keyword">return</span> tmp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123; <span class="hljs-comment">// No PAD e.g 3cQl</span><br>            b3 = base64Alphabet[d3];<br>            b4 = base64Alphabet[d4];<br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (b1 &lt;&lt; <span class="hljs-number">2</span> | b2 &gt;&gt; <span class="hljs-number">4</span>);<br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (((b2 &amp; <span class="hljs-number">0xf</span>) &lt;&lt; <span class="hljs-number">4</span>) | ((b3 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xf</span>));<br>            decodedData[encodedIndex++] = (<span class="hljs-type">byte</span>) (b3 &lt;&lt; <span class="hljs-number">6</span> | b4);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> decodedData;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * remove WhiteSpace from MIME containing encoded Base64 data.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data the byte array of base64 data (with WS)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the new length</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeWhiteSpace</span><span class="hljs-params">(<span class="hljs-type">char</span>[] data)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// count characters that&#x27;s not whitespace</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> data.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!isWhiteSpace(data[i]))<br>            &#123;<br>                data[newSize++] = data[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newSize;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h5><p>用来加密application&#x2F;x-www-from-urlencoded这样的数据格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">urlEncode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://test-zhgd/center/getUsername?username=gaozhe&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">encodedStr</span> <span class="hljs-operator">=</span> URLEncoder.encode(str, StandardCharsets.UTF_8.name());<br>    <span class="hljs-comment">// %E4%B9%90%E4%B9%8B%E8%80%85java</span><br>    System.out.println(<span class="hljs-string">&quot;encodedStr:&quot;</span> + encodedStr);<br>    <span class="hljs-comment">// url解码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> URLDecoder.decode(encodedStr, StandardCharsets.UTF_8.name());<br>    System.out.println(<span class="hljs-string">&quot;解码后的字符串:&quot;</span> + decode);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>加密和解密使用的是两个不同的密钥（public key 和 private key).公钥可以给任何人，私钥总是自己保留。</p><h5 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h5><p>md5是不可逆的加密算法,在一定程度上保证了安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Md5Test</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UTF8</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8.name();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用codec来实现md5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是一段测试文本&quot;</span>;<br>        <span class="hljs-comment">// 33b7ac3e2a042a131dc1596414d8ddf7</span><br>        System.out.println(DigestUtils.md5Hex(str.getBytes(UTF8)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用jdk原生api来实现md5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是一段测试文本&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">algorithm</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MD5&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hexStr</span> <span class="hljs-operator">=</span> MessageDigestUtils.doDigest(str,algorithm);<br>        <span class="hljs-comment">// 结果: 33b7ac3e2a042a131dc1596414d8ddf7</span><br>        System.out.println(<span class="hljs-string">&quot;hexStr:&quot;</span>+hexStr);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Utils</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SAFDSAFADS,(#336,.!F332&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String str)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>      md.update(KEY.getBytes(StandardCharsets.UTF_8));<br>      md.update(str.getBytes(StandardCharsets.UTF_8));<br>      <span class="hljs-type">byte</span>[] digest = md.digest();<br>      <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : digest) &#123;<br>        sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, b &amp; <span class="hljs-number">0xff</span>));<br>      &#125;<br>      <span class="hljs-keyword">return</span> sb.toString();<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三十四、枚举工具类"><a href="#三十四、枚举工具类" class="headerlink" title="三十四、枚举工具类"></a>三十四、枚举工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/18 14:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ValueEnum</span>&lt;T&gt; &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取枚举值</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 枚举值</span><br><span class="hljs-comment">   */</span><br>  T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/18 14:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NameValueEnum</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValueEnum</span>&lt;T&gt; &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取枚举名称</span><br><span class="hljs-comment">   */</span><br>  String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">EnumUtils</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 枚举工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/18 15:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumUtils</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据枚举值获取对应的枚举对象</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> enumClass 枚举类</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value     枚举值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 枚举对象</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValueEnum</span>&lt;V&gt;&gt;, V&gt; E <span class="hljs-title function_">getEnumByValue</span><span class="hljs-params">(Class&lt;E&gt; enumClass,</span><br><span class="hljs-params">      V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> getEnumByValue(enumClass.getEnumConstants(), value);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据枚举值获取对应的枚举对象</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> enums 枚举列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 枚举对象</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValueEnum</span>&lt;V&gt;&gt;, V&gt; E <span class="hljs-title function_">getEnumByValue</span><span class="hljs-params">(E[] enums, V value)</span> &#123;<br>    <span class="hljs-keyword">for</span> (E e : enums) &#123;<br>      <span class="hljs-keyword">if</span> (((ValueEnum&lt;V&gt;) e).getValue().equals(value)) &#123;<br>        <span class="hljs-keyword">return</span> e;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断枚举值是否在对应枚举列表存在</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> enums 枚举列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExist</span><span class="hljs-params">(ValueEnum&lt;T&gt;[] enums, T value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ValueEnum&lt;T&gt; e : enums) &#123;<br>      <span class="hljs-keyword">if</span> (value.equals(e.getValue())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断枚举值是否存在于指定枚举类中</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> enumClass 枚举类</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value     枚举值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValueEnum</span>&lt;V&gt;&gt;, V&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExist</span><span class="hljs-params">(Class&lt;E&gt; enumClass,</span><br><span class="hljs-params">      V value)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Enum&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValueEnum</span>&lt;V&gt;&gt; e : enumClass.getEnumConstants()) &#123;<br>      <span class="hljs-keyword">if</span> (((ValueEnum&lt;V&gt;) e).getValue().equals(value)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>demo</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/03/18 15:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TestEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NameValueEnum</span>&lt;Integer&gt; &#123;<br>  CONFIRMED(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;确认&quot;</span>),<br>  NOT_CONFIRMED(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;未确认&quot;</span>);<br><br>  <span class="hljs-keyword">private</span> Integer type;<br>  <span class="hljs-keyword">private</span> String desc;<br><br>  TestEnum(Integer type, String desc) &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.desc = desc;<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> desc;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> type;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三十五、Spring事件"><a href="#三十五、Spring事件" class="headerlink" title="三十五、Spring事件"></a>三十五、Spring事件</h2><p>Spring Event是Spring的事件通知机制，可以将相互耦合的代码解耦，从而方便功能的修改与添加。Spring Event是监听者模式的一个具体实现。</p><p>监听者模式包含了监听者Listener、事件Event、事件发布者EventPublish，过程就是EventPublish发布一个事件，被监听者捕获到，然后执行事件相应的方法。</p><p>Spring Event的相关API在spring-context包中。</p><blockquote><p>入门案例</p></blockquote><p>创建OptLogDTO类，用于封装操作日志信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OptLogDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> String requestIp; <span class="hljs-comment">//操作IP</span><br>    <span class="hljs-keyword">private</span> String type; <span class="hljs-comment">//日志类型 LogType&#123;OPT:操作类型;EX:异常类型&#125;</span><br>    <span class="hljs-keyword">private</span> String userName; <span class="hljs-comment">//操作人</span><br>    <span class="hljs-keyword">private</span> String description; <span class="hljs-comment">//操作描述</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建事件类SysLogEvent:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.itcast.dto.OptLogDTO;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEvent;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 定义系统日志事件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLogEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationEvent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SysLogEvent</span><span class="hljs-params">(OptLogDTO optLogDTO)</span> &#123;<br>        <span class="hljs-built_in">super</span>(optLogDTO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建监听器类SysLogListener:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.itcast.dto.OptLogDTO;<br><span class="hljs-keyword">import</span> cn.itcast.event.SysLogEvent;<br><span class="hljs-keyword">import</span> org.springframework.context.event.EventListener;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 异步监听日志事件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLogListener</span> &#123;<br>    <span class="hljs-meta">@Async</span><span class="hljs-comment">//异步处理</span><br>    <span class="hljs-meta">@EventListener(SysLogEvent.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveSysLog</span><span class="hljs-params">(SysLogEvent event)</span> &#123;<br>        <span class="hljs-type">OptLogDTO</span> <span class="hljs-variable">sysLog</span> <span class="hljs-operator">=</span> (OptLogDTO) event.getSource();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        System.out.println(<span class="hljs-string">&quot;监听到日志操作事件：&quot;</span> + sysLog + <span class="hljs-string">&quot; 线程id：&quot;</span> + id);<br>        <span class="hljs-comment">//将日志信息保存到数据库...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建Controller，用于发布事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.itcast.dto.OptLogDTO;<br><span class="hljs-keyword">import</span> cn.itcast.event.SysLogEvent;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEvent;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br>    <span class="hljs-meta">@GetMapping(&quot;/getUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//构造操作日志信息</span><br>        <span class="hljs-type">OptLogDTO</span> <span class="hljs-variable">logInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptLogDTO</span>();<br>        logInfo.setRequestIp(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        logInfo.setUserName(<span class="hljs-string">&quot;admin&quot;</span>);<br>        logInfo.setType(<span class="hljs-string">&quot;OPT&quot;</span>);<br>        logInfo.setDescription(<span class="hljs-string">&quot;查询用户信息&quot;</span>);<br><br>        <span class="hljs-comment">//构造事件对象</span><br>        <span class="hljs-type">ApplicationEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysLogEvent</span>(logInfo);<br>        <br>        <span class="hljs-comment">//发布事件</span><br>        applicationContext.publishEvent(event);<br>        <br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        System.out.println(<span class="hljs-string">&quot;发布事件,线程id：&quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建启动类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAsync</span><span class="hljs-comment">//启用异步处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringEventApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringEventApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三十六、图片处理"><a href="#三十六、图片处理" class="headerlink" title="三十六、图片处理"></a>三十六、图片处理</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.coobird<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thumbnailator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.4.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="指定大小缩放"><a href="#指定大小缩放" class="headerlink" title="指定大小缩放"></a>指定大小缩放</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//size(宽度, 高度)  </span><br>  <br><span class="hljs-comment">/*   </span><br><span class="hljs-comment"> * 若图片横比200小，高比300小，不变   </span><br><span class="hljs-comment"> * 若图片横比200小，高比300大，高缩小到300，图片比例不变   </span><br><span class="hljs-comment"> * 若图片横比200大，高比300小，横缩小到200，图片比例不变   </span><br><span class="hljs-comment"> * 若图片横比200大，高比300大，图片按比例缩小，横为200或高为300   </span><br><span class="hljs-comment"> */</span>   <br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">200</span>, <span class="hljs-number">300</span>)  <br>        .toFile(<span class="hljs-string">&quot;c:/a380_200x300.jpg&quot;</span>);  <br>  <br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">2560</span>, <span class="hljs-number">2048</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_2560x2048.jpg&quot;</span>);  <br></code></pre></td></tr></table></figure><h3 id="单个图片等比例缩放"><a href="#单个图片等比例缩放" class="headerlink" title="单个图片等比例缩放"></a>单个图片等比例缩放</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;c:\\test.png&quot;</span>);<br> <br>Thumbnails.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file)).scale(<span class="hljs-number">3.0</span>).toFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;c:\\yyyyy.png&quot;</span>));<br></code></pre></td></tr></table></figure><p>  3.0是一个double类型的数字，缩放比例，大于1就是变大，小于1就是缩小</p><h3 id="不按照比例，指定大小进行缩放"><a href="#不按照比例，指定大小进行缩放" class="headerlink" title="不按照比例，指定大小进行缩放"></a><strong>不按照比例，指定大小进行缩放</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//keepAspectRatio(false) 默认是按照比例缩放的  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)   <br>        .keepAspectRatio(<span class="hljs-literal">false</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_200x200.jpg&quot;</span>);  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> JSONObject <span class="hljs-title function_">compressTest</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    res.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>    <span class="hljs-comment">// 判断上传文件是否为空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == file || <span class="hljs-number">0</span> == file.getSize()) &#123;<br>      res.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;上传文件不能为空&quot;</span>);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-comment">// 拿到文件后缀名，例如：png</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> file.getOriginalFilename()<br>        .substring(file.getOriginalFilename().lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// UUID 作为文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> String.valueOf(UUID.randomUUID());<br>    <span class="hljs-comment">// 新的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4/14&quot;</span> + <span class="hljs-string">&quot;/&quot;</span> + uuid + <span class="hljs-string">&quot;.&quot;</span> + suffix;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否是图片</span><br><span class="hljs-comment">     * 判断是否超过了 100K</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (isPicture(suffix) &amp;&amp; (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">0.1</span>) &lt;= file.getSize()) &#123;<br>      <span class="hljs-comment">// 在项目根目录下的 upload 目录中生成临时文件</span><br>      <span class="hljs-type">File</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> File.createTempFile(<span class="hljs-string">&quot;compress&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>+suffix);<br>      <span class="hljs-comment">// 小于 1M 的</span><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">0.1</span>) &lt;= file.getSize() &amp;&amp; file.getSize() &lt;= (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)) &#123;<br>        Thumbnails.of(file.getInputStream()).scale(<span class="hljs-number">1f</span>).outputQuality(<span class="hljs-number">0.3f</span>).toFile(newFile);<br>      &#125;<br>      <span class="hljs-comment">// 1 - 2M 的</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>) &lt; file.getSize() &amp;&amp; file.getSize() &lt;= (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>)) &#123;<br>        Thumbnails.of(file.getInputStream()).scale(<span class="hljs-number">1f</span>).outputQuality(<span class="hljs-number">0.2f</span>).toFile(newFile);<br>      &#125;<br>      <span class="hljs-comment">// 2M 以上的</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>) &lt; file.getSize()) &#123;<br>        Thumbnails.of(file.getInputStream()).scale(<span class="hljs-number">1f</span>).outputQuality(<span class="hljs-number">0.1f</span>).toFile(newFile);<br>      &#125;<br>      <span class="hljs-comment">// 获取输入流</span><br>      <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(newFile);<br>      <span class="hljs-comment">// 转为 MultipartFile</span><br>      <span class="hljs-type">MultipartFile</span> <span class="hljs-variable">multipartFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockMultipartFile</span>(<span class="hljs-string">&quot;file&quot;</span>, newFile.getName(), <span class="hljs-string">&quot;text/plain&quot;</span>,<br>          input);<br>      <span class="hljs-comment">// 开始上传</span><br>      MinIOUtils.uploadFile(multipartFile, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;compress&quot;</span>);<br>      <span class="hljs-comment">// 删除临时文件</span><br>      newFile.delete();<br>      <span class="hljs-comment">// 返回状态以及图片路径</span><br>      res.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>);<br>      res.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;上传成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 不需要压缩，直接上传</span><br>    <span class="hljs-keyword">else</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MediaFileVO <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartFile file, String folder, String bucket)</span><br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">file_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(bucket)) &#123;<br>      bucket = bucketName;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//初始化minioClient</span><br>      initMinioClient();<br>      <span class="hljs-comment">//如果不存在bucket则创建</span><br>      createBucket(bucket);<br>      <span class="hljs-type">MediaFileVO</span> <span class="hljs-variable">mediaFileVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaFileVO</span>();<br>      mediaFileVO.setFileSize(file.getSize());<br>      mediaFileVO.setBucketName(bucket);<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>      <span class="hljs-comment">// 获取文件名</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">orgName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(orgName)) &#123;<br>        orgName = file.getName();<br>      &#125;<br>      orgName = getFileName(orgName);<br>      mediaFileVO.setFileName(orgName);<br>      <span class="hljs-comment">//获取文件类型</span><br>      <span class="hljs-keyword">if</span> (orgName.indexOf(<span class="hljs-string">&quot;.&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> orgName.substring(orgName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>        mediaFileVO.setFileType(extension);<br>      &#125;<br>      <span class="hljs-comment">//加密文件名称</span><br>      orgName = DigestUtils.md5Hex(file.getBytes());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> (!orgName.contains(<span class="hljs-string">&quot;.&quot;</span>)<br>          ? orgName + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis()<br>          : orgName.substring(<span class="hljs-number">0</span>, orgName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)) + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis()<br>              + orgName.substring(orgName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>))) + <span class="hljs-string">&quot;.&quot;</span> + mediaFileVO.getFileType();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>      <span class="hljs-keyword">if</span> (StringUtils.isNoneEmpty(folder)) &#123;<br>        path = folder + <span class="hljs-string">&quot;/&quot;</span> + path;<br>      &#125;<br>      <span class="hljs-comment">// 使用putObject上传一个本地文件到存储桶中。</span><br>      <span class="hljs-keyword">if</span> (fileName.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>        fileName = fileName.substring(<span class="hljs-number">1</span>);<br>      &#125;<br>      fileName = path + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br>      mediaFileVO.setFilePath(<span class="hljs-string">&quot;/&quot;</span> + fileName);<br>      <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">objectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder().object(fileName)<br>          .bucket(bucket)<br>          .contentType(file.getContentType())<br>          .stream(stream, stream.available(), -<span class="hljs-number">1</span>).build();<br>      minioClient.putObject(objectArgs);<br>      stream.close();<br>      file_url = getBasisUrl(bucket) + fileName;<br>      mediaFileVO.setUrl(file_url);<br>      <span class="hljs-keyword">return</span> mediaFileVO;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(e.getMessage(), e);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e.getMessage());<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="批量产生缩略图"><a href="#批量产生缩略图" class="headerlink" title="批量产生缩略图"></a>批量产生缩略图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Thumbnails.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\pics&quot;</span>).listFiles()).scale(<span class="hljs-number">0.2</span>).outputFormat(<span class="hljs-string">&quot;png&quot;</span>)<br> <br>.toFiles(Rename.PREFIX_DOT_THUMBNAIL);<br></code></pre></td></tr></table></figure><h3 id="控制图片质量，图片尺寸不变"><a href="#控制图片质量，图片尺寸不变" class="headerlink" title="控制图片质量，图片尺寸不变"></a>控制图片质量，图片尺寸不变</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cobol">File fromPic  =new File(&quot;C:\\Users\\Administrator\\Desktop\\IdCardPositive_987136936_1531741954688.jpeg&quot;);<br>File toPic =new File(&quot;C:\\Users\\Administrator\\Desktop\\IdCardPositive_987136936_08.jpeg&quot;);<br>Thumbnails.of(fromPic).scale(1f).outputQuality(0.25f).toFile(toPic);  <br></code></pre></td></tr></table></figure><p><strong>outputQuality就是用来控制图片质量的</strong></p><h3 id="给图片加水印"><a href="#给图片加水印" class="headerlink" title="给图片加水印"></a>给图片加水印</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Thumbnails.of(fromPic).scale(<span class="hljs-number">0.8</span>)<br>          .watermark(Positions.BOTTOM_RIGHT, ImageIO.read(waterPic), <span class="hljs-number">0.5f</span>)<br>          .outputQuality(<span class="hljs-number">0.8f</span>).toFile(toPic);<br> <br><span class="hljs-comment">//watermark(位置，水印图，透明度)  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">1280</span>, <span class="hljs-number">1024</span>)  <br>        .watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;images/watermark.png&quot;</span>)), <span class="hljs-number">0.5f</span>)   <br>        .outputQuality(<span class="hljs-number">0.8f</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_watermark_bottom_right.jpg&quot;</span>);  <br>  <br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">1280</span>, <span class="hljs-number">1024</span>)  <br>        .watermark(Positions.CENTER, ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;images/watermark.png&quot;</span>)), <span class="hljs-number">0.5f</span>)   <br>        .outputQuality(<span class="hljs-number">0.8f</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_watermark_center.jpg&quot;</span>);  <br></code></pre></td></tr></table></figure><h3 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a><strong>旋转图片</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thumbnails.of(fromPic).scale(<span class="hljs-number">0.5</span>).rotate(<span class="hljs-number">90</span>).toFile(toPic);  <br></code></pre></td></tr></table></figure><h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a><strong>图片裁剪</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Thumbnails.of(fromPic).sourceRegion(Positions.CENTER, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>).scale(<span class="hljs-number">1.0</span>).toFile(toPic);<br> <br><span class="hljs-comment">//sourceRegion()  </span><br>  <br><span class="hljs-comment">//图片中心400*400的区域  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)  <br>        .sourceRegion(Positions.CENTER, <span class="hljs-number">400</span>,<span class="hljs-number">400</span>)  <br>        .size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <br>        .keepAspectRatio(<span class="hljs-literal">false</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_region_center.jpg&quot;</span>);  <br>  <br><span class="hljs-comment">//图片右下400*400的区域  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)  <br>        .sourceRegion(Positions.BOTTOM_RIGHT, <span class="hljs-number">400</span>,<span class="hljs-number">400</span>)  <br>        .size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <br>        .keepAspectRatio(<span class="hljs-literal">false</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_region_bootom_right.jpg&quot;</span>);  <br>  <br><span class="hljs-comment">//指定坐标  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)  <br>        .sourceRegion(<span class="hljs-number">600</span>, <span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>)  <br>        .size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <br>        .keepAspectRatio(<span class="hljs-literal">false</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_region_coord.jpg&quot;</span>);  <br></code></pre></td></tr></table></figure><h3 id="图像的格式转换"><a href="#图像的格式转换" class="headerlink" title="图像的格式转换"></a>图像的格式转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//outputFormat(图像格式)  </span><br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">1280</span>, <span class="hljs-number">1024</span>)  <br>        .outputFormat(<span class="hljs-string">&quot;png&quot;</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_1280x1024.png&quot;</span>);   <br>  <br>Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">1280</span>, <span class="hljs-number">1024</span>)  <br>        .outputFormat(<span class="hljs-string">&quot;gif&quot;</span>)   <br>        .toFile(<span class="hljs-string">&quot;c:/a380_1280x1024.gif&quot;</span>);   <br></code></pre></td></tr></table></figure><h3 id="输出到BufferedImage"><a href="#输出到BufferedImage" class="headerlink" title="输出到BufferedImage"></a><strong>输出到BufferedImage</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//asBufferedImage() 返回BufferedImage  </span><br><span class="hljs-type">BufferedImage</span> <span class="hljs-variable">thumbnail</span> <span class="hljs-operator">=</span> Thumbnails.of(<span class="hljs-string">&quot;images/a380_1280x1024.jpg&quot;</span>)   <br>        .size(<span class="hljs-number">1280</span>, <span class="hljs-number">1024</span>)  <br>        .asBufferedImage();  <br> <br>ImageIO.write(thumbnail, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;c:/a380_1280x1024_BufferedImage.jpg&quot;</span>));   <br></code></pre></td></tr></table></figure><h2 id="三十七、敏感词过滤"><a href="#三十七、敏感词过滤" class="headerlink" title="三十七、敏感词过滤"></a>三十七、敏感词过滤</h2><blockquote><p> 技术选型</p></blockquote><table><thead><tr><th><strong>方案</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>数据库模糊查询</td><td>效率太低</td></tr><tr><td>String.indexOf(“”)查找</td><td>数据库量大的话也是比较慢</td></tr><tr><td>全文检索</td><td>分词再匹配</td></tr><tr><td>DFA算法</td><td>确定有穷自动机(一种数据结构)</td></tr></tbody></table><blockquote><p>DFA实现原理</p></blockquote><p>DFA全称为：Deterministic Finite Automaton,即确定有穷自动机。</p><p>存储：一次性的把所有的敏感词存储到了多个map中，就是下图表示这种结构</p><p>敏感词：冰毒、大麻、大坏蛋</p><p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20210524160517744.png" alt="image-20210524160517744"></p><p>检索的过程</p><img src="/2022/07/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20230625000621934.png" alt="image-20230625000621934" style="zoom:50%;"><blockquote><p>实战</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 敏感词信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_sensitive&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmSensitive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敏感词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;sensitives&quot;)</span><br>    <span class="hljs-keyword">private</span> String sensitives;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//.....省略</span><br><br><span class="hljs-comment">//自管理的敏感词过滤</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSensitive</span> <span class="hljs-operator">=</span> handleSensitiveScan((String) textAndImages.get(<span class="hljs-string">&quot;content&quot;</span>), wmNews);<br><span class="hljs-keyword">if</span>(!isSensitive) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">//.....省略</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensitiveWordUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; dictionaryMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成关键词字典库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> words</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMap</span><span class="hljs-params">(Collection&lt;String&gt; words)</span> &#123;<br>        <span class="hljs-keyword">if</span> (words == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;敏感词列表不能为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">// map初始长度words.size()，整个字典库的入口字数(小于words.size()，因为不同的词可能会有相同的首字)</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(words.size());<br>        <span class="hljs-comment">// 遍历过程中当前层次的数据</span><br>        Map&lt;String, Object&gt; curMap = <span class="hljs-literal">null</span>;<br>        Iterator&lt;String&gt; iterator = words.iterator();<br><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> iterator.next();<br>            curMap = map;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> word.length();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                <span class="hljs-comment">// 遍历每个词的字</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.valueOf(word.charAt(i));<br>                <span class="hljs-comment">// 当前字在当前层是否存在, 不存在则新建, 当前层数据指向下一个节点, 继续判断是否存在数据</span><br>                Map&lt;String, Object&gt; wordMap = (Map&lt;String, Object&gt;) curMap.get(key);<br>                <span class="hljs-keyword">if</span> (wordMap == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 每个节点存在两个数据: 下一个节点和isEnd(是否结束标志)</span><br>                    wordMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>                    wordMap.put(<span class="hljs-string">&quot;isEnd&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>                    curMap.put(key, wordMap);<br>                &#125;<br>                curMap = wordMap;<br>                <span class="hljs-comment">// 如果当前字是词的最后一个字，则将isEnd标志置1</span><br>                <span class="hljs-keyword">if</span> (i == len -<span class="hljs-number">1</span>) &#123;<br>                    curMap.put(<span class="hljs-string">&quot;isEnd&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        dictionaryMap = map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索文本中某个文字是否匹配关键词</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beginIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">checkWord</span><span class="hljs-params">(String text, <span class="hljs-type">int</span> beginIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dictionaryMap == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;字典不能为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEnd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">wordLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        Map&lt;String, Object&gt; curMap = dictionaryMap;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-comment">// 从文本的第beginIndex开始匹配</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> beginIndex; i &lt; len; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.valueOf(text.charAt(i));<br>            <span class="hljs-comment">// 获取当前key的下一个节点</span><br>            curMap = (Map&lt;String, Object&gt;) curMap.get(key);<br>            <span class="hljs-keyword">if</span> (curMap == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                wordLength ++;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(curMap.get(<span class="hljs-string">&quot;isEnd&quot;</span>))) &#123;<br>                    isEnd = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isEnd) &#123;<br>            wordLength = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> wordLength;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取匹配的关键词和命中次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; <span class="hljs-title function_">matchWords</span><span class="hljs-params">(String text)</span> &#123;<br>        Map&lt;String, Integer&gt; wordMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">wordLength</span> <span class="hljs-operator">=</span> checkWord(text, i);<br>            <span class="hljs-keyword">if</span> (wordLength &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> text.substring(i, i + wordLength);<br>                <span class="hljs-comment">// 添加关键词匹配次数</span><br>                <span class="hljs-keyword">if</span> (wordMap.containsKey(word)) &#123;<br>                    wordMap.put(word, wordMap.get(word) + <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    wordMap.put(word, <span class="hljs-number">1</span>);<br>                &#125;<br><br>                i += wordLength - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> wordMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;法轮&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;法轮功&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;冰毒&quot;</span>);<br>        initMap(list);<br>        String content=<span class="hljs-string">&quot;我是一个好人，并不会卖冰毒，也不操练法轮功,我真的不卖冰毒&quot;</span>;<br>        Map&lt;String, Integer&gt; map = matchWords(content);<br>        System.out.println(map);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmSensitiveMapper wmSensitiveMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自管理的敏感词审核</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleSensitiveScan</span><span class="hljs-params">(String content, WmNews wmNews)</span> &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">//获取所有的敏感词</span><br>    List&lt;WmSensitive&gt; wmSensitives = wmSensitiveMapper.selectList(Wrappers.&lt;WmSensitive&gt;lambdaQuery().select(WmSensitive::getSensitives));<br>    List&lt;String&gt; sensitiveList = wmSensitives.stream().map(WmSensitive::getSensitives).collect(Collectors.toList());<br><br>    <span class="hljs-comment">//初始化敏感词库</span><br>    SensitiveWordUtil.initMap(sensitiveList);<br><br>    <span class="hljs-comment">//查看文章中是否包含敏感词</span><br>    Map&lt;String, Integer&gt; map = SensitiveWordUtil.matchWords(content);<br>    <span class="hljs-keyword">if</span>(map.size() &gt;<span class="hljs-number">0</span>)&#123;<br>        updateWmNews(wmNews,(<span class="hljs-type">short</span>) <span class="hljs-number">2</span>,<span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>+map);<br>        flag = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程技巧总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql45讲</title>
    <link href="/2022/06/16/MySQL45%E8%AE%B2/"/>
    <url>/2022/06/16/MySQL45%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230621220231297.png" alt="image-20230621220231297"></p><h2 id="MYSQL体系结构"><a href="#MYSQL体系结构" class="headerlink" title="MYSQL体系结构"></a>MYSQL体系结构</h2><h3 id="总体架构图"><a href="#总体架构图" class="headerlink" title="总体架构图"></a>总体架构图</h3><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220618163821998.png" alt="image-20220618163821998" style="zoom: 50%;"><p>大体来说，MYSQL分为Server层和执行引擎层两个部分</p><p><span style="color:red;">Server 层包括<strong>连接器</strong>、<strong>查询缓存</strong>、<strong>分析器</strong>、<strong>优化器</strong>、<strong>执行器</strong>等</span>，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 <strong>InnoDB</strong>，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p><p>也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine&#x3D;memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。</p><p>从图中不难看出，<span style="color:red">不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。</span>你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysql</span> -h<span class="hljs-variable">$ip</span> -P<span class="hljs-variable">$port</span> -u<span class="hljs-variable">$user</span> -p<br></code></pre></td></tr></table></figure><p>输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。</p><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><ul><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</li><li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li></ul><p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p><p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;wait_timeout&#x27;</span><br></code></pre></td></tr></table></figure><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。</p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p><p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p><p>怎么解决这个问题呢？你可以考虑以下两种方案。</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。</p><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p><p><span style="color:red">但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</span></p><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> SQL_CACHE <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> T <span class="hljs-keyword">where</span> ID<span class="hljs-operator">=</span><span class="hljs-number">10</span>；<br></code></pre></td></tr></table></figure><p><span style="color:red">需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</span></p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> elect <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> ID<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br>ERROR <span class="hljs-number">1064</span> (<span class="hljs-number">42000</span>): You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;elect * from t where ID=1&#x27;</span> <span class="hljs-keyword">at</span> line <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><span style="color:red">一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</span></p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">using</span>(ID)  <span class="hljs-keyword">where</span> t1.c<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> t2.d<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><ul><li>既可以先从表 t1 里面取出 c&#x3D;10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</li><li>也可以先从表 t2 里面取出 d&#x3D;20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</li></ul><p>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。</p><p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。</p><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> T <span class="hljs-keyword">where</span> ID<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br><br>ERROR <span class="hljs-number">1142</span> (<span class="hljs-number">42000</span>): <span class="hljs-keyword">SELECT</span> command denied <span class="hljs-keyword">to</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;b&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> <span class="hljs-string">&#x27;T&#x27;</span><br></code></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>至此，这个语句就执行完成了。</p><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230622141757043.png" alt="image-20230622141757043"></p><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><blockquote><p>数据库缓冲池buffer pool</p></blockquote><p>我们知道Innodb引擎默认的数据存储单位是页, 增删改的操作实际上是访问页(包括新建页面、读页面、写页面). 而这样的操作会使IO消耗的时间较长, 所以为了提高效率, 引入了缓冲池, 在访问页面之前, 会先将磁盘中的页缓存到内存中的buffer pool, 再进行访问. 操作完后定期再将数据重新刷新到磁盘</p><p>buffer pool的大体结构为:</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230622143007765.png" alt="image-20230622143007765" style="zoom:50%;"><p>从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典 信息等。</p><blockquote><p>更改缓冲区change buffer</p></blockquote><p>更改缓冲区(针对于非唯一二级索引页), 在执行DML语句时, 如果这些数据Page没有在buffer pool中, 不会直接操作磁盘, 而将这些数据变更存在更改缓冲区change buffer中, 在未来数据被读取时, 再将数据合并恢复到buffer pool中, 再将合并的数据刷新到磁盘中</p><p>与聚集索引不同, 二级索引通常是非唯一的, 并且以相对随机的顺序插入二级索引. 同样, 删除和更新可能会影响索引树中不相邻的二级索引页, 如果每一次都操作磁盘的话, 则会造成大量的磁盘IO. 有了change buffer之后, 我们可以在buffer pool中进行合并处理, 减少磁盘IO</p><blockquote><p>自适应hash</p></blockquote><p>Adaptive Hash Index: 自适应hash索引, 用于优化对buffer pool数据的查询. Innodb存储引擎会监控对表上各索引页的查询, 如果观察到hash索引可以提高速度, 则会创建hash索引, 称之为自适应hash索引</p><blockquote><p>日志缓冲区log buffer</p></blockquote><p>用来保存要写入到磁盘中的log日志数据(redo log、undo log), 默认大小为16MB, 日志缓冲区的日志会定期刷新到磁盘中. 如果需要更新、插入或者删除许多行的事务, 增加日志缓冲区的大小可以节省磁盘IO</p><h2 id="SQL更新语句的执行流程"><a href="#SQL更新语句的执行流程" class="headerlink" title="SQL更新语句的执行流程"></a>SQL更新语句的执行流程</h2><p>前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p><p>那么，一条更新语句的执行流程又是怎样的呢？</p><p>之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？</p><p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 ID 和一个整型字段 c：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> T(ID <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, c <span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><p>如果要将 ID&#x3D;2 这一行的值加 1，SQL 语句就会这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> T <span class="hljs-keyword">set</span> c<span class="hljs-operator">=</span>c<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> ID<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。你执行语句前要先连接数据库，这是连接器的工作。前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。当然mysql8.0版本也删除了缓存。</p><p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</p><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：<strong>redo log</strong>（重做日志）和 <strong>binlog</strong>（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，<strong>redo log</strong> 和 <strong>binlog</strong> 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。</p><h3 id="重要的日志模块：redolog"><a href="#重要的日志模块：redolog" class="headerlink" title="重要的日志模块：redolog"></a>重要的日志模块：redolog</h3><p>不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。</p><p>如果有人要赊账或者还账的话，掌柜一般有两种做法：</p><ul><li>一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉；</li><li>另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。</li></ul><p>在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p><p>这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？</p><p>同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。</p><p>而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p><p>具体来说，<span style="color:red;">当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。</span>同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p><p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。</p><p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220618163806443.png" alt="image-20220618163806443" style="zoom: 67%;"><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p><span style="color:red;">有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe。</strong></span></p><p>要理解 <strong>crash-safe</strong> 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p><h3 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h3><p>前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 <span style="color:red;">redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</span></p><p>我想你肯定会问，为什么会有两份日志呢？因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。那为什么不用binlog实现crash-safe？不考虑mysql现有的实现，假如现在重新设计mysql，只用一个binlog是否可以实现cash_safe能力呢？答案是可以的，只不过binlog中也要加入checkpoint，数据库故障重启后，binlog checkpoint之后的sql都重放一遍。但是这样做让binlog耦合的功能太多。</p><p>这两种日志有以下三点不同：</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p><ol><li>执行器先找引擎取 ID&#x3D;2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID&#x3D;2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。（最后commit阶段redo log会写入binlog的文件名和位置信息来保证binlog和redo log的一致性）</li></ol><p>这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220618165617592.png" alt="image-20220618165617592" style="zoom:50%;"><p>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一 们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？</p><p>前面我们说过了，binlog 会记录所有的逻辑操作，并且是采用“追加写”的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。</p><p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</p><ul><li>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；</li><li>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</li></ul><p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p><p>好了，说完了数据恢复过程，我们回来说说，为什么日志需要“两阶段提交”。这里不妨用反证法来进行解释。</p><p>由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p><ol><li>先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</li><li>先写 binlog 后写 redo log。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</li></ol><p><span style="color:red;">总的来说：redolog主要负责了事务存储了这页做了什么改动，binlog存储了sql语句负责归档操作。各司其职，相互配合，才提供(保证)了现有功能的完整性。</span></p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="全局锁和表锁"><a href="#全局锁和表锁" class="headerlink" title="全局锁和表锁"></a>全局锁和表锁</h3><p>今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。</p><p>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。</p><p>这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。</p><blockquote><p> <strong>全局锁</strong></p></blockquote><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 <strong>Flush tables with read lock</strong> (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。使用<strong>unlock tables</strong>可以解除</p><p><strong>全局锁的典型使用场景是，做全库逻辑备份</strong>。也就是把整库每个表都 select 出来存成文本。</p><p>以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。但是让整库都只读，听上去就很危险：</p><ul><li>如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；</li><li>如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。</li></ul><p>看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。</p><p>如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626160058937.png" alt="image-20230626160058937"></p><p>可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。</p><p>作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？</p><p>也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。</p><p>说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？</p><p>是的，就是在可重复读隔离级别下开启一个事务。</p><p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p>你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？一致性读是好，但前提是引擎要支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。</p><p>所以，<strong>single-transaction 方法只适用于所有的表使用事务引擎的库</strong>。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p><p>你也许会问，既然要全库只读，为什么不使用 <strong>set global readonly&#x3D;true</strong> 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：</p><ul><li>一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</li><li>二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</li></ul><p>业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。</p><p>但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。</p><blockquote><p><strong>表级锁</strong></p></blockquote><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p><strong>表锁的语法是 lock tables … read&#x2F;write</strong>。与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。简单来说就是对表加了读锁(共享锁), 那么该线程以及其他线程只能读, 都不能写; 加了写锁(排他锁), 那么只有该线程可以读写, 其他线程是阻塞状态</p><p>举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。也就是说写是排他锁，写锁意味着其他线程不能读也不能写。读锁是共享锁，加上后其他锁只能读不能写，本线程也不能写</p><p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而<strong>对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大</strong>。</p><p>另一类表级的锁是 **MDL（metadata lock)**。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</p><ul><li>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</li></ul><p>虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。</p><p>你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626162845201.png" alt="image-20230626162845201"></p><p>我们可以看到 session A 先启动，这时候会对表 t 加一个 MDL 读锁。由于 session B 需要的也是 MDL 读锁，因此可以正常执行。</p><p>之后 session C 会被 blocked，是因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。</p><p>如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。这里简单解释下:申请MDL锁的操作会形成一个队列，队列中写锁获取优先级高于读锁。一旦出现写锁等待，不但当前操作会被阻塞，同时还会阻塞后续该表的所有操作。事务一旦申请到MDL锁后，直到事务执行完才会将锁释放。</p><p>如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p><p>你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</p><p>基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？</p><p>首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p><p>但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？</p><p>这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p><h3 id="怎么减少行锁对性能的影响？"><a href="#怎么减少行锁对性能的影响？" class="headerlink" title="怎么减少行锁对性能的影响？"></a>怎么减少行锁对性能的影响？</h3><p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。</p><p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p><p>当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。</p><blockquote><p>从两阶段锁说起</p></blockquote><p>我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626164423138.png" alt="image-20230626164423138"></p><p>这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。</p><p>知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。</p><p>也就是说，<strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议</strong>。这里的意思就是：事务在执行的时候，并不是一次性把所有行锁都持有，而是执行到哪一行就拿哪一行的锁。等到最后commit的时候，一起释放.</p><p>知道了这个设定，对我们使用事务有什么帮助呢？那就是，<strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong>。我给你举个例子。</p><p>假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：</p><ol><li>从顾客 A 账户余额中扣除电影票价；</li><li>给影院 B 的账户余额增加这张电影票价；</li><li>记录一条交易日志。</li></ol><p>也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？</p><p>试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。</p><p>根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。</p><p>好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。</p><p>如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？</p><blockquote><p>死锁和死锁检测</p></blockquote><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626165100548.png" alt="image-20230626165100548"></p><p>这时候，事务 A 在等待事务 B 释放 id&#x3D;2 的行锁，而事务 B 在等待事务 A 释放 id&#x3D;1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><p>在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。</p><p>但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p><p>所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p><p>你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p><p>那如果是我们上面说到的所有事务都要更新同一行的场景呢？</p><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p><p>根据上面的分析，我们来讨论一下，怎么解决由这种热点行更新导致的性能问题呢？问题的症结在于，死锁检测要耗费大量的 CPU 资源。</p><p>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</p><p>另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。</p><p>可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？</p><p>你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1&#x2F;10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。</p><p>这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。</p><h3 id="为什么只查一行数据-但是还是很慢"><a href="#为什么只查一行数据-但是还是很慢" class="headerlink" title="为什么只查一行数据,但是还是很慢"></a>为什么只查一行数据,但是还是很慢</h3><p>一般情况下，如果我跟你说查询性能优化，你首先会想到一些复杂的语句，想到查询需要返回大量的数据。但有些情况下，“查一行”，也会执行得特别慢。今天，我就跟你聊聊这个有趣的话题，看看什么情况下，会出现这个现象。</p><p>需要说明的是，如果 MySQL 数据库本身就有很大的压力，导致数据库服务器 CPU 占用率很高或 ioutil（IO 利用率）很高，这种情况下所有语句的执行都有可能变慢，不属于我们今天的讨论范围。</p><p>为了便于描述，我还是构造一个表，基于这个表来说明今天的问题。这个表有两个字段 id 和 c，并且我在里面插入了 10 万行记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE `t` (<br>  `id` int(11) NOT NULL,<br>  `c` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB;<br><br>delimiter ;;<br>create procedure idata()<br>begin<br>  declare i int;<br>  set i=1;<br>  while(i&lt;=100000) do<br>    insert into t values(i,i);<br>    set i=i+1;<br>  end while;<br>end;;<br>delimiter ;<br><br>call idata();<br></code></pre></td></tr></table></figure><p>接下来，我会用几个不同的场景来举例，有些是前面的文章中我们已经介绍过的知识点，你看看能不能一眼看穿，来检验一下吧。</p><blockquote><p>第一类：查询长时间不返回</p></blockquote><p>如图 1 所示，在表 t 执行下面的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t where id=1;<br></code></pre></td></tr></table></figure><p>查询结果长时间不返回。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193227609.png" alt="image-20230626193227609"></p><p>一般碰到这种情况的话，大概率是表 t 被锁住了。接下来分析原因的时候，一般都是首先执行一下 show processlist 命令，看看当前语句处于什么状态。</p><p>然后我们再针对每种状态，去分析它们产生的原因、如何复现，以及如何处理。</p><blockquote><p>等 MDL 锁</p></blockquote><p>如图 2 所示，就是使用 show processlist 命令查看 Waiting for table metadata lock 的示意图。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193341192.png" alt="image-20230626193341192"></p><p>出现这个状态表示的是，<strong>现在有一个线程正在表 t 上请求或者持有 MDL 写锁，把 select 语句堵住了</strong>。</p><p>不过，在 MySQL 5.7 版本下复现这个场景，也很容易。如图 3 所示，我给出了简单的复现步骤。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193513898.png" alt="image-20230626193513898"></p><p>session A 通过 lock table 命令持有表 t 的 MDL 写锁，而 session B 的查询需要获取 MDL 读锁。所以，session B 进入等待状态。</p><p><strong>这类问题的处理方式，就是找到谁持有 MDL 写锁，然后把它 kill 掉。</strong></p><p>但是，由于在 show processlist 的结果里面，session A 的 Command 列是“Sleep”，导致查找起来很不方便。不过有了 performance_schema 和 sys 系统库以后，就方便多了。（MySQL 启动时需要设置 performance_schema&#x3D;on，相比于设置为 off 会有 10% 左右的性能损失)</p><p>通过查询 sys.schema_table_lock_waits 这张表，我们就可以直接找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193651942.png" alt="image-20230626193651942"></p><blockquote><p>等 flush</p></blockquote><p>接下来，我给你举另外一种查询被堵住的情况。</p><p>我在表 t 上，执行下面的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from information_schema.processlist where id=1;<br></code></pre></td></tr></table></figure><p>这里，我先卖个关子。你可以看一下图 5。我查出来这个线程的状态是 Waiting for table flush，你可以设想一下这是什么原因。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193752421.png" alt="image-20230626193752421"></p><p>这个状态表示的是，现在有一个线程正要对表 t 做 flush 操作。MySQL 里面对表做 flush 操作的用法，一般有以下两个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">flush tables t with read lock;<br><br>flush tables with read lock;<br></code></pre></td></tr></table></figure><p>这两个 flush 语句，如果指定表 t 的话，代表的是只关闭表 t；如果没有指定具体的表名，则表示关闭 MySQL 里所有打开的表。</p><p>但是正常这两个语句执行起来都很快，除非它们也被别的线程堵住了。</p><p>所以，出现 Waiting for table flush 状态的可能情况是：有一个 flush tables 命令被别的语句堵住了，然后它又堵住了我们的 select 语句。</p><p>现在，我们一起来复现一下这种情况，复现步骤如图 6 所示：</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193900096.png" alt="image-20230626193900096"></p><p>在 session A 中，我故意每行都调用一次 sleep(1)，这样这个语句默认要执行 10 万秒，在这期间表 t 一直是被 session A“打开”着。然后，session B 的 flush tables t 命令再要去关闭表 t，就需要等 session A 的查询结束。这样，session C 要再次查询的话，就会被 flush 命令堵住了。</p><p>图 7 是这个复现步骤的 show processlist 结果。这个例子的排查也很简单，你看到这个 show processlist 的结果，肯定就知道应该怎么做了。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626193941045.png" alt="image-20230626193941045"></p><blockquote><p>等行锁</p></blockquote><p>现在，经过了表级锁的考验，我们的 select 语句终于来到引擎里了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t where id=1 lock in share mode; <br></code></pre></td></tr></table></figure><p>由于访问 id&#x3D;1 这个记录时要加读锁，如果这时候已经有一个事务在这行记录上持有一个写锁，我们的 select 语句就会被堵住。</p><p>复现步骤和现场如下：</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626194104862.png" alt="image-20230626194104862"></p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626194130132.png" alt="image-20230626194130132"></p><p>显然，session A 启动了事务，占有写锁，还不提交，是导致 session B 被堵住的原因。</p><p>这个问题并不难分析，但问题是怎么查出是谁占着这个写锁。如果你用的是 MySQL 5.7 版本，可以通过 sys.innodb_lock_waits 表查到。</p><p>查询方法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t sys.innodb_lock_waits where locked_table=&#x27;`test`.`t`&#x27;\G<br></code></pre></td></tr></table></figure><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626194215743.png" alt="image-20230626194215743" style="zoom: 67%;"><p>可以看到，这个信息很全，4 号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是 KILL QUERY 4 或 KILL 4。</p><p>不过，这里不应该显示“KILL QUERY 4”。这个命令表示停止 4 号线程当前正在执行的语句，而这个方法其实是没有用的。因为占有行锁的是 update 语句，这个语句已经是之前执行完成了的，现在执行 KILL QUERY，无法让这个事务去掉 id&#x3D;1 上的行锁。</p><p>实际上，KILL 4 才有效，也就是说直接断开这个连接。这里隐含的一个逻辑就是，连接被断开的时候，会自动回滚这个连接里面正在执行的线程，也就释放了 id&#x3D;1 上的行锁。</p><blockquote><p>第二类：查询慢</p></blockquote><p>经过了重重封“锁”，我们再来看看一些查询慢的例子。先来看一条你一定知道原因的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t where c=50000 limit 1;<br></code></pre></td></tr></table></figure><p>由于字段 c 上没有索引，这个语句只能走 id 主键顺序扫描，因此需要扫描 5 万行。</p><p>作为确认，你可以看一下慢查询日志。注意，这里为了把所有语句记录到 slow log 里，我在连接后先执行了 set long_query_time&#x3D;0，将慢查询日志的时间阈值设置为 0。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626195158921.png" alt="image-20230626195158921"></p><p>Rows_examined 显示扫描了 50000 行。你可能会说，不是很慢呀，11.5 毫秒就返回了，我们线上一般都配置超过 1 秒才算慢查询。但你要记住：坏查询不一定是慢查询。我们这个例子里面只有 10 万行记录，数据量大起来的话，执行时间就线性涨上去了。</p><p>扫描行数多，所以执行慢，这个很好理解。</p><p>但是接下来，我们再看一个只扫描一行，但是执行很慢的语句。</p><p>如图 12 所示，是这个例子的 slow log。可以看到，执行的语句是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t where id=1；<br></code></pre></td></tr></table></figure><p>虽然扫描行数是 1，但执行时间却长达 800 毫秒。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626195420157.png" alt="image-20230626195420157"></p><p>是不是有点奇怪呢，这些时间都花在哪里了？</p><p>如果我把这个 slow log 的截图再往下拉一点，你可以看到下一个语句，select * from t where id&#x3D;1 lock in share mode，执行时扫描行数也是 1 行，执行时间是 0.2 毫秒。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626195554208.png" alt="image-20230626195554208"></p><p>看上去是不是更奇怪了？按理说 lock in share mode 还要加锁，时间应该更长才对啊。</p><p>可能有的同学已经有答案了。如果你还没有答案的话，我再给你一个提示信息，图 14 是这两个语句的执行输出结果。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626195735479.png" alt="image-20230626195735479"></p><p>第一个语句的查询结果里 c&#x3D;1，带 lock in share mode 的语句返回的是 c&#x3D;1000001。看到这里应该有更多的同学知道原因了。如果你还是没有头绪的话，也别着急。我先跟你说明一下复现步骤，再分析原因。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626195828106.png" alt="image-20230626195828106"></p><p>你看到了，session A 先用 start transaction with consistent snapshot 命令启动了一个事务，之后 session B 才开始执行 update 语句。</p><p>session B 执行完 100 万次 update 语句后，id&#x3D;1 这一行处于什么状态呢？你可以从图 16 中找到答案。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230626201416138.png" alt="image-20230626201416138"></p><p>session B 更新完 100 万次，生成了 100 万个回滚日志 (undo log)。</p><p>带 lock in share mode 的 SQL 语句，是当前读, 也就是会锁写操作，因此会直接读到 1000001 这个结果，所以速度很快；而 select * from t where id&#x3D;1 这个语句，是一致性读，因此需要从 1000001 开始，依次执行 undo log，执行了 100 万次以后，才将 1 这个结果返回。</p><p>注意，undo log 里记录的其实是“把 2 改成 1”，“把 3 改成 2”这样的操作逻辑，画成减 1 的目的是方便你看图。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。</p><h3 id="隔离性和隔离级别"><a href="#隔离性和隔离级别" class="headerlink" title="隔离性和隔离级别"></a>隔离性和隔离级别</h3><p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。</p><p>当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><p>在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。下面我逐一为你解释：</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> T(c <span class="hljs-type">int</span>) engine<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> T(c) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220618173522006.png" alt="image-20220618173522006" style="zoom:50%;"><p>我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。</p><ul><li>若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</li><li>若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</li><li>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li><li>若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li></ul><p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。</p><p>我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。</p><p>配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;transaction_isolation&#x27;</span>;<br><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+----------------+</span><br><br><span class="hljs-operator">|</span> Variable_name <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span> <span class="hljs-operator">|</span><br><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+----------------+</span><br><br><span class="hljs-operator">|</span> transaction_isolation <span class="hljs-operator">|</span> READ<span class="hljs-operator">-</span>COMMITTED <span class="hljs-operator">|</span><br><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>总结来说，存在即合理，每种隔离级别都有自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。</p><p>假设你在管理一个个人银行账户表。一个表存了账户余额，一个表存了账单明细。到了月底你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。</p><h3 id="事务的原理"><a href="#事务的原理" class="headerlink" title="事务的原理"></a>事务的原理</h3><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230622140219310.png" alt="image-20230622140219310"></p><blockquote><p>持久性</p></blockquote><ul><li>redo log</li></ul><p>重做日志, 记录的是事务提交时数据页的物理修改, 用来实现事务的持久性</p><p>该日志文件由两个部分组成: 重做日志缓冲redo log buffer、重做日志文件redo log file, 前者是在内存中的, 后者是在磁盘中. 当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页(保存在内存中但未同步到磁盘的数据页)到磁盘, 发生错误时, 进行数据恢复</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230622223457898.png" alt="image-20230622223457898"></p><p>如图所示, 我们每次操作增删改操作时,其实是操作的buffer pool内存缓冲区从磁盘拉取的数据页, 内存中未同步到磁盘的数据页被称为脏页.当我们同步脏页到磁盘中时如果正好宕机, 则就会产生脏页.那么此时我们引入了redolog这样的机制.当检测到数据页发生变化后则将日志追加到redolog buffer中, 然后定时追加日志到磁盘中的redolog file, 后期如果需要恢复数据则可以通过redolog</p><p>为什么我们需要引入一个redolog来记录数据页变化, 能不能直接使用内存缓冲区buffer pool来同步到磁盘呢? 答案是可以, 但是会比较消耗性能, 因为如果是事务操作提交数据页修改往往会涉及较多的记录, 再刷新到磁盘中就会出现大量随机的磁盘IO.而如果是使用redolog的话, 因为是追加日志, 所以是顺序磁盘IO, 性能会好很多</p><blockquote><p>原子性</p></blockquote><ul><li>undo log</li></ul><p>回滚日志, 用于记录数据被修改前的信息, 作用包含两个: 提供回滚和MVCC(多版本并发控制)</p><p>undo log和redo log记录物理日志不一样, 它是逻辑日志. 可以认为当成delete一条记录时, undolog中会记录一条对应的insert记录, 反之亦然, 当update一条记录时, 他记录一条对应相反的update记录. 当执行rollback时就可以从undolog中的逻辑记录读取到对应的内容进行回滚.</p><p>undolog销毁: undolog在事务执行时产生, 事务提交时, 并不会立即删除undolog, 因为这些日志可能还会用于MVCC</p><p>undolog存储: undolog采用段的方式进行管理和记录, 存放在前面介绍的rollback segment回滚中, 内部包含1024个undolog segment.</p><h3 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h3><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。</p><p>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。</p><p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220618174513304.png" alt="image-20220618174513304" style="zoom:50%;"><p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p><p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。</p><h2 id="MVCC多版本并发控制"><a href="#MVCC多版本并发控制" class="headerlink" title="MVCC多版本并发控制"></a>MVCC多版本并发控制</h2><h2 id="深入浅出索引"><a href="#深入浅出索引" class="headerlink" title="深入浅出索引"></a>深入浅出索引</h2><p>提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。</p><h3 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h3><p>索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。下面我主要从使用的角度，为你简单分析一下这三种模型的区别。</p><blockquote><p>哈希表</p></blockquote><p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的键即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622205336021.png" alt="image-20220622205336021" style="zoom:50%;"><p>图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。你可以设想下，如果你现在要找身份证号在[ID_card_X, ID_card_Y]这个区间的所有用户，就必须全部扫描一遍了。</p><p><span style="color:red">所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</span></p><p>而有序数组在等值查询和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622205449799.png" alt="image-20220622205449799" style="zoom:50%;"><p>这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。同时很显然，这个索引结构支持范围查询。你要查身份证号在[ID_card_X, ID_card_Y]区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。</p><p><span style="color:red">所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。</span></p><p>二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622205553962.png" alt="image-20220622205553962" style="zoom:50%;"><p>二叉搜索树的特点是：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。</p><p>树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。<span style="color:red">其原因是，索引不止存在内存中，还要写到磁盘上。</span></p><blockquote><p>MySQL的存储结构</p></blockquote><p>表存储结构 单位：表&gt;段&gt;区&gt;页&gt;行 在数据库中， 不论读一行，还是读多行，都是将这些行所在的页进行加载。也就是说存储空间的基本单位是页。一个页就是一棵树B+树的节点，数据库I&#x2F;O操作的最小单位是页，与数据库相关的内容都会存储在页的结构里。</p><blockquote><p>B+树索引结构</p></blockquote><p>在一棵B+树中，每个节点为都是一个页，每次新建节点的时候，就会申请一个页空间 同一层的节点为之间，通过页的结构构成了一个双向链表 非叶子节点为，包括了多个索引行，每个索引行里存储索引键和指向下一层页面的指针 叶子节点为，存储了关键字和行记录，在节点内部(也就是页结构的内部)记录之间是一个单向的表 </p><blockquote><p>B+树的检索过程</p></blockquote><p>我们再来看下B+树的检索过程 从B+树的根开始，逐层找到叶子节点。 找到叶子节点为对应的数据页，将数据叶加载到内存中，通过页目录的槽采用二分查找的方式先找到一个粗略的记录分组。 在分组中通过链表遍历的方式进行记录的查找。</p><blockquote><p>为什么要用B+树索引</p></blockquote><p>数据库访问数据要通过页，一个页就是一个B+树节点，访问一个节点相当于一次I&#x2F;O操作，所以越快能找到节点，查找性能越好。 B+树的特点就是够矮够胖，能有效地减少访问节点次数从而提高性能。 </p><h3 id="InnoDB的索引模型"><a href="#InnoDB的索引模型" class="headerlink" title="InnoDB的索引模型"></a>InnoDB的索引模型</h3><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p><p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。</p><p>这个表的建表语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> T(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, <br>k <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>index (k))engine<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622210742696.png" alt="image-20220622210742696" style="zoom:50%;"><p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>根据上面的索引结构说明，我们来讨论一个问题：<strong>基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>如果语句是 select * from T where ID&#x3D;500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；</li><li>如果语句是 select * from T where k&#x3D;5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。</li></ul><p><span style="color:red;">也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</span></p><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。</p><p>而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。</p><p>除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。</p><p>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p><p>基于上面的索引维护过程说明，我们来讨论一个案例：</p><blockquote><p>你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。</p></blockquote><p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。</p><p><span style="color:red">显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</span></p><p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：</p><ol><li>只有一个索引；</li><li>该索引必须是唯一索引。</li></ol><p>你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。</p><h3 id="扫描表场景"><a href="#扫描表场景" class="headerlink" title="扫描表场景"></a>扫描表场景</h3><p>在下面这个表 T 中，如果我执行 select * from T where k between 3 and 5，需要执行几次树的搜索操作，会扫描多少行？下面是这个表的初始化语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> T (<br>ID <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>k <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>, <br>s <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>index k(k))<br>engine<span class="hljs-operator">=</span>InnoDB;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> T <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aa&#x27;</span>),(<span class="hljs-number">200</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;bb&#x27;</span>),(<span class="hljs-number">300</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;cc&#x27;</span>),(<span class="hljs-number">500</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;ee&#x27;</span>),(<span class="hljs-number">600</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;ff&#x27;</span>),(<span class="hljs-number">700</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;gg&#x27;</span>);<br></code></pre></td></tr></table></figure><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622212300776.png" alt="image-20220622212300776" style="zoom:50%;"><p>现在，我们一起来看看这条 SQL 查询语句的执行流程：</p><ol><li>在 k 索引树上找到 k&#x3D;3 的记录，取得 ID &#x3D; 300；</li><li>再到 ID 索引树查到 ID&#x3D;300 对应的 R3；</li><li>在 k 索引树取下一个值 k&#x3D;5，取得 ID&#x3D;500；</li><li>再回到 ID 索引树查到 ID&#x3D;500 对应的 R4；</li><li>在 k 索引树取下一个值 k&#x3D;6，不满足条件，循环结束。</li></ol><p><strong>在这个过程中，回到主键索引树搜索的过程，我们称为回表。</strong>可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p><p><span style="color:red;">由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</span></p><p>需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。</p><p>基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？</p><p>假设这个市民表的定义是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tuser` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `id_card` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `ismale` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `id_card` (`id_card`),<br>  KEY `name_age` (`name`,`age`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB<br></code></pre></td></tr></table></figure><p>我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该怎么做呢？</p><p>这里，我先和你说结论吧。<span style="color:red;">B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</span></p><p>为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20220622213259026.png" alt="image-20220622213259026" style="zoom:50%;"><p>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</p><p>基于上面对最左前缀索引的说明，我们来讨论一个问题：<strong>在建立联合索引的时候，如何安排索引内的字段顺序。</strong></p><p>这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？</p><p>我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from tuser where name like &#x27;张%&#x27; and age=10 and ismale=1;<br></code></pre></td></tr></table></figure><p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。</p><p>然后呢？当然是判断其他条件是否满足。</p><p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>图 3 和图 4，是这两个过程的执行流程图。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705080944209.png" alt="image-20230705080944209"></p><p>​图 3 无索引下推执行流程</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705081023386.png" alt="image-20230705081023386"></p><p>​图 4 索引下推执行流程</p><p>在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。</p><p>图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次</p><p>图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。</p><h3 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h3><p>在前面的基础篇文章中，我给你介绍过索引的基本概念，相信你已经了解了唯一索引和普通索引的区别。今天我们就继续来谈谈，在不同的业务场景下，应该选择普通索引，还是唯一索引？</p><p>假设你在维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name from CUser where id_card = &#x27;xxxxxxxyyyyyyzzzzz&#x27;;<br></code></pre></td></tr></table></figure><p>所以，你一定会考虑在 id_card 字段上建索引。</p><p>由于身份证号字段比较大，我不建议你把身份证号当做主键，那么现在你有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p><p>现在我要问你的是，从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p><p>假设字段 k 上的值都不重复。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705082034613.png" alt="image-20230705082034613"></p><p>​图 1 InnoDB 的索引组织结构</p><p>接下来，我们就从这两种索引对查询语句和更新语句的性能影响来进行分析。</p><blockquote><p>查询过程</p></blockquote><p>假设，执行查询的语句是 select id from T where k&#x3D;5。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k&#x3D;5 条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。</p><p>因为引擎是按页读写的，所以说，当找到 k&#x3D;5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>当然，如果 k&#x3D;5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p><p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p><blockquote><p>更新过程</p></blockquote><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，我需要先跟你介绍一下 change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p><p>那么，什么条件下可以使用 change buffer 呢？</p><p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k&#x3D;4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p><p><strong>因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</strong></p><p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p><p>现在，你已经理解了 change buffer 的机制，那么我们再一起来看看如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p><p>第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。</p><p>但，这不是我们关注的重点。</p><p>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li></ul><p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>之前我就碰到过一件事儿，有个 DBA 的同学跟我反馈说，他负责的某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，我发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p><blockquote><p>change buffer 的使用场景</p></blockquote><p>通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</p><p>因为 merge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 merge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 merge 过程。这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，change buffer 反而起到了副作用。</p><blockquote><p>索引选择和实践</p></blockquote><p>回到我们文章开头的问题，普通索引和唯一索引应该怎么选择。其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，我建议你尽量选择普通索引。</p><p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p><p>在实际使用中，你会发现，普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的。</p><p>特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著的。所以，当你有一个类似“历史数据”的库，并且出于成本考虑用的是机械硬盘时，那你应该特别关注这些表里的索引，尽量使用普通索引，然后把 change buffer 尽量开大，以确保这个“历史数据”表的数据写入速度。</p><blockquote><p>change buffer 和 redo log</p></blockquote><p>理解了 change buffer 的原理，你可能会联想到我在前面文章中和你介绍过的 redo log 和 WAL。</p><p>在前面文章的评论中，我发现有同学混淆了 redo log 和 change buffer。WAL 提升性能的核心机制，也的确是尽量减少随机读写，这两个概念确实容易混淆。所以，这里我把它们放到了同一个流程里来说明，便于你区分这两个概念。</p><p>现在，我们要在表上执行这个插入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; insert into t(id,k) values(id1,k1),(id2,k2);<br></code></pre></td></tr></table></figure><p>这里，我们假设当前 k 索引树的状态，查找到位置后，k1 所在的数据页在内存 (InnoDB buffer pool) 中，k2 所在的数据页不在内存中。如图 2 所示是带 change buffer 的更新状态图。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705084159266.png" alt="image-20230705084159266"></p><p>​图 2 带 change buffer 的更新过程</p><p>分析这条更新语句，你会发现它涉及了四个部分：内存、redo log（ib_log_fileX）、 数据表空间（t.ibd）、系统表空间（ibdata1）。</p><p>这条更新语句做了如下的操作（按照图中的数字顺序）：</p><ol><li>Page 1 在内存中，直接更新内存；</li><li>Page 2 没有在内存中，就在内存的 change buffer 区域，记录下“我要往 Page 2 插入一行”这个信息</li><li>将上述两个动作记入 redo log 中（图中 3 和 4）。</li></ol><p>做完上面这些，事务就可以完成了。所以，你会看到，执行这条更新语句的成本很低，就是写了两处内存，然后写了一处磁盘（两次操作合在一起写了一次磁盘），而且还是顺序写的。</p><p>同时，图中的两个虚线箭头，是后台操作，不影响更新的响应时间。</p><p>那在这之后的读请求，要怎么处理呢？</p><p>比如，我们现在要执行 select * from t where k in (k1, k2)。这里，我画了这两个读请求的流程图。</p><p>如果读语句发生在更新语句后不久，内存中的数据都还在，那么此时的这两个读操作就与系统表空间（ibdata1）和 redo log（ib_log_fileX）无关了。所以，我在图中就没画出这两部分。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705084431297.png" alt="image-20230705084431297"></p><p>​图 3 带 change buffer 的读过程</p><p>从图中可以看到：</p><ol><li>读 Page 1 的时候，直接从内存返回。有几位同学在前面文章的评论中问到，WAL 之后如果读数据，是不是一定要读盘，是不是一定要从 redo log 里面把数据更新以后才可以返回？其实是不用的。你可以看一下图 3 的这个状态，虽然磁盘上还是之前的数据，但是这里直接从内存返回结果，结果是正确的。</li><li>要读 Page 2 的时候，需要把 Page 2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>可以看到，直到需要读 Page 2 的时候，这个数据页才会被读入内存。</p><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p><h2 id="到底可不可以使用join"><a href="#到底可不可以使用join" class="headerlink" title="到底可不可以使用join"></a>到底可不可以使用join</h2><p>在实际生产中，关于 join 语句使用的问题，一般会集中在以下两类：</p><ol><li>我们 DBA 不让使用 join，使用 join 有什么问题呢？</li><li>如果有两个大小不同的表做 join，应该用哪个表做驱动表呢？</li></ol><p>今天这篇文章，我就先跟你说说 join 语句到底是怎么执行的，然后再来回答这两个问题。</p><p>为了便于量化分析，我还是创建两个表 t1 和 t2 来和你说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>CREATE TABLE `t2` (<br>  `id` int(11) NOT NULL,<br>  `a` int(11) DEFAULT NULL,<br>  `b` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `a` (`a`)<br>) ENGINE=InnoDB;<br><br>drop procedure idata;<br>delimiter ;;<br>create procedure idata()<br>begin<br>  declare i int;<br>  set i=1;<br>  while(i&lt;=1000)do<br>    insert into t2 values(i, i, i);<br>    set i=i+1;<br>  end while;<br>end;;<br>delimiter ;<br>call idata();<br><br>create table t1 like t2;<br>insert into t1 (select * from t2 where id&lt;=100)<br></code></pre></td></tr></table></figure><p>可以看到，这两个表都有一个主键索引 id 和一个索引 a，字段 b 上无索引。存储过程 idata() 往表 t2 里插入了 1000 行数据，在表 t1 里插入的是 100 行数据。</p><blockquote><p>Index Nested-Loop Join</p></blockquote><p>我们来看一下这个语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t1 straight_join t2 on (t1.a=t2.a);<br></code></pre></td></tr></table></figure><p>如果直接使用 join 语句，MySQL 优化器可能会选择表 t1 或 t2 作为驱动表，这样会影响我们分析 SQL 语句的执行过程。所以，为了便于分析执行过程中的性能问题，我改用 straight_join 让 MySQL 使用固定的连接方式执行查询，这样优化器只会按照我们指定的方式去 join。在这个语句里，t1 是驱动表，t2 是被驱动表。</p><p>现在，我们来看一下这条语句的 explain 结果。</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705205815943.png" alt="image-20230705205815943"></p><p>​图 1 使用索引字段 join 的 explain 结果</p><p>可以看到，在这条语句里，被驱动表 t2 的字段 a 上有索引，join 过程用上了这个索引，因此这个语句的执行流程是这样的：</p><ol><li>从表 t1 中读入一行数据 R；</li><li>从数据行 R 中，取出 a 字段到表 t2 里去查找；</li><li>取出表 t2 中满足条件的行，跟 R 组成一行，作为结果集的一部分；</li><li>重复执行步骤 1 到 3，直到表 t1 的末尾循环结束。</li></ol><p>这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。在形式上，这个过程就跟我们写程序时的嵌套查询类似，并且可以用上被驱动表的索引，所以我们称之为“Index Nested-Loop Join”，简称 NLJ。</p><p>它对应的流程图如下所示：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705210106339.png" alt="image-20230705210106339" style="zoom: 67%;"><p>​图 2 Index Nested-Loop Join 算法的执行流程</p><p>在这个流程里：</p><ol><li><p>对驱动表 t1 做了全表扫描，这个过程需要扫描 100 行；</p></li><li><p>而对于每一行 R，根据 a 字段去表 t2 查找，走的是树搜索过程。由于我们构造的数据都是一一对应的，因此每次的搜索过程都只扫描一行，也是总共扫描 100 行；</p></li><li><p>所以，整个执行流程，总扫描行数是 200。</p></li></ol><p>现在我们知道了这个过程，再试着回答一下文章开头的两个问题。</p><p>先看第一个问题：能不能使用 join?</p><p>假设不使用 join，那我们就只能用单表查询。我们看看上面这条语句的需求，用单表查询怎么实现。</p><ol><li><p>执行select * from t1，查出表 t1 的所有数据，这里有 100 行；</p></li><li><p>循环遍历这 100 行数据：</p><ul><li>从每一行 R 取出字段 a 的值 $R.a；</li><li>执行select * from t2 where a&#x3D;$R.a；</li><li>把返回的结果和 R 构成结果集的一行。</li></ul></li></ol><p>可以看到，在这个查询过程，也是扫描了 200 行，但是总共执行了 101 条语句，比直接 join 多了 100 次交互。除此之外，客户端还要自己拼接 SQL 语句和结果。</p><p>显然，这么做还不如直接 join 好。</p><p>我们再来看看第二个问题：怎么选择驱动表？</p><p>在这个 join 语句执行过程中，驱动表是走全表扫描，而被驱动表是走树搜索。</p><p>假设被驱动表的行数是 M。每次在被驱动表查一行数据，要先搜索索引 a，再搜索主键索引。每次搜索一棵树近似复杂度是以 2 为底的 M 的对数，记为 log2M，所以在被驱动表上查一行的时间复杂度是 2*log2M。</p><p>假设驱动表的行数是 N，执行过程就要扫描驱动表 N 行，然后对于每一行，到被驱动表上匹配一次。</p><p>因此整个执行过程，近似复杂度是 N + N<em>2</em>log2M。</p><p>显然，N 对扫描行数的影响更大，因此应该让小表来做驱动表。</p><blockquote><p>如果你没觉得这个影响有那么“显然”， 可以这么理解：N 扩大 1000 倍的话，</p><p>扫描行数就会扩大 1000 倍；而 M 扩大 1000 倍，扫描行数扩大不到 10 倍。</p></blockquote><p>到这里小结一下，通过上面的分析我们得到了两个结论：</p><ol><li>使用 join 语句，性能比强行拆成多个单表执行 SQL 语句的性能要好；</li><li>如果使用 join 语句的话，需要让小表做驱动表。</li></ol><p>但是，你需要注意，这个结论的前提是“可以使用被驱动表的索引”。</p><p>接下来，我们再看看被驱动表用不上索引的情况。</p><blockquote><p>Simple Nested-Loop Join</p></blockquote><p>现在，我们把 SQL 语句改成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t1 straight_join t2 on (t1.a=t2.b);<br></code></pre></td></tr></table></figure><p>由于表 t2 的字段 b 上没有索引，因此再用图 2 的执行流程时，每次到 t2 去匹配的时候，就要做一次全表扫描。</p><p>你可以先设想一下这个问题，继续使用图 2 的算法，是不是可以得到正确的结果呢？如果只看结果的话，这个算法是正确的，而且这个算法也有一个名字，叫做“Simple Nested-Loop Join”。</p><p>但是，这样算来，这个 SQL 请求就要扫描表 t2 多达 100 次，总共扫描 100*1000&#x3D;10 万行。</p><p>这还只是两个小表，如果 t1 和 t2 都是 10 万行的表（当然了，这也还是属于小表的范围），就要扫描 100 亿行，这个算法看上去太“笨重”了。</p><p>当然，MySQL 也没有使用这个 Simple Nested-Loop Join 算法，而是使用了另一个叫作“Block Nested-Loop Join”的算法，简称 BNL。</p><blockquote><p>Block Nested-Loop Join</p></blockquote><p>这时候，被驱动表上没有可用的索引，算法的流程是这样的：</p><ol><li>把表 t1 的数据读入线程内存 join_buffer 中，由于我们这个语句中写的是 select *，因此是把整个表 t1 放入了内存；</li><li>扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。</li></ol><p>这个过程的流程图如下：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705211447069.png" alt="image-20230705211447069" style="zoom: 67%;"><p>​图 3 Block Nested-Loop Join 算法的执行流程</p><p>对应地，这条 SQL 语句的 explain 结果如下所示：</p><p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705211557623.png" alt="image-20230705211557623"></p><p>​图 4 不使用索引字段 join 的 explain 结果</p><p>可以看到，在这个过程中，对表 t1 和 t2 都做了一次全表扫描，因此总的扫描行数是 1100。由于 join_buffer 是以无序数组的方式组织的，因此对表 t2 中的每一行，都要做 100 次判断，总共需要在内存中做的判断次数是：100*1000&#x3D;10 万次。</p><p>前面我们说过，如果使用 Simple Nested-Loop Join 算法进行查询，扫描行数也是 10 万行。因此，从时间复杂度上来说，这两个算法是一样的。但是，Block Nested-Loop Join 算法的这 10 万次判断是内存操作，速度上会快很多，性能也更好。</p><p>接下来，我们来看一下，在这种情况下，应该选择哪个表做驱动表。</p><p>假设小表的行数是 N，大表的行数是 M，那么在这个算法里：</p><ol><li>两个表都做一次全表扫描，所以总的扫描行数是 M+N；</li><li>内存中的判断次数是 M*N。</li></ol><p>可以看到，调换这两个算式中的 M 和 N 没差别，因此这时候选择大表还是小表做驱动表，执行耗时是一样的。</p><p>然后，你可能马上就会问了，这个例子里表 t1 才 100 行，要是表 t1 是一个大表，join_buffer 放不下怎么办呢？</p><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。如果放不下表 t1 的所有数据话，策略很简单，<strong>就是分段放</strong>。我把 join_buffer_size 改成 1200，再执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t1 straight_join t2 on (t1.a=t2.b);<br></code></pre></td></tr></table></figure><p>执行过程就变成了：</p><ol><li>扫描表 t1，顺序读取数据行放入 join_buffer 中，放完第 88 行 join_buffer 满了，继续第 2 步；</li><li>扫描表 t2，把 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回；</li><li>清空 join_buffer；</li><li>继续扫描表 t1，顺序读取最后的 12 行数据放入 join_buffer 中，继续执行第 2 步。</li></ol><p>执行流程图也就变成这样：</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705212108950.png" alt="image-20230705212108950" style="zoom:67%;"><p>​图 5 Block Nested-Loop Join – 两段</p><p>图中的步骤 4 和 5，表示清空 join_buffer 再复用。</p><p>这个流程才体现出了这个算法名字中“Block”的由来，表示“分块去 join”。</p><p>可以看到，这时候由于表 t1 被分成了两次放入 join_buffer 中，导致表 t2 会被扫描两次。虽然分成两次放入 join_buffer，但是判断等值条件的次数还是不变的，依然是 (88+12)*1000&#x3D;10 万次。</p><p>我们再来看下，在这种情况下驱动表的选择问题。</p><p>假设，驱动表的数据行数是 N，需要分 K 段才能完成算法流程，被驱动表的数据行数是 M。注意，这里的 K 不是常数，N 越大 K 就会越大，因此把 K 表示为λ*N，显然λ的取值范围是 (0,1)。</p><p>所以，在这个算法的执行过程中：</p><ol><li>扫描行数是 N+λ<em>N</em>M；</li><li>内存判断 N*M 次。</li></ol><p>显然，内存判断次数是不受选择哪个表作为驱动表影响的。而考虑到扫描行数，在 M 和 N 大小确定的情况下，N 小一些，整个算式的结果会更小。</p><p>所以结论是，应该让小表当驱动表。</p><p>当然，你会发现，在 N+λ<em>N</em>M 这个式子里，λ才是影响扫描行数的关键因素，这个值越小越好。</p><p>刚刚我们说了 N 越大，分段数 K 越大。那么，N 固定的时候，什么参数会影响 K 的大小呢？（也就是λ的大小）答案是 join_buffer_size。join_buffer_size 越大，一次可以放入的行越多，分成的段数也就越少，对被驱动表的全表扫描次数就越少。</p><p>这就是为什么，你可能会看到一些建议告诉你，如果你的 join 语句很慢，就把 join_buffer_size 改大。</p><p>理解了 MySQL 执行 join 的两种算法，现在我们再来试着回答文章开头的两个问题。</p><p>第一个问题：能不能使用 join 语句？</p><ol><li>如果可以使用 Index Nested-Loop Join 算法，也就是说可以用上被驱动表上的索引，其实是没问题的；</li><li>如果使用 Block Nested-Loop Join 算法，扫描行数就会过多。尤其是在大表上的 join 操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源。所以这种 join 尽量不要用。</li></ol><p>所以你在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><p>第二个问题是：如果要使用 join，应该选择大表做驱动表还是选择小表做驱动表？</p><ol><li>如果是 Index Nested-Loop Join 算法，应该选择小表做驱动表；</li><li>如果是 Block Nested-Loop Join 算法：<ul><li>在 join_buffer_size 足够大的时候，是一样的；</li><li>在 join_buffer_size 不够大的时候（这种情况更常见），应该选择小表做驱动表。</li></ul></li></ol><p>所以，这个问题的结论就是，总是应该使用小表做驱动表。</p><h2 id="count-这么慢，我该怎么办"><a href="#count-这么慢，我该怎么办" class="headerlink" title="count(*)这么慢，我该怎么办"></a>count(*)这么慢，我该怎么办</h2><p>在开发系统的时候，你可能经常需要计算一个表的行数，比如一个交易系统的所有变更记录总数。这时候你可能会想，一条 select count(<em>) from t 语句不就解决了吗？但是，你会发现随着系统中记录数越来越多，这条语句执行得也会越来越慢。然后你可能就想了，MySQL 怎么这么笨啊，记个总数，每次要查的时候直接读出来，不就好了吗。那么今天，我们就来聊聊 count(</em>) 语句到底是怎样实现的，以及 MySQL 为什么会这么实现。然后，我会再和你说说，如果应用中有这种频繁变更并需要统计表行数的需求，业务设计上可以怎么做。</p><blockquote><p>count(*) 的实现方式</p></blockquote><p>你首先要明确的是，在不同的 MySQL 引擎中，count(*) 有不同的实现方式。</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(<em>) 的时候会直接返回这个数，效率很高；</em></li><li>*而 InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</li></ul><p>这里需要注意的是，我们在这篇文章里讨论的是没有过滤条件的 count(*)，如果加了 where 条件的话，MyISAM 表也是不能返回得这么快的。</p><p>在前面的文章中，我们一起分析了为什么要使用 InnoDB，因为不论是在事务支持、并发能力还是在数据安全方面，InnoDB 都优于 MyISAM。我猜你的表也一定是用了 InnoDB 引擎。这就是当你的记录数越来越多的时候，计算一个表的总行数会越来越慢的原因。</p><p>那为什么 InnoDB 不跟 MyISAM 一样，也把数字存起来呢？</p><p>这是因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。这里，我用一个算 count(*) 的例子来为你解释一下。</p><p>假设表 t 中现在有 10000 条记录，我们设计了三个用户并行的会话。</p><ul><li>会话 A 先启动事务并查询一次表的总行数；</li><li>会话 B 启动事务，插入一行后记录后，查询表的总行数；</li><li>会话 C 先启动一个单独的语句，插入一行记录后，查询表的总行数。</li></ul><p>我们假设从上到下是按照时间顺序执行的，同一行语句是在同一时刻执行的。</p><img src="/2022/06/16/MySQL45%E8%AE%B2/image-20230705214506211.png" alt="image-20230705214506211" style="zoom:67%;"><p>​图 1 会话 A、B、C 的执行流程</p><p>你会看到，在最后一个时刻，三个会话 A、B、C 会同时查询表 t 的总行数，但拿到的结果却不同。</p><p>这和 InnoDB 的事务设计有关系，可重复读是它默认的隔离级别，在代码上就是通过多版本并发控制，也就是 MVCC 来实现的。每一行记录都要判断自己是否对这个会话可见，因此对于 count(*) 请求来说，InnoDB 只好把数据一行一行地读出依次判断，可见的行才能够用于计算“基于这个查询”的表的总行数。</p><p>当然，现在这个看上去笨笨的 MySQL，在执行 count(*) 操作的时候还是做了优化的。</p><p>你知道的，InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。所以，普通索引树比主键索引树小很多。对于 count(*) 这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，MySQL 优化器会找到最小的那棵树来遍历。在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p><p>如果你用过 show table status 命令的话，就会发现这个命令的输出结果里面也有一个 TABLE_ROWS 用于显示这个表当前有多少行，这个命令执行挺快的，那这个 TABLE_ROWS 能代替 count(*) 吗？</p><p>索引统计的值是通过采样来估算的。实际上，TABLE_ROWS 就是从这个采样估算得来的，因此它也很不准。有多不准呢，官方文档说误差可能达到 40% 到 50%。所以，<strong>show table status 命令显示的行数也不能直接使用。</strong></p><p>到这里我们小结一下：</p><ul><li>MyISAM 表虽然 count(<em>) 很快，但是不支持事务；</em></li><li><em>show table status 命令虽然返回很快，但是不准确；</em></li><li>*InnoDB 表直接 count(*) 会遍历全表，虽然结果准确，但会导致性能问题。</li></ul><p>在前面文章的评论区，有同学留言问到：在 select count(?) from t 这样的查询语句里面，count(<em>)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能，有哪些差别。今天谈到了 count(</em>) 的性能问题，我就借此机会和你详细说明一下这几种用法的性能差别。</p><p>需要注意的是，下面的讨论还是基于 InnoDB 引擎的。</p><p>这里，首先你要弄清楚 count() 的语义。count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p><p>至于分析性能差别的时候，你可以记住这么几个原则：</p><ul><li>server 层要什么就给什么；</li><li>InnoDB 只给必要的值；</li><li>现在的优化器只优化了 count(*) 的语义为“取行数”，其他“显而易见”的优化并没有做。</li></ul><p>这是什么意思呢？接下来，我们就一个个地来看看。</p><p>对于 count(主键 id) 来说，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p><p>对于 count(1) 来说，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>单看这两个用法的差别的话，你能对比出来，count(1) 执行得要比 count(主键 id) 快。因为从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p><p>对于 count(字段) 来说：</p><ul><li>如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；</li><li>如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加。</li></ul><p>也就是前面的第一条原则，server 层要什么字段，InnoDB 就返回什么字段。</p><p>但是 count(*) 是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(*) 肯定不是 null，按行累加。</p><p>看到这里，你一定会说，优化器就不能自己判断一下吗，主键 id 肯定非空啊，为什么不能按照 count(<em>) 来处理，多么简单的优化啊。当然，MySQL 专门针对这个语句进行优化，也不是不可以。但是这种需要专门优化的情况太多了，而且 MySQL 已经优化过 count(</em>) 了，你直接使用这种用法就可以了。</p><p>所以结论是：按照效率排序的话，count(字段) &lt; count(主键) &lt; count(1) 约等于 count(*), 所以我建议你，尽量使用 count(*)。</p>]]></content>
    
    
    <categories>
      
      <category>关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2022/01/26/SpringSecurity/"/>
    <url>/2022/01/26/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity-实战"><a href="#SpringSecurity-实战" class="headerlink" title="SpringSecurity 实战"></a>SpringSecurity 实战</h1><h1 id="第一章-大体框架"><a href="#第一章-大体框架" class="headerlink" title="第一章 大体框架"></a>第一章 大体框架</h1><ul><li>权限管理</li><li>SpringSecurity 简介</li><li>整体架构</li></ul><h2 id="1-1-权限管理"><a href="#1-1-权限管理" class="headerlink" title="1.1 权限管理"></a>1.1 权限管理</h2><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现<code>对用户访问系统的控制</code>，按照<code>安全规则</code>或者<code>安全策略</code>控制用户<code>可以访问而且只能访问自己被授权的资源</code>。</p><p>权限管理包括用户<strong>身份认证</strong>和<strong>授权</strong>两部分，简称<strong>认证授权</strong>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-1-1-认证"><a href="#1-1-1-认证" class="headerlink" title="1.1.1 认证"></a>1.1.1 认证</h3><p>**<code>身份认证</code>**，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用<a href="http://baike.baidu.com/view/5628.htm">指纹</a>等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-1-2-授权"><a href="#1-1-2-授权" class="headerlink" title="1.1.2 授权"></a>1.1.2 授权</h3><p>**<code>授权</code>**，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><h3 id="1-1-3-解决方案"><a href="#1-1-3-解决方案" class="headerlink" title="1.1.3 解决方案"></a>1.1.3 解决方案</h3><p>和其他领域不同，在 Java 企业级开发中，安全管理框架非常少，目前比较常见的就是：</p><ul><li>Shiro<ul><li>Shiro 本身是一个老牌的安全管理框架，有着众多的优点，例如轻量、简单、易于集成、可以在JavaSE环境中使用等。不过，在微服务时代，Shiro 就显得力不从心了，在微服务面前和扩展方面，无法充分展示自己的优势。</li></ul></li><li>开发者自定义<ul><li>也有很多公司选择自定义权限，即自己开发权限管理。但是一个系统的安全，不仅仅是登录和权限控制这么简单，我们还要考虑种各样可能存在的网络政击以及防彻策略，从这个角度来说，开发者白己实现安全管理也并非是一件容易的事情，只有大公司才有足够的人力物力去支持这件事情。</li></ul></li><li>Spring Security<ul><li>Spring Security,作为spring 家族的一员，在和 Spring 家族的其他成员如 Spring Boot Spring Clond等进行整合时，具有其他框架无可比拟的优势，同时对 OAuth2 有着良好的支持，再加上Spring Cloud对 Spring Security的不断加持（如推出 Spring Cloud Security )，让 Spring Securiy 不知不觉中成为微服务项目的首选安全管理方案。</li></ul></li></ul><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><h3 id="1-2-1-官方定义"><a href="#1-2-1-官方定义" class="headerlink" title="1.2.1 官方定义"></a>1.2.1 官方定义</h3><ul><li><a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></li></ul><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p><p>Spring Security是一个功能强大、可高度定制的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实标准。</p><p>Spring Security是一个面向Java应用程序提供身份验证和安全性的框架。与所有Spring项目一样，Spring Security的真正威力在于它可以轻松地扩展以满足定制需求。</p><ul><li>总结</li></ul><blockquote><p>Spring Security是一个功能强大、可高度定制的<code>身份验证</code>和<code>访问控制</code>的框架。或者说用来实现系统中权限管理的框架。</p></blockquote><h3 id="1-2-2-历史"><a href="#1-2-2-历史" class="headerlink" title="1.2.2 历史"></a>1.2.2 历史</h3><p>Spring Security 最早叫 Acegi Security， 这个名称并不是说它和 Spring 就没有关系，它依然是为Spring 框架提供安全支持的。Acegi Security 基于 Spring，可以帮助我们为项目建立丰富的角色与权限管理系统。Acegi security 虽然好用，但是最为人诟病的则是它臃肿烦琐的配置这一问题最终也遗传给了 Spring Security。</p><p>​Acegi Security 最终被并入 Spring Security 项目中，并于 2008 年4月发布了改名后的第一个版本 Spring Security 2.0.0，到目前为止，Spring Security 的最新版本己经到了 5.6.1。和 Shiro 相比，Spring Security重量级并且配置烦琐，直至今天，依然有人以此为理由而拒绝了解 Spring Security。其实，自从 Spring Boot 推出后，就彻底颠覆了传统了 JavaEE 开发，自动化配置让许多事情变得非常容易，包括 Spring Security 的配置。在一个 Spring Boot 项目中，我们甚至只需要引入一个依赖，不需要任何额外配置，项目的所有接口就会被自动保护起来了。在 Spring Cloud中，很多涉及安全管理的问题，也是一个 Spring Security 依赖两行配置就能搞定，在和 Spring 家族的产品一起使用时，Spring Security 的优势就非常明显了。</p><p>​因此，在微服务时代，我们不需要纠结要不要学习 Spring Security，我们要考虑的是如何快速掌握Spring Security， 并且能够使用 Spring Security 实现我们微服务的安全管理。</p><h2 id="1-3-整体架构"><a href="#1-3-整体架构" class="headerlink" title="1.3 整体架构"></a>1.3 整体架构</h2><p>在<Spring security>的架构设计中，**<code>认证</code><strong><Authentication>和</Authentication></strong><code>授权</code>** <Authorization>是分开的，无论使用什么样的认证方式。都不会影响授权，这是两个独立的存在，这种独立带来的好处之一，就是可以非常方便地整合一些外部的解决方案。</Authorization></Spring></p><p><img src="/2022/01/26/SpringSecurity/image-20220110112541559.png" alt="image-20220110112541559"></p><h3 id="1-3-1-认证"><a href="#1-3-1-认证" class="headerlink" title="1.3.1 认证"></a>1.3.1 认证</h3><h4 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h4><p>在Spring Security中认证是由<code>AuthenticationManager</code>接口来负责的，接口定义为：</p><p><img src="/2022/01/26/SpringSecurity/image-20220110104531129.png" alt="image-20220110104531129"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationManager</span> &#123; <br>Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <br>  <span class="hljs-keyword">throws</span> AuthenticationException;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回 Authentication 表示认证成功</li><li>返回 AuthenticationException 异常，表示认证失败。</li></ul><p>AuthenticationManager 主要实现类为 ProviderManager，在 ProviderManager 中管理了众多 AuthenticationProvider 实例。在一次完整的认证流程中，Spring Security 允许存在多个 AuthenticationProvider ，用来实现多种认证方式，这些 AuthenticationProvider 都是由 ProviderManager 进行统一管理的。</p><p><img src="/2022/01/26/SpringSecurity/image-20220110103518334.png" alt="image-20220110103518334"></p><h4 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h4><p>认证以及认证成功的信息主要是由 Authentication 的实现类进行保存的，其接口定义为：</p><p><img src="/2022/01/26/SpringSecurity/image-20220110104815645.png" alt="image-20220110104815645"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Authentication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Principal</span>, Serializable &#123;<br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities();<br>Object <span class="hljs-title function_">getCredentials</span><span class="hljs-params">()</span>;<br>Object <span class="hljs-title function_">getDetails</span><span class="hljs-params">()</span>;<br>Object <span class="hljs-title function_">getPrincipal</span><span class="hljs-params">()</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isAuthenticated</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthenticated</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isAuthenticated)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>getAuthorities  获取用户权限信息</li><li>getCredentials 获取用户凭证信息，一般指密码</li><li>getDetails  获取用户详细信息</li><li>getPrincipal  获取用户身份信息，用户名、用户对象等</li><li>isAuthenticated   用户是否认证成功</li></ul><h4 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h4><p>SecurityContextHolder 用来获取登录之后用户信息。Spring Security 会将登录用户数据保存在 Session 中。但是，为了使用方便,Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到 SecurityContextHolder 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将 Security SecurityContextHolder 中的数据清空。这一策略非常方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据。</p><h3 id="1-3-2-授权"><a href="#1-3-2-授权" class="headerlink" title="1.3.2 授权"></a>1.3.2 授权</h3><p>当完成认证后，接下来就是授权了。在 Spring Security 的授权体系中，有两个关键接口，</p><h4 id="AccessDecisionManager"><a href="#AccessDecisionManager" class="headerlink" title="AccessDecisionManager"></a>AccessDecisionManager</h4><blockquote><p> AccessDecisionManager (访问决策管理器)，用来决定此次访问是否被允许。</p></blockquote><p><img src="/2022/01/26/SpringSecurity/image-20220110110946267.png" alt="image-20220110110946267"></p><h4 id="AccessDecisionVoter"><a href="#AccessDecisionVoter" class="headerlink" title="AccessDecisionVoter"></a>AccessDecisionVoter</h4><blockquote><p>AccessDecisionVoter (访问决定投票器)，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票。</p></blockquote><p><img src="/2022/01/26/SpringSecurity/image-20220110111011018.png" alt="image-20220110111011018"></p><p>AccesDecisionVoter 和 AccessDecisionManager 都有众多的实现类，在 AccessDecisionManager 中会换个遍历 AccessDecisionVoter，进而决定是否允许用户访问，因而 AaccesDecisionVoter 和 AccessDecisionManager 两者的关系类似于 AuthenticationProvider 和 ProviderManager 的关系。</p><h4 id="ConfigAttribute"><a href="#ConfigAttribute" class="headerlink" title="ConfigAttribute"></a>ConfigAttribute</h4><blockquote><p>ConfigAttribute，用来保存授权时的角色信息</p></blockquote><p><img src="/2022/01/26/SpringSecurity/image-20220110111037603.png" alt="image-20220110111037603"></p><p>在 Spring Security 中，用户请求一个资源(通常是一个接口或者一个 Java 方法)需要的角色会被封装成一个 ConfigAttribute 对象，在 ConfigAttribute 中只有一个 getAttribute方法，该方法返回一个 String 字符串，就是角色的名称。一般来说，角色名称都带有一个 <code>ROLE_</code> 前缀，投票器 AccessDecisionVoter 所做的事情，其实就是比较用户所具各的角色和请求某个<br>资源所需的 ConfigAtuibute 之间的关系。</p><h1 id="第二章-认证原理"><a href="#第二章-认证原理" class="headerlink" title="第二章 认证原理"></a>第二章 认证原理</h1><ul><li>环境搭建</li><li>自动配置细节</li></ul><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h2><ul><li>spring boot </li><li>spring security<ul><li>认证: 判断用户是否是系统合法用户过程</li><li>授权: 判断系统内用户可以访问或具有访问那些资源权限过程</li></ul></li></ul><h3 id="2-1-1-创建项目"><a href="#2-1-1-创建项目" class="headerlink" title="2.1.1 创建项目"></a>2.1.1 创建项目</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.创建 springboot 应用</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220110113408799.png" alt="image-20220110113408799"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.创建 controller</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello security&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220110113534290.png" alt="image-20220110113534290"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.启动项目进行测试</span><br><span class="hljs-bullet">-</span> http://localhost:8080/hello<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220110113757100.png" alt="image-20220110113757100"></p><h3 id="2-1-2-整合-Spring-Security"><a href="#2-1-2-整合-Spring-Security" class="headerlink" title="2.1.2 整合 Spring Security"></a>2.1.2 整合 Spring Security</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.引入spring security相关依赖</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入spring security依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.再次启动项目</span><br><span class="hljs-bullet">-</span> 1.启动完成后控制台生成一个密码<br><span class="hljs-bullet">-</span> 2.访问 hello 发现直接跳转到登录页面<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220110114044889.png" alt="image-20220110114044889"></p><p><img src="/2022/01/26/SpringSecurity/image-20220110114109713.png" alt="image-20220110114109713"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.登录系统</span><br><span class="hljs-bullet">-</span> 默认用户名为: user<br><span class="hljs-bullet">-</span> 默认密码为:  控制台打印的 uuid<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220110114258671.png" alt="image-20220110114258671"></p><p><img src="/2022/01/26/SpringSecurity/image-20220110114227714.png" alt="image-20220110114227714"></p><p><strong>这就是 Spring Security 的强大之处，只需要引入一个依赖，所有的接口就会自动保护起来！</strong></p><p>思考🤔?</p><ul><li><p>为什么引入 Spring Security 之后<code>没有任何配置所有请求就要认证</code>呢?</p></li><li><p>在项目中明明没有登录界面，<code>登录界面</code>怎么来的呢？</p></li><li><p>为什么使用 <code>user</code> 和 <code>控制台密码</code> 能登陆，登录时验证数据源存在哪里呢？</p></li></ul><h3 id="2-1-3-实现原理"><a href="#2-1-3-实现原理" class="headerlink" title="2.1.3 实现原理"></a>2.1.3 实现原理</h3><p><a href="https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture">https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture</a></p><p>虽然开发者只需要引入一个依赖，就可以让 Spring Security 对应用进行保护。Spring Security 又是如何做到的呢？</p><p>在 Spring Security 中 <code>认证、授权</code> 等功能都是基于<a href="https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture">过滤器</a>完成的。</p><p><img src="/2022/01/26/SpringSecurity/image-20220110120349053.png" alt="image-20220110120349053"></p><p><img src="/2022/01/26/SpringSecurity/image-20220110115946010.png" alt="image-20220110115946010"></p><p>需要注意的是，默认过滤器并不是直接放在 Web 项目的原生过滤器链中，而是通过一个<br>FlterChainProxy 来统一管理。Spring Security 中的过滤器链通过 FilterChainProxy 嵌入到 Web项目的原生过滤器链中。FilterChainProxy  作为一个顶层的管理者，将统一管理 Security Filter。FilterChainProxy 本身是通过 Spring 框架提供的 DelegatingFilterProxy 整合到原生的过滤器链中。</p><h4 id="Security-Filters"><a href="#Security-Filters" class="headerlink" title="Security Filters"></a>Security Filters</h4><p>那么在 Spring Security 中给我们提供那些过滤器? 默认情况下那些过滤器会被加载呢？</p><table><thead><tr><th>过滤器</th><th>过滤器作用</th><th>默认是否加载</th></tr></thead><tbody><tr><td>ChannelProcessingFilter</td><td>过滤请求协议 HTTP 、HTTPS</td><td>NO</td></tr><tr><td><code>WebAsyncManagerIntegrationFilter</code></td><td>将 WebAsyncManger 与 SpringSecurity 上下文进行集成</td><td>YES</td></tr><tr><td><code>SecurityContextPersistenceFilter</code></td><td>在处理请求之前,将安全信息加载到 SecurityContextHolder 中</td><td>YES</td></tr><tr><td><code>HeaderWriterFilter</code></td><td>处理头信息加入响应中</td><td>YES</td></tr><tr><td>CorsFilter</td><td>处理跨域问题</td><td>NO</td></tr><tr><td><code>CsrfFilter</code></td><td>处理 CSRF 攻击</td><td>YES</td></tr><tr><td><code>LogoutFilter</code></td><td>处理注销登录</td><td>YES</td></tr><tr><td>OAuth2AuthorizationRequestRedirectFilter</td><td>处理 OAuth2 认证重定向</td><td>NO</td></tr><tr><td>Saml2WebSsoAuthenticationRequestFilter</td><td>处理 SAML 认证</td><td>NO</td></tr><tr><td>X509AuthenticationFilter</td><td>处理 X509 认证</td><td>NO</td></tr><tr><td>AbstractPreAuthenticatedProcessingFilter</td><td>处理预认证问题</td><td>NO</td></tr><tr><td>CasAuthenticationFilter</td><td>处理 CAS 单点登录</td><td>NO</td></tr><tr><td>OAuth2LoginAuthenticationFilter</td><td>处理 OAuth2 认证</td><td>NO</td></tr><tr><td>Saml2WebSsoAuthenticationFilter</td><td>处理 SAML 认证</td><td>NO</td></tr><tr><td><code>UsernamePasswordAuthenticationFilter</code></td><td>处理表单登录</td><td>YES</td></tr><tr><td>OpenIDAuthenticationFilter</td><td>处理 OpenID 认证</td><td>NO</td></tr><tr><td><code>DefaultLoginPageGeneratingFilter</code></td><td>配置默认登录页面</td><td>YES</td></tr><tr><td><code>DefaultLogoutPageGeneratingFilter</code></td><td>配置默认注销页面</td><td>YES</td></tr><tr><td>ConcurrentSessionFilter</td><td>处理 Session 有效期</td><td>NO</td></tr><tr><td>DigestAuthenticationFilter</td><td>处理 HTTP 摘要认证</td><td>NO</td></tr><tr><td>BearerTokenAuthenticationFilter</td><td>处理 OAuth2 认证的 Access Token</td><td>NO</td></tr><tr><td><code>BasicAuthenticationFilter</code></td><td>处理 HttpBasic 登录</td><td>YES</td></tr><tr><td><code>RequestCacheAwareFilter</code></td><td>处理请求缓存</td><td>YES</td></tr><tr><td><code>SecurityContextHolder&lt;br /&gt;AwareRequestFilter</code></td><td>包装原始请求</td><td>YES</td></tr><tr><td>JaasApiIntegrationFilter</td><td>处理 JAAS 认证</td><td>NO</td></tr><tr><td>RememberMeAuthenticationFilter</td><td>处理 RememberMe 登录</td><td>NO</td></tr><tr><td><code>AnonymousAuthenticationFilter</code></td><td>配置匿名认证</td><td>YES</td></tr><tr><td>OAuth2AuthorizationCodeGrantFilter</td><td>处理OAuth2认证中授权码</td><td>NO</td></tr><tr><td><code>SessionManagementFilter</code></td><td>处理 session 并发问题</td><td>YES</td></tr><tr><td><code>ExceptionTranslationFilter</code></td><td>处理认证&#x2F;授权中的异常</td><td>YES</td></tr><tr><td><code>FilterSecurityInterceptor</code></td><td>处理授权相关</td><td>YES</td></tr><tr><td>SwitchUserFilter</td><td>处理账户切换</td><td>NO</td></tr></tbody></table><p>可以看出，Spring Security 提供了 30 多个过滤器。默认情况下Spring Boot 在对 Spring Security 进入自动化配置时，会创建一个名为 <strong>SpringSecurityFilerChain</strong> 的过滤器，并注入到 Spring 容器中，这个过滤器将负责所有的安全管理，包括用户认证、授权、重定向到登录页面等。具体可以参考WebSecurityConfiguration的源码:</p><p><img src="/2022/01/26/SpringSecurity/image-20220111211538604.png" alt="image-20220111211538604"></p><p><img src="/2022/01/26/SpringSecurity/image-20220111211436764.png" alt="image-20220111211436764"></p><h4 id="SpringBootWebSecurityConfiguration"><a href="#SpringBootWebSecurityConfiguration" class="headerlink" title="SpringBootWebSecurityConfiguration"></a>SpringBootWebSecurityConfiguration</h4><p>这个类是 spring boot 自动配置类，通过这个源码得知，默认情况下对所有请求进行权限控制:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnDefaultWebSecurity</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootWebSecurityConfiguration</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Order(SecurityProperties.BASIC_AUTH_ORDER)</span><br>SecurityFilterChain <span class="hljs-title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <br>    <span class="hljs-keyword">throws</span> Exception &#123;<br>http.authorizeRequests().anyRequest()<br>      .authenticated().and().formLogin().and().httpBasic();<br><span class="hljs-keyword">return</span> http.build();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220112095052138.png" alt="image-20220112095052138"></p><p><strong>这就是为什么在引入 Spring Security 中没有任何配置情况下，请求会被拦截的原因！</strong></p><p>通过上面对自动配置分析，我们也能看出默认生效条件为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultWebSecurityCondition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AllNestedConditions</span> &#123;<br><br>DefaultWebSecurityCondition() &#123;<br><span class="hljs-built_in">super</span>(ConfigurationPhase.REGISTER_BEAN);<br>&#125;<br><br><span class="hljs-meta">@ConditionalOnClass(&#123; SecurityFilterChain.class, HttpSecurity.class &#125;)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Classes</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; WebSecurityConfigurerAdapter.class, SecurityFilterChain.class &#125;)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beans</span> &#123;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>条件一 classpath中存在 SecurityFilterChain.class, HttpSecurity.class</li><li>条件二 没有自定义 WebSecurityConfigurerAdapter.class, SecurityFilterChain.class</li></ul><p>默认情况下，条件都是满足的。WebSecurityConfigurerAdapter 这个类极其重要，Spring Security 核心配置都在这个类中:</p><p><img src="/2022/01/26/SpringSecurity/image-20220112095638356.png" alt="image-20220112095638356"></p><p>如果要对 Spring Security 进行自定义配置，就要自定义这个类实例，通过覆盖类中方法达到修改默认配置的目的。</p><h3 id="2-1-4-登录界面转发流程分析"><a href="#2-1-4-登录界面转发流程分析" class="headerlink" title="2.1.4 登录界面转发流程分析"></a>2.1.4 登录界面转发流程分析</h3><p><img src="/2022/01/26/SpringSecurity/image-20220111100643506.png" alt="image-20220111100643506"></p><ol><li>请求 &#x2F;hello 接口，在引入 spring security 之后会先经过一系列的过滤器</li><li>在请求到达<strong>FilterSecurityInterceptor</strong>时，发现请求并未认证。请求拦截下来，并抛出 <strong>AccessDeniedException</strong> 异常。</li><li>抛出 <strong>AccessDeniedException</strong> 的异常会被 <strong>ExceptionTranslationFilter</strong> 捕获，这个 Filter 中会调用 <strong>LoginUrlAuthenticationEntryPoint</strong>#<strong>commence</strong> 方法给客户端返回 302，要求客户端进行重定向到 &#x2F;login 页面。</li><li>客户端发送 &#x2F;login 请求。</li><li>&#x2F;login 请求会再次被拦截器中 <strong>DefaultLoginPageGeneratingFilter</strong> 拦截到，并在拦截器中返回生成登录页面。</li></ol><p><strong>就是通过这种方式，Spring Security 默认过滤器中生成了登录页面，并返回！</strong></p><h3 id="2-1-5-认证流程源码分析"><a href="#2-1-5-认证流程源码分析" class="headerlink" title="2.1.5 认证流程源码分析"></a>2.1.5 认证流程源码分析</h3><p>在分析相关源码之前, 我们的先认识下与之相关的基本组件: AuthenticationManager、ProviderManager、AuthenticationProvider</p><blockquote><p>AuthenticationManager</p></blockquote><p>从名称上可以看出，AuthenticationManager 是 一个认证管理器，它定义了Spring Security 过滤器要如何执行认证操作。AuthenticationManager 在认证成功后，会返回 一个Authentication对象，这个Authentication 对象会被设置到SecurityContextEfolder 中。如果开发者不想用Spring Security提供的 一套认证机制，那么也可以自定义认证流程，认证成功后，手动将Authentication存入SecurityContextHolder 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationManager</span> &#123;<br><br>Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从 AuthenticationManager的源码中可以看到:</p><ul><li>AuthenticationManager 对传入的 Authentication 对象进行身份认证，此时传入的 Authentication 参数只有用户名&#x2F;密码等简单的属性，如果认证成功，返回的Authentication 的属性会得到完全填充，包括用户所具备的角色信息.</li><li>AuthenticationManager是一个接口,它有着诸多的实现类, 开发者也可以自定义AuthenticationManager 的实现类，不过在实际应用中，我们使用最多的是ProviderManager。在 SpringSecurity框架中，默认也是使用Provide Manager。</li></ul><blockquote><p>ProviderManager</p></blockquote><p><strong>ProviderManager</strong> 是<strong>AuthenticationManager</strong> 的 一个重要实现类。在开始学习之前，我们先通过一幅图来了解一下<strong>ProviderManager</strong>、<strong>AuthenticationProvider</strong> 之间的关系</p><p><img src="/2022/01/26/SpringSecurity/image-20230716151856457.png" alt="image-20230716151856457"></p><ul><li>在Spring Security 中，由于系统可能同时支特多种不同的认证方式，例如同时支持用户名、密码认证、RememberMe 认证、手机号码动态认证等，而不同的认证方式对应了不同的 <strong>AuthenticationProvider</strong>，所以 一个完整的认证流程可能由多个<strong>AuthenticationProvider</strong> 来提供。</li><li>多个<strong>AuthenticationProvider</strong>将组成 一个列表，这个列表将由<strong>ProviderManager</strong>代理。换句话说，在<strong>ProviderManager</strong> 中存在一个<strong>AuthenticationProvider</strong> 列表，在<strong>ProviderManager</strong> 中遍历列表中的每 一个<strong>AuthenticationProvider</strong> 去执行身份认证，最终得到认证结果。</li><li><strong>ProviderManager</strong> 本身也可以再配置一个 <strong>AuthenticationManager</strong> 作为 parent，这样当<strong>ProviderManager</strong> 认证失败之后，就可以进入到parent 中再次进行认证。理论上来说:  <strong>ProviderManager</strong> 的 parent 可以是任意类型的 <strong>AuthenticationManager</strong>，但是通常都是由 <strong>ProviderManager</strong> 来扮演parent 的角色，也就是<strong>ProviderManager</strong> 是<strong>ProviderManager</strong> 的parent 。</li><li><strong>ProviderManager</strong> 本身也可以有多个，多个<strong>ProviderManager</strong> 共用同 一个parent ，当存在多 个过滤器链的时候非常有用。当存在多个过滤器链时，不同的路径可能对应不同的认证方式， 但是不同路径可能又会同时存在 一些共有的认证方式,这些共有的认证方式可以在parent 中统 一 处理</li></ul><p>根据上面的介绍，我们绘出新的<strong>ProviderManager</strong> 和<strong>AuthenticationProvider</strong> 关系图: </p><p><img src="/2022/01/26/SpringSecurity/image-20230716152418188.png" alt="image-20230716152418188"></p><p>我们重点看 一下<strong>ProviderManager</strong> 中的<strong>authenticate</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Authentication</span>&gt; toTest = authentication.getClass();<br><span class="hljs-type">AuthenticationException</span> <span class="hljs-variable">lastException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">AuthenticationException</span> <span class="hljs-variable">parentException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">parentResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">currentPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.providers.size();<br><span class="hljs-keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;<br><span class="hljs-keyword">if</span> (!provider.supports(toTest)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(LogMessage.format(<span class="hljs-string">&quot;Authenticating request with %s (%d/%d)&quot;</span>,<br>provider.getClass().getSimpleName(), ++currentPosition, size));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>result = provider.authenticate(authentication);<br><span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>copyDetails(authentication, result);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (AccountStatusException | InternalAuthenticationServiceException ex) &#123;<br>prepareException(ex, authentication);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br>lastException = ex;<br>&#125;<br>&#125;<br>  <br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.parent != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>parentResult = <span class="hljs-built_in">this</span>.parent.authenticate(authentication);<br>result = parentResult;<br>&#125;<br><span class="hljs-keyword">catch</span> (ProviderNotFoundException ex) &#123;<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br>parentException = ex;<br>lastException = ex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eraseCredentialsAfterAuthentication &amp;&amp; (result <span class="hljs-keyword">instanceof</span> CredentialsContainer)) &#123;<br>((CredentialsContainer) result).eraseCredentials();<br>&#125;<br><span class="hljs-keyword">if</span> (parentResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.eventPublisher.publishAuthenticationSuccess(result);<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">if</span> (lastException == <span class="hljs-literal">null</span>) &#123;<br>lastException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderNotFoundException</span>(<span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;ProviderManager.providerNotFound&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; toTest.getName() &#125;, <span class="hljs-string">&quot;No AuthenticationProvider found for &#123;0&#125;&quot;</span>));<br>&#125;<br><span class="hljs-keyword">if</span> (parentException == <span class="hljs-literal">null</span>) &#123;<br>prepareException(lastException, authentication);<br>&#125;<br><span class="hljs-keyword">throw</span> lastException;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段源码的逻辑还是非常清晰的，我们分析一下:</p><ol><li>首先获取<strong>authentication</strong>对象的类型 。</li><li>分别定义当前认证过程抛出的异常、parent 中认证时抛出的异常、当前认证结果以及parent 中认证结果对应的变量。</li><li><strong>getProviders</strong> 方法用来获取当前<strong>ProviderManager</strong> 所代理的所有<strong>AuthenticationProvider</strong> 对象，遍历这些<strong>AuthenticationProvider</strong> 对象进行身份认证。</li><li>判断当前<strong>AuthenticationProvider</strong> 是否支持当前<strong>Authentication</strong>对象，要是不支持，则继续处理列表中的下一个<strong>AuthenticationProvider</strong> 对象。</li><li>调用 <strong>provider.authenticate</strong> 方法进行身份认证，如果认证成功，返回认证后的 <strong>Authentication</strong> 对象，同时调用<strong>copyDetails</strong> 方法给 <strong>Authentication</strong> 对象的<strong>details</strong> 属性赋值。由于可能是多个<strong>AuthenticationProvider</strong> 执行认证操作，所以如果抛出异常，则通过<strong>lastException</strong> 变量来记录。</li><li>在for循环执行完成后，如果result 还是没有值，说明所有的<strong>AuthenticationProvider</strong> 都认证失败，此时如果parent 不为空，则调用parent的<strong>authenticate</strong>方法进行认证。</li><li>如果parentException为null，发布认证失败事件(如果parentException 不为nll, 则说明认证失败 事件己经发布过 了)。</li><li>最后抛出lastException 异常。</li></ol><blockquote><p>AuthenticationProvider</p></blockquote><p>之前介绍了Spring Security支持多种不同的认证方式，不同的认证方式对应不同的身份类型，<strong>AuthenticationProvider 就是针对不同的身份类型执行具体的身份认证。</strong>例如，常见的 <strong>DaoAuthenticationProvider</strong> 用来支持用户名&#x2F;密码登录认证，<strong>RememberMeAuthenticationProvider</strong> 用来支持 “ 记住我” 的认证.</p><p>其源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationProvider</span> &#123;<br><br>Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; authentication)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>(1) authenticate 方法用来执行具体的身份认证。</p><p>(2) supports 方法用来判断当前AuthenticationProvider 是否支持对应的身份类型</p><blockquote><p>AuthenticationProvider主要实现类</p></blockquote><img src="/2022/01/26/SpringSecurity/image-20230712144937006.png" alt="image-20230712144937006" style="zoom:67%;"><p>由于认证默认是使用的<strong>DaoAuthenticationProvider</strong>, 我先讲其父类<strong>AbstractUserDetailsAuthenticationProvider</strong></p><p><strong>DaoAuthenticationProvider</strong>没实现认证主方法,还是用的父类实现的认证方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,<br>() -&gt; <span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;</span>,<br><span class="hljs-string">&quot;Only UsernamePasswordAuthenticationToken is supported&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> determineUsername(authentication);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">cacheWasUsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userCache.getUserFromCache(username);<br><span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>cacheWasUsed = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-keyword">catch</span> (UsernameNotFoundException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Failed to find user &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.hideUserNotFoundExceptions) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-built_in">this</span>.messages<br>.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="hljs-string">&quot;Bad credentials&quot;</span>));<br>&#125;<br>Assert.notNull(user, <span class="hljs-string">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.preAuthenticationChecks.check(user);<br>additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br><span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-comment">// There was a problem, so try again after checking</span><br><span class="hljs-comment">// we&#x27;re using latest data (i.e. not from the cache)</span><br>cacheWasUsed = <span class="hljs-literal">false</span>;<br>user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);<br><span class="hljs-built_in">this</span>.preAuthenticationChecks.check(user);<br>additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);<br>&#125;<br><span class="hljs-built_in">this</span>.postAuthenticationChecks.check(user);<br><span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;<br><span class="hljs-built_in">this</span>.userCache.putUserInCache(user);<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">principalToReturn</span> <span class="hljs-operator">=</span> user;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.forcePrincipalAsString) &#123;<br>principalToReturn = user.getUsername();<br>&#125;<br><span class="hljs-keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们详细讲解下认证的逻辑:</p><ol><li><p>一开始先声明一个用户缓存对象<strong>userCache</strong>并看下命中缓存没，默认情况下没有启用缓存对象 。</p></li><li><p><strong>hideUserNotFoundExceptions</strong>表示是否隐藏用户名查找失败的异常，默认为true。为 了确保系统安全，用户在登录失败时只会给出一个模糊提示，例如“用户名或密码输入错误”。 在Spring Security 内部，如果用户名查找失败，则会抛出<strong>UsernameNotFoundException</strong> 异常， 但是该异常会被自动隐藏，转而通过 一个<strong>BadCredentialsException</strong> 异常来代替它 ，这样，开发者在处理登录失败异常时 ，无论是用户名输入错误还是密码输入错误 ， 收到的总是<strong>BadCredentialsException</strong>， 这样做的一个好处是可以避免新手程序员将用户名输入错误和密码输入错误两个异常分开提示。</p></li><li><p><strong>forcePrincipalAsString</strong>表示是否强制将<strong>Principal</strong> 对象当成字符串来处理，默认是false。 <strong>Authentication</strong>中的<strong>principal</strong>属性类型是一个<strong>Object</strong>，正常来说，通过<strong>principal</strong>属性可以获取到当前登录用户对象(即UserDetails)，<strong>但是如果forcePrincipalAsString 设置为true，则 Authentication 中的principal 属性返回就是当前登录用户名，而不是用户对象。</strong></p></li><li><p><strong>preAuthenticationChecks</strong> 对象则是用于做用户状态检查，在用户认证过程中，需要检验用户状态是否正常，例如账户是否被锁定、账户是否可用、账户是否过期等。</p></li><li><p><strong>postAuthenticationChecks</strong> 对象主要负责在密码校验成功后 ， 检查密码是否过期 </p></li><li><p><strong>additionalAuthenticationChecks</strong>是一个抽象方法，主要就是<strong>校验密码</strong>，具体的实现在<strong>DaoAuthenticationProvider</strong>中</p><p>总的来说: <strong>AbstractUserDetailsAuthenticationProvider</strong>的<strong>authenticate</strong> 方法就是核心的校验方法了。在方法中，首先从登录数据中获取用户名， 然后根据用户名去缓存中查询用户对象，如果查询不到，则根据用户名调用<strong>retrieveUser</strong> 方法 从数据库中加载用户;如果没有加载到用户，则拋出异常(用户不存在异常会被隐藏)。拿到用户对象之后，首先调用 <strong>preAuthenticationChecks.check</strong> 方法进行用户状态检查，然后调用 <strong>additionalAuthenticationChecks</strong> 方法进行密码的校验操作，最后调用 <strong>postAuthenticationChecks.check</strong> 方法检查密码是否过期.</p><p>当所有步骤都顺利完成后，调用<strong>createSuccessAuthentication</strong> 方法创建一个认证后的<strong>UsernamePasswordAuthenticationToken</strong> 对象并返回，认证后的对象中包含了认证主体、凭证以及角色等信息。</p></li></ol><p>在回到认证主类:<strong>DaoAuthenticationProvider</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaoAuthenticationProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractUserDetailsAuthenticationProvider</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_NOT_FOUND_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userNotFoundPassword&quot;</span>;<br><br><span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String userNotFoundEncodedPassword;<br><br><span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br><span class="hljs-keyword">private</span> UserDetailsPasswordService userDetailsPasswordService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DaoAuthenticationProvider</span><span class="hljs-params">()</span> &#123;<br>setPasswordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">additionalAuthenticationChecks</span><span class="hljs-params">(UserDetails userDetails,</span><br><span class="hljs-params">UsernamePasswordAuthenticationToken authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><span class="hljs-keyword">if</span> (authentication.getCredentials() == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Failed to authenticate since no credentials provided&quot;</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-built_in">this</span>.messages<br>.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="hljs-string">&quot;Bad credentials&quot;</span>));<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">presentedPassword</span> <span class="hljs-operator">=</span> authentication.getCredentials().toString();<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.passwordEncoder.matches(presentedPassword, userDetails.getPassword())) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Failed to authenticate since password does not match stored value&quot;</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-built_in">this</span>.messages<br>.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="hljs-string">&quot;Bad credentials&quot;</span>));<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>Assert.notNull(<span class="hljs-built_in">this</span>.userDetailsService, <span class="hljs-string">&quot;A UserDetailsService must be set&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> UserDetails <span class="hljs-title function_">retrieveUser</span><span class="hljs-params">(String username, UsernamePasswordAuthenticationToken authentication)</span><br><span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>prepareTimingAttackProtection();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">UserDetails</span> <span class="hljs-variable">loadedUser</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getUserDetailsService().loadUserByUsername(username);<br><span class="hljs-keyword">if</span> (loadedUser == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalAuthenticationServiceException</span>(<br><span class="hljs-string">&quot;UserDetailsService returned null, which is an interface contract violation&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> loadedUser;<br>&#125;<br><span class="hljs-keyword">catch</span> (UsernameNotFoundException ex) &#123;<br>mitigateAgainstTimingAttack(authentication);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException ex) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalAuthenticationServiceException</span>(ex.getMessage(), ex);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Authentication <span class="hljs-title function_">createSuccessAuthentication</span><span class="hljs-params">(Object principal, Authentication authentication,</span><br><span class="hljs-params">UserDetails user)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">upgradeEncoding</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userDetailsPasswordService != <span class="hljs-literal">null</span><br>&amp;&amp; <span class="hljs-built_in">this</span>.passwordEncoder.upgradeEncoding(user.getPassword());<br><span class="hljs-keyword">if</span> (upgradeEncoding) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">presentedPassword</span> <span class="hljs-operator">=</span> authentication.getCredentials().toString();<br><span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.passwordEncoder.encode(presentedPassword);<br>user = <span class="hljs-built_in">this</span>.userDetailsPasswordService.updatePassword(user, newPassword);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.createSuccessAuthentication(principal, authentication, user);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareTimingAttackProtection</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.userNotFoundEncodedPassword == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.userNotFoundEncodedPassword = <span class="hljs-built_in">this</span>.passwordEncoder.encode(USER_NOT_FOUND_PASSWORD);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mitigateAgainstTimingAttack</span><span class="hljs-params">(UsernamePasswordAuthenticationToken authentication)</span> &#123;<br><span class="hljs-keyword">if</span> (authentication.getCredentials() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">presentedPassword</span> <span class="hljs-operator">=</span> authentication.getCredentials().toString();<br><span class="hljs-built_in">this</span>.passwordEncoder.matches(presentedPassword, <span class="hljs-built_in">this</span>.userNotFoundEncodedPassword);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPasswordEncoder</span><span class="hljs-params">(PasswordEncoder passwordEncoder)</span> &#123;<br>Assert.notNull(passwordEncoder, <span class="hljs-string">&quot;passwordEncoder cannot be null&quot;</span>);<br><span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br><span class="hljs-built_in">this</span>.userNotFoundEncodedPassword = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">protected</span> PasswordEncoder <span class="hljs-title function_">getPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.passwordEncoder;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDetailsService</span><span class="hljs-params">(UserDetailsService userDetailsService)</span> &#123;<br><span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>&#125;<br><br><span class="hljs-keyword">protected</span> UserDetailsService <span class="hljs-title function_">getUserDetailsService</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userDetailsService;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDetailsPasswordService</span><span class="hljs-params">(UserDetailsPasswordService userDetailsPasswordService)</span> &#123;<br><span class="hljs-built_in">this</span>.userDetailsPasswordService = userDetailsPasswordService;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们详细讲解下该具体实现:</p><ol><li>首先定义了<strong>USER_NOT_FOUND_PASSWORD</strong> 常量，<strong>这个是当用户查找失败时的默认密码:passwordEncoder</strong>; userNotFoundEncodedPasword 变量则用来保存默认密码加密后的值</li><li>在<strong>DaoAuthenticationProvider</strong>的构造方法中，默认就会指定PasswordEncoder ，当然开发者也可以通过set 方法自定义PasswordEncoder</li><li><strong>additionalAuthenticationChecks</strong> 方法主要进行密码校验，该方法第 一个参数<strong>userDetails</strong>是从数据库中查询出来的用户对象，第二个参数<strong>authentication</strong> 则是登录用户输入的参数。从 这两个参数中分别提取出来用户密码，然后调用<strong>paswordEncoder.matches</strong> 方法进行密码比对。</li><li><strong>retieveUser</strong> 方法则是获取用户对象的方法，具体做法就是调用 <strong>UserDetailsService#loadUserBvUsername</strong> 方法去数据库中查询。</li><li><strong>createSuccessAuthentication</strong>方 法则是在登录成功后 ， 创建一个全新的 <strong>UsernamePasswordAuthenticationToken</strong> 对象，同时会判断是否需要进行密码升级，如果需要进行密码升级， 就会在该方法中进行加密方案升级。</li></ol><p>现在大家己经熟悉了<strong>Authentication</strong>、<strong>AuthenticationManager</strong> 、<strong>AuthenticationProvider</strong> 以及<strong>ProviderManager</strong> 的工作原理了，接下来的问题就是这些组件如何跟登录关联起来?这就涉 及一 个重要的过滤器 - AbstractProcessingFilter</p><h4 id="AbstractAuthenticationProcessingFilter"><a href="#AbstractAuthenticationProcessingFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter"></a>AbstractAuthenticationProcessingFilter</h4><p>​作为Spring Security过滤器链中的一环,<strong>AbstractAuthenticationProcessingFilter</strong>可以用来处理任何提交给它的身份认证,下图描述了工作流程:</p><img src="/2022/01/26/SpringSecurity/image-20230214222306844.png" alt="image-20230214222306844" style="zoom:50%;"><p><strong>AbstractAuthenticationProcessingFilter</strong>作为一个抽象类, 如果使用用户名&#x2F;密码的方式登录, 那么它对应的是实现类是<strong>UsernamePasswordAuthenticationFilter</strong>, 构造出来的<strong>Authentication</strong>对象则是<strong>UsernamePasswordAuthenticationToken</strong>. </p><p>因此我们可以对认证流程进行进一步的细化:</p><img src="/2022/01/26/SpringSecurity/image-20230214222758742.png" alt="image-20230214222758742" style="zoom:50%;"><p>现在我们大致梳理一下认证的流程:</p><ol><li>当请求被转发到<strong>AbstractAuthenticationProcessingFilter</strong>, 先判断是否需要认证具体实现为<strong>requiresAuthentication</strong> </li><li>如果需要认证则调用<strong>UsernamePasswordAuthenticationFilter</strong>#<strong>attemptAuthentication</strong>: 从当前请求<strong>HttpServletRequest</strong>中提取出登录用户名&#x2F;密码,然后封装成一个<strong>UsernamePasswordAuthenticationToken</strong>对象</li><li><strong>UsernamePasswordAuthenticationToken</strong>对象将被传入<strong>ProviderManager</strong>中进行具体的认证操作<ol><li>如果认证失败,则抛出异常被<strong>AbstractAuthenticationProcessingFilter</strong>#<strong>unsuccessfulAuthentication</strong>方法catch到:<ul><li><strong>SecurityContextHolder</strong>中相关的信息将被清除,登录失败回调也会被调用</li><li><strong>RememberMeServices</strong>#<strong>loginFail</strong></li><li>执行认证失败处理<strong>AuthenticationFailureHandler</strong>#<strong>onAuthenticationFailure</strong></li></ul></li><li>如果认证成功,则会进行<ul><li>存储<strong>SecurityContextHolder</strong>中相关的信息</li><li><strong>Session</strong>并发处理</li><li>执行认证成功处理<strong>AuthenticationSuccessHandler</strong>#<strong>onAuthenticationSuccess</strong></li></ul></li></ol></li></ol><p>值得注意的是: <strong>ProviderManager</strong>在拿到<strong>Authentication</strong>的时候</p><ul><li>会遍历其下的<strong>AuthenticationProvider</strong><ul><li>再看是否支持#<strong>supports</strong>该<strong>Authentication</strong>, 如果支持则会进行认证#<strong>authenticate</strong>操作;</li><li>如果都不支持则会递归父类<strong>ProviderManager</strong>,再次进行以上操作</li></ul></li></ul><p>查看源码发现: 第一个持有一个<strong>AnonymousAuthenticationProvider</strong>的<strong>ProviderManager</strong>不支持, 最后递归到父类持有一个<strong>DaoAuthenticationProvider</strong>的<strong>ProviderManager</strong>开始认证</p><h4 id="UserDetailService"><a href="#UserDetailService" class="headerlink" title="UserDetailService"></a>UserDetailService</h4><p>通过刚才源码分析也能得知 UserDetailService 是顶层父接口，接口中 loadUserByUserName 方法是用来在认证时进行用户名认证方法，默认实现使用是内存实现，如果想要修改数据库实现我们只需要自定义 UserDetailService 实现，最终返回 UserDetails 实例即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220111110043474.png" alt="image-20220111110043474"></p><h4 id="UserDetailsServiceAutoConfigutation"><a href="#UserDetailsServiceAutoConfigutation" class="headerlink" title="UserDetailsServiceAutoConfigutation"></a>UserDetailsServiceAutoConfigutation</h4><p>这个源码非常多，这里梳理了关键部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(AuthenticationManager.class)</span><br><span class="hljs-meta">@ConditionalOnBean(ObjectPostProcessor.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">value = &#123; AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class,</span><br><span class="hljs-meta">AuthenticationManagerResolver.class &#125;,</span><br><span class="hljs-meta">type = &#123; &quot;org.springframework.security.oauth2.jwt.JwtDecoder&quot;,</span><br><span class="hljs-meta">&quot;org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector&quot;,</span><br><span class="hljs-meta">&quot;org.springframework.security.oauth2.client.registration.ClientRegistrationRepository&quot; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceAutoConfiguration</span> &#123;<br>  <span class="hljs-comment">//....</span><br>  <span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Lazy</span><br><span class="hljs-keyword">public</span> InMemoryUserDetailsManager <span class="hljs-title function_">inMemoryUserDetailsManager</span><span class="hljs-params">(SecurityProperties properties,</span><br><span class="hljs-params">ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> &#123;<br>SecurityProperties.<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getUser();<br>List&lt;String&gt; roles = user.getRoles();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>User.withUsername(user.getName()).password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))<br>.roles(StringUtils.toStringArray(roles)).build());<br>&#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>从自动配置源码中得知当 classpath 下存在 AuthenticationManager 类</li><li>当前项目中，系统没有提供 AuthenticationManager.class、 AuthenticationProvider.class、UserDetailsService.class、<br>            AuthenticationManagerResolver.class、实例</li></ol><p><strong>默认情况下都会满足，此时Spring Security会提供一个 InMemoryUserDetailManager 实例</strong></p><p><img src="/2022/01/26/SpringSecurity/image-20220111111244739.png" alt="image-20220111111244739"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.security&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityProperties</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>  &#125;<br>  <span class="hljs-comment">//....</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><span class="hljs-keyword">private</span> List&lt;String&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">passwordGenerated</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//get set ...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这就是默认生成 user 以及 uuid 密码过程! 另外看明白源码之后，就知道只要在配置文件中加入如下配置可以对内存中用户和密码进行覆盖。</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.security.user.name</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.security.user.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.security.user.roles</span>=<span class="hljs-string">admin,users</span><br></code></pre></td></tr></table></figure><p>总的来说:</p><ul><li>AuthenticationManager、ProviderManger、以及 AuthenticationProvider 关系</li></ul><p><img src="/2022/01/26/SpringSecurity/image-20220112150612023.png" alt="image-20220112150612023"></p><ul><li><p><strong>WebSecurityConfigurerAdapter</strong> 扩展 Spring Security 所有默认配置</p><p><img src="/2022/01/26/SpringSecurity/image-20220112150820284.png" alt="image-20220112150820284"></p></li><li><p><strong>UserDetailService</strong> 用来修改默认认证的数据源信息</p><p><img src="/2022/01/26/SpringSecurity/image-20220112150929998.png" alt="image-20220112150929998"></p></li></ul><h1 id="第三章-自定义认证"><a href="#第三章-自定义认证" class="headerlink" title="第三章 自定义认证"></a>第三章 自定义认证</h1><ul><li>认证配置</li><li>表单认证</li><li>注销登录</li><li>前后端分离认证</li><li>添加验证码</li></ul><h2 id="3-1-自定义认证"><a href="#3-1-自定义认证" class="headerlink" title="3.1 自定义认证"></a>3.1 自定义认证</h2><h3 id="3-1-1-自定义资源权限规则"><a href="#3-1-1-自定义资源权限规则" class="headerlink" title="3.1.1 自定义资源权限规则"></a>3.1.1 自定义资源权限规则</h3><ul><li>&#x2F;index  公共资源</li><li>&#x2F;hello …. 受保护资源 权限管理</li></ul><p>在项目中添加如下配置就可以实现对资源权限规则设定:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/index&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and().formLogin();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113050533209-2023951.png" alt="image-20220113050533209"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 说明</span><br><span class="hljs-bullet">-</span> permitAll() 代表放行该资源,该资源为公共资源 无需认证和授权可以直接访问<br><span class="hljs-bullet">-</span> anyRequest().authenticated() 代表所有请求,必须认证之后才能访问<br><span class="hljs-bullet">-</span> formLogin() 代表开启表单认证<br><span class="hljs-section">## 注意: 放行资源f0f必须放在所有认证请求之前!</span><br></code></pre></td></tr></table></figure><h3 id="3-1-2-自定义登录界面"><a href="#3-1-2-自定义登录界面" class="headerlink" title="3.1.2 自定义登录界面"></a>3.1.2 自定义登录界面</h3><ul><li><p>引入模板依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义登录页面 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 templates 中定义登录界面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需要注意的是</strong></p><ul><li>登录表单 method 必须为 <code>post</code>，action 的请求路径为 <code>/doLogin</code></li><li>用户名的 name 属性为 <code>uname</code></li><li>密码的 name 属性为 <code>passwd</code></li></ul></li><li><p>配置 Spring Security 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>         http.authorizeHttpRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                .mvcMatchers(<span class="hljs-string">&quot;/index&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>)<br>                .usernameParameter(<span class="hljs-string">&quot;uname&quot;</span>)<br>                .passwordParameter(<span class="hljs-string">&quot;passwd&quot;</span>)<br>                .successForwardUrl(<span class="hljs-string">&quot;/index&quot;</span>)  <span class="hljs-comment">//forward 跳转           注意:不会跳转到之前请求路径</span><br>                <span class="hljs-comment">//.defaultSuccessUrl(&quot;/index&quot;)   //redirect 重定向    注意:如果之前请求路径,会有优先跳转之前请求路径</span><br>                .failureUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>successForwardUrl 、defaultSuccessUrl 这两个方法都可以实现成功之后跳转<ul><li>successForwardUrl  默认使用 <code>forward </code>跳转      <code>注意:不会跳转到之前请求路径</code></li><li>defaultSuccessUrl   默认使用 <code>redirect</code> 跳转      <code>注意:如果之前请求路径,会有优先跳转之前请求路径,可以传入第二个参数进行修改</code></li></ul></li></ul></li></ul><h3 id="3-1-3-自定义登录成功处理"><a href="#3-1-3-自定义登录成功处理" class="headerlink" title="3.1.3 自定义登录成功处理"></a>3.1.3 自定义登录成功处理</h3><p>有时候页面跳转并不能满足我们，特别是在前后端分离开发中就不需要成功之后跳转页面。只需要给前端返回一个 JSON 通知登录成功还是失败与否。这个时候可以通过自定义 <code>AuthenticationSucccessHandler</code> 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called when a user has been successfully authenticated.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request the request which caused the successful authentication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response the response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> authentication the &lt;tt&gt;Authentication&lt;/tt&gt; object which was created during</span><br><span class="hljs-comment"> * the authentication process.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>根据接口的描述信息,也可以得知登录成功会自动回调这个方法，进一步查看它的默认实现，你会发现successForwardUrl、defaultSuccessUrl也是由它的子类实现的</strong></p><p><img src="/2022/01/26/SpringSecurity/image-20220113054514897-2023963.png" alt="image-20220113054514897"></p><ul><li>自定义 AuthenticationSuccessHandler 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">200</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>        response.getWriter().println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置 AuthenticationSuccessHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .formLogin()<br>                <span class="hljs-comment">//....</span><br>                .successHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span>())<br>                .failureUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113062644363-2026405.png" alt="image-20220113062644363"></p><h3 id="3-1-4-显示登录失败信息"><a href="#3-1-4-显示登录失败信息" class="headerlink" title="3.1.4 显示登录失败信息"></a>3.1.4 显示登录失败信息</h3><p>为了能更直观在登录页面看到异常错误信息，可以在登录页面中直接获取异常信息。Spring Security 在登录失败之后会将异常信息存储到 <code>request</code> 、<code>session</code>作用域中 key 为 <code>SPRING_SECURITY_LAST_EXCEPTION</code> 命名属性中，源码可以参考 SimpleUrlAuthenticationFailureHandler ：</p><p><img src="/2022/01/26/SpringSecurity/image-20220113060257662.png" alt="image-20220113060257662"></p><ul><li><p>显示异常信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  ....<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;SPRING_SECURITY_LAST_EXCEPTION&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>              <span class="hljs-comment">//..</span><br>                .and()<br>                .formLogin()<br>                <span class="hljs-comment">//....</span><br>                <span class="hljs-comment">//.failureUrl(&quot;/login.html&quot;)</span><br>                .failureForwardUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>failureUrl、failureForwardUrl 关系类似于之前提到的 successForwardUrl 、defaultSuccessUrl 方法<ul><li>failureUrl 失败以后的重定向跳转</li><li>failureForwardUrl 失败以后的 forward 跳转 <code>注意:因此获取 request 中异常信息,这里只能使用failureForwardUrl</code></li></ul></li></ul></li></ul><h3 id="3-1-5-自定义登录失败处理"><a href="#3-1-5-自定义登录失败处理" class="headerlink" title="3.1.5 自定义登录失败处理"></a>3.1.5 自定义登录失败处理</h3><p>和自定义登录成功处理一样，Spring Security 同样为前后端分离开发提供了登录失败的处理，这个类就是  AuthenticationFailureHandler，源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called when an authentication attempt fails.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request the request during which the authentication attempt occurred.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response the response.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exception the exception which was thrown to reject the authentication</span><br><span class="hljs-comment"> * request.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>根据接口的描述信息,也可以得知登录失败会自动回调这个方法，进一步查看它的默认实现，你会发现failureUrl、failureForwardUrl也是由它的子类实现的。</strong></p><p><img src="/2022/01/26/SpringSecurity/image-20220113062114741.png" alt="image-20220113062114741"></p><ul><li>自定义 AuthenticationFailureHandler 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录失败: &quot;</span>+exception.getMessage());<br>        result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">500</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>        response.getWriter().println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置 AuthenticationFailureHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>              <span class="hljs-comment">//...</span><br>                .and()<br>                .formLogin()<br>               <span class="hljs-comment">//..</span><br>                .failureHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span>())<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113062617937-2026380.png" alt="image-20220113062617937"></p><h3 id="3-1-6-自定义未授权处理器"><a href="#3-1-6-自定义未授权处理器" class="headerlink" title="3.1.6 自定义未授权处理器"></a>3.1.6 自定义未授权处理器</h3><blockquote><p>security配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">securityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestAccessDeniedHandler restAccessDeniedHandler;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable();<br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/hello&quot;</span>).hasRole(<span class="hljs-string">&quot;product&quot;</span>)<br>                .anyRequest().authenticated()<br>                .and().formLogin();<br><br>        http.exceptionHandling()<br>                .accessDeniedHandler(restAccessDeniedHandler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username -&gt; &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.selectUserByName(username);<br>            <span class="hljs-keyword">if</span> (Objects.isNull(user)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            List&lt;Role&gt; roles = userService.selectRoleByUsername(username);<br>            user.setRoles(roles);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>实现AccessDeniedHandler</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestAccessDeniedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        out.write(<span class="hljs-string">&quot;您未授权，请联系管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-7-注销登录"><a href="#3-1-7-注销登录" class="headerlink" title="3.1.7 注销登录"></a>3.1.7 注销登录</h3><p>Spring Security 中也提供了默认的注销登录配置，在开发时也可以按照自己需求对注销进行个性化定制。</p><ul><li><p>开启注销登录<code>默认开启</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .formLogin()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .logout()<br>                .logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<br>                .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>                .clearAuthentication(<span class="hljs-literal">true</span>)<br>                .logoutSuccessUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 logout() 方法开启注销配置</li><li>logoutUrl 指定退出登录请求地址，默认是 GET 请求，路径为 <code>/logout</code></li><li>invalidateHttpSession 退出时是否是 session 失效，默认值为 true</li><li>clearAuthentication 退出时是否清除认证信息，默认值为 true</li><li>logoutSuccessUrl 退出登录时跳转地址</li></ul></li><li><p>配置多个注销登录请求</p><p>如果项目中有需要，开发者还可以配置多个注销登录的请求，同时还可以指定请求的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .formLogin()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .logout()<br>                .logoutRequestMatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrRequestMatcher</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout1&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>)<br>                ))<br>                .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>                .clearAuthentication(<span class="hljs-literal">true</span>)<br>                .logoutSuccessUrl(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前后端分离注销登录配置</p><p>如果是前后端分离开发，注销成功之后就不需要页面跳转了，只需要将注销成功的信息返回前端即可，此时我们可以通过自定义 LogoutSuccessHandler  实现来返回注销之后信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;注销成功&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">200</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>        response.getWriter().println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>          <span class="hljs-comment">//....</span><br>                .and()<br>                .formLogin()<br> <span class="hljs-comment">//...</span><br>                .and()<br>                .logout()<br>                <span class="hljs-comment">//.logoutUrl(&quot;/logout&quot;)</span><br>                .logoutRequestMatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrRequestMatcher</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout1&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>)<br>                ))<br>                .invalidateHttpSession(<span class="hljs-literal">true</span>)<br>                .clearAuthentication(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//.logoutSuccessUrl(&quot;/login.html&quot;)</span><br>                .logoutSuccessHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span>())<br>                .and()<br>                .csrf().disable();<span class="hljs-comment">//这里先关闭 CSRF</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113114133687.png" alt="image-20220113114133687"></p></li></ul><h3 id="3-1-8-登录用户数据获取"><a href="#3-1-8-登录用户数据获取" class="headerlink" title="3.1.8 登录用户数据获取"></a>3.1.8 登录用户数据获取</h3><h4 id="SecurityContextHolder-1"><a href="#SecurityContextHolder-1" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h4><p>​Spring Security 会将登录用户数据保存在 Session 中。但是，为了使用方便,Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。</p><p>​SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到SecurityContextHolder 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将SecurityContextHolder 中的数据清空。</p><p>​实际上 SecurityContextHolder 中存储是 SecurityContext，在 SecurityContext 中存储是 Authentication。</p><p><img src="/2022/01/26/SpringSecurity/image-20220113115956334.png" alt="image-20220113115956334"></p><p>这种设计是典型的策略设计模式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityContextHolder</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_THREADLOCAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_THREADLOCAL&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_INHERITABLETHREADLOCAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_GLOBAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_GLOBAL&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODE_PRE_INITIALIZED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MODE_PRE_INITIALIZED&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SecurityContextHolderStrategy strategy;<br>  <span class="hljs-comment">//....</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeStrategy</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (MODE_PRE_INITIALIZED.equals(strategyName)) &#123;<br>Assert.state(strategy != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;When using &quot;</span> + MODE_PRE_INITIALIZED<br>+ <span class="hljs-string">&quot;, setContextHolderStrategy must be called with the fully constructed strategy&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;<br><span class="hljs-comment">// Set default</span><br>strategyName = MODE_THREADLOCAL;<br>&#125;<br><span class="hljs-keyword">if</span> (strategyName.equals(MODE_THREADLOCAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalSecurityContextHolderStrategy</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocalSecurityContextHolderStrategy</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (strategyName.equals(MODE_GLOBAL)) &#123;<br>strategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalSecurityContextHolderStrategy</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br>    <span class="hljs-comment">//.....</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>MODE THREADLOCAL</code>：这种存放策略是将 SecurityContext 存放在 ThreadLocal中，大家知道 Threadlocal 的特点是在哪个线程中存储就要在哪个线程中读取，这其实非常适合 web 应用，因为在默认情况下，一个请求无论经过多少 Filter 到达 Servlet，都是由一个线程来处理的。这也是 SecurityContextHolder 的默认存储策略，这种存储策略意味着如果在具体的业务处理代码中，开启了子线程，在子线程中去获取登录用户数据，就会获取不到。</li><li><code>MODE INHERITABLETHREADLOCAL</code>：这种存储模式适用于多线程环境，如果希望在子线程中也能够获取到登录用户数据，那么可以使用这种存储模式。</li><li><code>MODE GLOBAL</code>：这种存储模式实际上是将数据保存在一个静态变量中，在 JavaWeb开发中，这种模式很少使用到。</li></ol><h4 id="SecurityContextHolderStrategy"><a href="#SecurityContextHolderStrategy" class="headerlink" title="SecurityContextHolderStrategy"></a>SecurityContextHolderStrategy</h4><p>通过 SecurityContextHolder 可以得知，SecurityContextHolderStrategy 接口用来定义存储策略方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityContextHolderStrategy</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clearContext</span><span class="hljs-params">()</span>;<br>SecurityContext <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(SecurityContext context)</span>;<br>SecurityContext <span class="hljs-title function_">createEmptyContext</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口中一共定义了四个方法：</p><ul><li><code>clearContext</code>：该方法用来清除存储的 SecurityContext对象。</li><li><code>getContext</code>：该方法用来获取存储的 SecurityContext 对象。</li><li><code>setContext</code>：该方法用来设置存储的 SecurityContext 对象。</li><li><code>create Empty Context</code>：该方法则用来创建一个空的 SecurityContext 对象。</li></ul><p><img src="/2022/01/26/SpringSecurity/image-20220113125407538-2049649.png" alt="image-20220113125407538"></p><p>从上面可以看出每一个实现类对应一种策略的实现。</p><h4 id="代码中获取认证之后用户数据"><a href="#代码中获取认证之后用户数据" class="headerlink" title="代码中获取认证之后用户数据"></a>代码中获取认证之后用户数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder<br>        .getContext().getAuthentication();<br>      <span class="hljs-type">User</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (User) authentication.getPrincipal();<br>      System.out.println(<span class="hljs-string">&quot;身份 :&quot;</span>+principal.getUsername());<br>      System.out.println(<span class="hljs-string">&quot;凭证 :&quot;</span>+authentication.getCredentials());<br>      System.out.println(<span class="hljs-string">&quot;权限 :&quot;</span>+authentication.getAuthorities());<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多线程情况下获取用户数据"><a href="#多线程情况下获取用户数据" class="headerlink" title="多线程情况下获取用户数据"></a>多线程情况下获取用户数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder<br>          .getContext().getAuthentication();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (User) authentication.getPrincipal();<br>        System.out.println(<span class="hljs-string">&quot;身份 :&quot;</span>+principal.getUsername());<br>        System.out.println(<span class="hljs-string">&quot;凭证 :&quot;</span>+authentication.getCredentials());<br>        System.out.println(<span class="hljs-string">&quot;权限 :&quot;</span>+authentication.getAuthorities());<br>      &#125;).start();<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113124141492.png" alt="image-20220113124141492"></p><p><strong>可以看到默认策略，是无法在子线程中获取用户信息，如果需要在子线程中获取必须使用第二种策略，默认策略是通过 System.getProperty 加载的，因此我们可以通过增加 VM Options 参数进行修改。</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">-Dspring.security.strategy</span>=<span class="hljs-string">MODE_INHERITABLETHREADLOCAL</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220113124639102.png" alt="image-20220113124639102"></p><h4 id="SecurityContextPersistenceFilter详解"><a href="#SecurityContextPersistenceFilter详解" class="headerlink" title="SecurityContextPersistenceFilter详解"></a>SecurityContextPersistenceFilter详解</h4><p>过滤器的核心方法当然是doFilter,我们就从doFilter方法开始介绍</p><ol><li>首先从request中获取FILTER_APPLIED属性,如果该属性值不为null,则直接执行chain.doFilter方法,当前过滤器到此为止,这个判断主要是确保请求只执行一次该过滤器.如果确实是该request第一次经过该过滤器,则给其设置上FILTER_APPLIED属性</li><li>forceEagerSessionCreation变量表示是否要在过滤器链执行之前确保会话有效,由于这是一个比较耗费资源的操作,因此默认为false</li><li>构建HttpRequestResponseHolder对象,将HttpServletRequest和HttpServletResponse都存储进去</li><li>调用repo.loadContext方法去加载SecurityContext</li><li>将读取到的SecurityContext存入SecurityContextHolder之中,这样,在接下来的处理逻辑中,开发者就可以直接通过SecurityContextHolder来获取当前登录的用户了</li><li>当请求处理完毕后,在finally模块中,获取最新的SecurityContext对象</li><li>最后,从request最后移除FILTER_APPLIED属性</li></ol><p>总而言之,请求在到达SecurityContextPersistenceFilter过滤器之后,先从HttpSession中读取SecurityContext出来,并存入SecurityContextHolder,并存入SecurityContextHolder之中以备后续使用;当请求离开SecuirtyContextPersistenceFilter过滤器的时候,获取最新的SecurityContext并存入HttpSession中,同时清空SecurityContextHolder中的登录用户信息</p><h4 id="从当前请求对象获取用户信息"><a href="#从当前请求对象获取用户信息" class="headerlink" title="从当前请求对象获取用户信息"></a>从当前请求对象获取用户信息</h4><p>接下来我们来看一洗第二种登录数据获取方法: 从当前请求中获取. 获取代码如下:</p><p><img src="/2022/01/26/SpringSecurity/image-20230212213216653.png" alt="image-20230212213216653"></p><p>​开发者可以直接在Controller的请求参数中放入Authentication对象来获取登录用户信息.通过前面的讲解,大家已经知道Authentication是Principal的子类, 所以可以直接在请求参数中放入Principal来接收当前登录用户信息.<strong>需要注意的是,即使参数是Principal,真正的实例依然是Authentication的实例.</strong></p><p>​用过Spring MVC的都知道,Controller中的方法的参数都是当前请求HttpServletRequest带来的.毫无疑问,前面的Authentication和Principal参数也都是HttpServletRequest带来的,那么这些数据到底是何时放入HttpServletRequest的呢? 又是以何种形式存在的呢?我们下面一起来分析下:</p><p>在Servlet规范中,最早有三个和安全管理相关的方法:</p><ol><li>getRemoteUser方法用来获取登录用户名.</li><li>isUserInRole方法用来判断当前登录用户是否具备某个指定的角色</li><li>getUserPrincipal方法用来获取当前认证主体</li></ol><p>从Servlet3.0开始,在这三个方法的基础上,又增加了三个和安全管理相关的方法:</p><ol><li>authenticate方法来判断当前请求是否认证成功</li><li>login方法可以执行登录操作</li><li>logout方法可以执行注销操作</li></ol><p>不过HttpServletRequest只是一个接口,这些安全认证相关的方法,在不同的环境会有不同的实现:</p><ul><li>如果是一个普通的Web相关,不使用任何框架,HttpServletRequest的默认实现类是Tomcat中的RequestFacade,从这个类的名称就可以看出来,这使用了Facade模式(外观模式)的类, 真正提供底层服务的是Tomcat中的Request对象,只不过这个Request对象在实现Servlet规范的同时还定义了很多Tomcat内部的方法,为了避免开发者直接调用这些内部方法,这里使用了外观模式</li><li>如果使用了Spring Security框架,那么我们在Controller参数中拿到的HttpServletRequest实例将是Servlet3SecurityContextHolderAwareRequestWrapper,很明显,这是被Spring Security封装过的请求,我们来看一下Servlet3SecurityContextHolderAwareRequestWrapper的继承关系,如下图:</li></ul><img src="/2022/01/26/SpringSecurity/image-20230212215627835.png" alt="image-20230212215627835" style="zoom: 50%;"><p>Servlet3.0中新增的三个安全管理相关的方法,则在Servlet3SecurityContextHolderAwareRequestWrapper类中实现.获取用户登录信息主要和前面三个方法有关,因此这里我们主要来看一下SecurityContextHolderAwareRequestWrapper类中相关方法的实现:</p><ol><li>getAuthentication: 该方法用来获取当前登录对象Authentication,获取方式就是我们前面所讲的从SecurityContextHolder中获取.如果不是匿名对象就返回,否则就返回null</li></ol><img src="/2022/01/26/SpringSecurity/image-20230212220211491.png" alt="image-20230212220211491" style="zoom:50%;"><ol start="2"><li>getRemoteUser: 该方法返回了当前登录用户的用户名,如果Authentication对象中存储的Principal是当前登录用户对象,则返回用户名;</li></ol><img src="/2022/01/26/SpringSecurity/image-20230212220651187.png" alt="image-20230212220651187" style="zoom:50%;"><ol start="3"><li>getUserPrincipal: 刚方法返回当前登录用户对象,其实就是Authentication的实例</li></ol><img src="/2022/01/26/SpringSecurity/image-20230212220803330.png" alt="image-20230212220803330" style="zoom:50%;"><ol start="4"><li>isGranted: 该方法是一个私有的方法,作业是判断当前登录用户是否具备某个指定的角色.判断逻辑也很简单,先对传入的角色进行预处理,有的情况可能需要添加ROLE_前缀,然后调用Authentication#getAuthorities方法,获取当前登录用户所具备的所有角色,最后再和传入进来的参数进行比较</li></ol><img src="/2022/01/26/SpringSecurity/image-20230212221126723.png" alt="image-20230212221126723" style="zoom:50%;"><ol start="5"><li>isUserInRole: 该方法调用isGranted方法,进而实现判断当前用户是否具备某个指定角色的功能</li></ol><p>我们用HttpServletRequest就可以获取到很多信息了:</p><img src="/2022/01/26/SpringSecurity/image-20230212221335962.png" alt="image-20230212221335962" style="zoom:50%;"><p>​前面我们直接讲Authentication或者Principal写到Controller参数中,实际上就是Spring MVC框架从Servlet3SecurityContextHolderAwareRequestWrapper中提取的用户信息.</p><p>​那么SpringSecurity怎么讲默认的请求对象包装成Servlet3SecurityContextHolderAwareRequestWrapper的呢?就涉及到另一个重要的过滤器:SecurityContextHolderAwareRequestFilter</p><h4 id="页面上获取用户信息"><a href="#页面上获取用户信息" class="headerlink" title="页面上获取用户信息"></a>页面上获取用户信息</h4><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>页面加入命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>页面中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--获取认证用户名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.authorities&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.accountNonExpired&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.accountNonLocked&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.credentialsNonExpired&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-1-9-自定义认证数据源"><a href="#3-1-9-自定义认证数据源" class="headerlink" title="3.1.9 自定义认证数据源"></a>3.1.9 自定义认证数据源</h3><h4 id="认证流程分析"><a href="#认证流程分析" class="headerlink" title="认证流程分析"></a>认证流程分析</h4><p><a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html">https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html</a></p><img src="/2022/01/26/SpringSecurity/01/26/SpringSecurity/image-20220118060526805.png" class title="image-20220118060526805"><ul><li>发起认证请求，请求中携带用户名、密码，该请求会被<code>UsernamePasswordAuthenticationFilter</code> 拦截(准确是AbstractProcessingFilter)</li><li>在<code>UsernamePasswordAuthenticationFilter</code>的<code>attemptAuthentication</code>方法中将请求中用户名和密码，封装为<code>Authentication</code>对象，并交给<code>AuthenticationManager</code> 进行认证</li><li>认证成功，将认证信息存储到 SecurityContextHodler 以及调用记住我等，并回调 <code>AuthenticationSuccessHandler</code> 处理</li><li>认证失败，清除 SecurityContextHolder 以及 记住我中信息，回调 <code>AuthenticationFailureHandler</code> 处理</li></ul><h4 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h4><p>从上面分析中得知，AuthenticationManager 是认证的核心类，但实际上在底层真正认证时还离不开 ProviderManager 以及  AuthenticationProvider 。他们三者关系是样的呢？</p><ul><li><code>AuthenticationManager</code> 是一个认证管理器，它定义了 Spring Security 过滤器要执行认证操作。</li><li><code>ProviderManager</code> AuthenticationManager接口的实现类。Spring Security 认证时默认使用就是 ProviderManager。</li><li><code>AuthenticationProvider</code> 就是针对不同的身份类型执行的具体的身份认证。</li></ul><p><strong>AuthenticationManager 与 ProviderManager</strong></p><img src="/2022/01/26/SpringSecurity/01/26/SpringSecurity/image-20220118061756972.png" class title="image-20220118061756972"><p>​ProviderManager 是 AuthenticationManager 的唯一实现，也是 Spring Security 默认使用实现。从这里不难看出默认情况下AuthenticationManager 就是一个ProviderManager。</p><p><strong>ProviderManager 与 AuthenticationProvider</strong></p><p>摘自官方: <a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html">https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html</a></p><img src="/2022/01/26/SpringSecurity/01/26/SpringSecurity/image-20220118060824066.png" class title="image-20220118060824066"><p>​在 Spring Security 中，允许系统同时支持多种不同的认证方式，例如同时支持用户名&#x2F;密码认证、ReremberMe 认证、手机号码动态认证等，而不同的认证方式对应了不同的 AuthenticationProvider，所以一个完整的认证流程可能由多个 AuthenticationProvider 来提供。</p><p>​多个 AuthenticationProvider 将组成一个列表，这个列表将由 ProviderManager 代理。换句话说，在ProviderManager 中存在一个 AuthenticationProvider 列表，在Provider Manager 中遍历列表中的每一个 AuthenticationProvider 去执行身份认证，最终得到认证结果。</p><p>​ProviderManager 本身也可以再配置一个 AuthenticationManager 作为 parent，这样当ProviderManager 认证失败之后，就可以进入到 parent 中再次进行认证。理论上来说，ProviderManager 的 parent 可以是任意类型的 AuthenticationManager，但是通常都是由<br>ProviderManager 来扮演 parent 的角色，也就是 ProviderManager 是 ProviderManager 的 parent。</p><p>​ProviderManager 本身也可以有多个，多个ProviderManager 共用同一个 parent。有时，一个应用程序有受保护资源的逻辑组（例如，所有符合路径模式的网络资源，如&#x2F;api&#x2F;**），每个组可以有自己的专用 AuthenticationManager。通常，每个组都是一个ProviderManager，它们共享一个父级。然后，父级是一种 <code>全局</code>资源，作为所有提供者的后备资源。</p><p>根据上面的介绍，我们绘出新的 AuthenticationManager、ProvideManager 和 AuthentictionProvider 关系</p><p>摘自官网: <a href="https://spring.io/guides/topicals/spring-security-architecture">https://spring.io/guides/topicals/spring-security-architecture</a></p><img src="/2022/01/26/SpringSecurity/01/26/SpringSecurity/image-20220118061343516.png" class title="image-20220118061343516"><p> 弄清楚认证原理之后我们来看下具体认证时数据源的获取。<code>默认情况下 AuthenticationProvider  是由 DaoAuthenticationProvider 类来实现认证的，在DaoAuthenticationProvider 认证时又通过 UserDetailsService 完成数据源的校验。</code>他们之间调用关系如下：</p><img src="/2022/01/26/SpringSecurity/01/26/SpringSecurity/image-20220114163045543.png" class title="image-20220114163045543"><p><strong>总结: AuthenticationManager 是认证管理器，在 Spring Security 中有全局AuthenticationManager，也可以有局部AuthenticationManager。全局的AuthenticationManager用来对全局认证进行处理，局部的AuthenticationManager用来对某些特殊资源认证处理。当然无论是全局认证管理器还是局部认证管理器都是由 ProviderManger 进行实现。 每一个ProviderManger中都代理一个AuthenticationProvider的列表，列表中每一个实现代表一种身份认证方式。认证时底层数据源需要调用 UserDetailService 来实现。</strong></p><h4 id="配置全局-AuthenticationManager"><a href="#配置全局-AuthenticationManager" class="headerlink" title="配置全局 AuthenticationManager"></a>配置全局 AuthenticationManager</h4><p><a href="https://spring.io/guides/topicals/spring-security-architecture">https://spring.io/guides/topicals/spring-security-architecture</a></p><ul><li><p>默认的全局 AuthenticationManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> &#123;<br>    <span class="hljs-comment">//builder..</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>springboot 对 security 进行自动配置时自动在工厂中创建一个全局<strong>AuthenticationManager</strong></li></ul><p><strong>总结</strong></p><ol><li>默认自动配置创建全局<strong>AuthenticationManager</strong> 默认找当前项目中是否存在自定义 <strong>UserDetailService</strong> 实例 自动将当前项目 UserDetailService 实例设置为数据源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>       inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;aaa&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>       <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>   &#125;<br>  <br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//因为上面的UserDetailsService会覆盖默认的UserDetailsService，所以下一条语句不用写</span><br>       <span class="hljs-comment">//builder.userDetailsService(userDetailsService());</span><br>   &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>默认自动配置创建全局AuthenticationManager 在工厂中使用时直接在代码中注入即可</li></ol></li><li><p>自定义全局 AuthenticationManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br> <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>    inMemoryUserDetailsManager.createUser(User.builder().username(<span class="hljs-string">&quot;gzzear&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;gaozhe&quot;</span>).build());<br>    <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    auth.userDetailsService(userDetailsService());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>一旦通过 configure 方法自定义 AuthenticationManager实现 就回将工厂中自动配置AuthenticationManager（之前全局的） 进行覆盖</li><li>一旦通过 configure 方法自定义 AuthenticationManager实现 需要重新在实现中指定认证数据源对象 UserDetaiService 实例</li><li>一旦通过 configure 方法自定义 AuthenticationManager实现 这种方式创建AuthenticationManager对象工厂内部本地一个 AuthenticationManager 对象 不允许在其他自定义组件中进行注入</li></ol></li><li><p>用来在工厂中暴露自定义AuthenticationManager 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>  <br>    <span class="hljs-comment">//1.自定义AuthenticationManager  推荐  并没有在工厂中暴露出来</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义AuthenticationManager: &quot;</span> + builder);<br>        builder.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-comment">//作用: 用来将自定义AuthenticationManager在工厂中进行暴露,可以在任何位置注入</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="自定义内存数据源"><a href="#自定义内存数据源" class="headerlink" title="自定义内存数据源"></a>自定义内存数据源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span><br>                <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> User.withUsername(<span class="hljs-string">&quot;zhangs&quot;</span>)<br>                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>).roles(<span class="hljs-string">&quot;USER&quot;</span>).build();<br>        inMemoryUserDetailsManager.createUser(u1);<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <br>      <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义数据库数据源"><a href="#自定义数据库数据源" class="headerlink" title="自定义数据库数据源"></a>自定义数据库数据源</h4><ul><li><p>设计表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>(<br>    `id`                    <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `username`              <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `password`              <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `enabled`               tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `accountNonExpired`     tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `accountNonLocked`      tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `credentialsNonExpired` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">-- 角色表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role`<br>(<br>    `id`      <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name`    <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `name_zh` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">-- 用户角色关系表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role`<br>(<br>    `id`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `uid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `rid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    KEY   `uid` (`uid`),<br>    KEY   `rid` (`rid`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure></li><li><p>插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入用户数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;blr&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 插入角色数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ROLE_product&#x27;</span>, <span class="hljs-string">&#x27;商品管理员&#x27;</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ROLE_admin&#x27;</span>, <span class="hljs-string">&#x27;系统管理员&#x27;</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ROLE_user&#x27;</span>, <span class="hljs-string">&#x27;用户管理员&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 插入用户角色数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure></li><li><p>项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置 springboot 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># datasource</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:com/baizhi/mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.baizhi.entity</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># log</span><br><span class="hljs-attr">logging.level.com.baizhi</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li><li><p>创建 entity</p><ul><li><p>创建 user 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Boolean enabled;<br>    <span class="hljs-keyword">private</span> Boolean accountNonExpired;<br>    <span class="hljs-keyword">private</span> Boolean accountNonLocked;<br>    <span class="hljs-keyword">private</span> Boolean credentialsNonExpired;<br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        roles.forEach(role-&gt;grantedAuthorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role.getName())));<br>        <span class="hljs-keyword">return</span> grantedAuthorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountNonLocked;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> credentialsNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> enabled;<br>    &#125;<br><span class="hljs-comment">//get/set....</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 role 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String nameZh;<br>  <span class="hljs-comment">//get set..</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建 UserDao 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-comment">//根据用户名查询用户</span><br>    User <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span>;<br>  <br>  <span class="hljs-comment">//根据用户id查询角色</span><br>  List&lt;Role&gt; <span class="hljs-title function_">getRolesByUid</span><span class="hljs-params">(Integer uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 UserMapper 实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--查询单个--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select id,<br>               username,<br>               password,<br>               enabled,<br>               accountNonExpired,<br>               accountNonLocked,<br>               credentialsNonExpired<br>        from user<br>        where username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询指定行数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRolesByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Role&quot;</span>&gt;</span><br>        select r.id,<br>               r.name,<br>               r.name_zh nameZh #一定要重名，不然会为null<br>        from role r,<br>             user_role ur<br>        where r.id = ur.rid<br>          and ur.uid = #&#123;uid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 UserDetailService 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">final</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetailService</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span>(ObjectUtils.isEmpty(user))<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        user.setRoles(userDao.getRolesByUid(user.getId()));<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置 authenticationManager 使用自定义UserDetailService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WebSecurityConfigurer</span><span class="hljs-params">(UserDetailsService userDetailsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        builder.userDetailsService(userDetailsService);<br>    &#125;<br>  <br>  <br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">//web security..</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动测试即可</p></li></ul><hr><h4 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h4><p>​多个数据源是指在同 一个系统中，用户数据来自不同的表，在认证时，如果第 一张表没有查找到用户，那就去第二张表中查询，依次类推。</p><p>​看了前面的分析，要实现这个需求就很容易了。认证要经过<strong>AuthenticationProvider</strong>，每 一 个<strong>AuthenticationProvider</strong> 中都配置了一个<strong>UserDetailsService</strong>，而不同的<strong>UserDetailsService</strong> 则可以代表不同的数据源。所以我们只需要手动配置多个 <strong>AuthenticationProvider</strong>，并为不同的<strong>AuthenticationProvider</strong> 提供不同的<strong>UserDetailsService</strong> 即可。</p><p>​为了方便起见，这里通过<strong>InMemoryUserDetailsManager</strong> 来提供<strong>UserDetailsService</strong> 实例， 在实际开发中 ， 只需要将<strong>UserDetailsService</strong>换成自定义的 即可 ， 具体配置如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> UserDetailService userDetailService;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">inMemoryUserDetailService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(User.builder().username(<span class="hljs-string">&quot;gaozhe&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;gaozhe&quot;</span>).build());<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>    daoAuthenticationProvider1.setUserDetailsService(userDetailService);<br>    <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>    daoAuthenticationProvider2.setUserDetailsService(inMemoryUserDetailService());<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(daoAuthenticationProvider1, daoAuthenticationProvider2);<br>  &#125;<br></code></pre></td></tr></table></figure><p>首先定义了两个<strong>UserDetailsService</strong> 实例，不同实例中存储了不同的用户;然后重写 <strong>authenticationManagerBean</strong> 方法，在该方法中，定义了两个<strong>DaoAuthenticationProvider</strong> 实例并分别设置了不同的 <strong>UserDetailsService</strong> :最后构建 <strong>ProviderManager</strong> 实例并传入两个 <strong>DaoAuthenticationProvider</strong>。当系统进行身份认证操作时，就会遍历<strong>ProviderManager</strong> 中不同的 <strong>DaoAuthenticationProvider</strong>，进而调用到不同的数据源。</p><h3 id="3-1-10-添加认证验证码"><a href="#3-1-10-添加认证验证码" class="headerlink" title="3.1.10 添加认证验证码"></a>3.1.10 添加认证验证码</h3><h4 id="配置验证码"><a href="#配置验证码" class="headerlink" title="配置验证码"></a>配置验证码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.penggle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.code.kaptcha.Producer;<br><span class="hljs-keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;<br><span class="hljs-keyword">import</span> com.google.code.kaptcha.util.Config;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Producer <span class="hljs-title function_">kaptcha</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.image.width&quot;</span>, <span class="hljs-string">&quot;150&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.image.height&quot;</span>, <span class="hljs-string">&quot;50&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.textproducer.char.string&quot;</span>, <span class="hljs-string">&quot;0123456789&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>(properties);<br>        <span class="hljs-type">DefaultKaptcha</span> <span class="hljs-variable">defaultKaptcha</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultKaptcha</span>();<br>        defaultKaptcha.setConfig(config);<br>        <span class="hljs-keyword">return</span> defaultKaptcha;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="传统-web-开发"><a href="#传统-web-开发" class="headerlink" title="传统 web 开发"></a>传统 web 开发</h4><ul><li><p>生成验证码 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 验证码接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gaozhe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/4 下午5:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;验证码接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaptchaController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Producer kaptchaProducer;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;验证码&quot;)</span><br>  <span class="hljs-comment">//produces配置数据类型及编码</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;captcha&quot;, method = RequestMethod.GET, produces = &quot;image/jpeg&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">captcha</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">//设置缓存时间</span><br>        response.setDateHeader(<span class="hljs-string">&quot;Expires&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//设置不使用缓存</span><br>        response.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-store, no-cache, must-revalidate&quot;</span>);<br>        <span class="hljs-comment">//设置缓存更新时间间隔</span><br>        response.addHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;post-check=0, pre-check=0&quot;</span>);<br>        <span class="hljs-comment">//不设置缓存</span><br>        response.addHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        <span class="hljs-comment">//设置响应类型</span><br>        response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br><br>        <span class="hljs-comment">//--------------------生成验证码 begin--------------------</span><br>        <span class="hljs-comment">//获取验证码文本内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">verifyCode</span> <span class="hljs-operator">=</span> kaptchaProducer.createText();<br>        log.info(<span class="hljs-string">&quot;验证码的内容是：&#123;&#125;&quot;</span>, verifyCode);<br>        <span class="hljs-comment">//将验证码放入session中</span><br>        request.getSession().setAttribute(<span class="hljs-string">&quot;captcha&quot;</span>, verifyCode);<br>        <span class="hljs-comment">//根据验证码文本内容生成图像验证码</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> kaptchaProducer.createImage(verifyCode);<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            out = response.getOutputStream();<br>            <span class="hljs-comment">//输出流输出图片，格式为jpg</span><br>            ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, out);<br>            out.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaNotMatchException</span>(<span class="hljs-string">&quot;验证码生成出错&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (!Objects.isNull(out)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaNotMatchException</span>(<span class="hljs-string">&quot;验证码生成出错&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//--------------------生成验证码 end--------------------</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>自定义验证码异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaNotMatchException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthenticationException</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KaptchaNotMatchException</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KaptchaNotMatchException</span><span class="hljs-params">(String msg, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg, cause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自定义filter验证验证码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KAPTCHA_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;kaptcha&quot;</span>;<span class="hljs-comment">//默认值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">kaptcha</span> <span class="hljs-operator">=</span> KAPTCHA_KEY;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKaptcha</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> kaptcha;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKaptcha</span><span class="hljs-params">(String kaptcha)</span> &#123;<br>        <span class="hljs-built_in">this</span>.kaptcha = kaptcha;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">//1.判断是否是 post 方式</span><br>        <span class="hljs-keyword">if</span> (request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationServiceException</span>(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());<br>        &#125;<br>        <span class="hljs-comment">//2.获取验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">kaptcha</span> <span class="hljs-operator">=</span> request.getParameter(getKaptcha());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sessionKaptcha</span> <span class="hljs-operator">=</span> (String) request.getSession().getAttribute(<span class="hljs-string">&quot;kaptcha&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(kaptcha) &amp;&amp; !ObjectUtils.isEmpty(sessionKaptcha) &amp;&amp;<br>                kaptcha.equalsIgnoreCase(sessionKaptcha)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.attemptAuthentication(request, response);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaNotMatchException</span>(<span class="hljs-string">&quot;验证码输入错误!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>放行以及配置验证码 filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WebSecurityConfigurer</span><span class="hljs-params">(UserDetailsService userDetailsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        builder.userDetailsService(userDetailsService);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KaptchaFilter <span class="hljs-title function_">kaptchaFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KaptchaFilter</span> <span class="hljs-variable">kaptchaFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaFilter</span>();<br>        <span class="hljs-comment">//指定接收验证码请求参数名</span><br>        kaptchaFilter.setKaptcha(<span class="hljs-string">&quot;kaptcha&quot;</span>);<br>        <span class="hljs-comment">//指定认证管理器</span><br>        kaptchaFilter.setAuthenticationManager(authenticationManagerBean());<br>        <span class="hljs-comment">//指定认证成功和失败处理</span><br>        kaptchaFilter.setAuthenticationSuccessHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span>());<br>        kaptchaFilter.setAuthenticationFailureHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span>());<br>        <span class="hljs-comment">//指定处理登录</span><br>        kaptchaFilter.setFilterProcessesUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>);<br>        kaptchaFilter.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>        kaptchaFilter.setPasswordParameter(<span class="hljs-string">&quot;passwd&quot;</span>);<br>        <span class="hljs-keyword">return</span> kaptchaFilter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/vc.jpg&quot;</span>).permitAll()<br>                .mvcMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)<br>              ...<br>        http.addFilterAt(kaptchaFilter(), UsernamePasswordAuthenticationFilter.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录页面添加验证码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    验证码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kaptcha&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/vc.jpg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h4><ul><li><p>生成验证码 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> Producer producer;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br><br>  <span class="hljs-meta">@GetMapping(&quot;/captcha&quot;)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getVerifyCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.生成验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> producer.createText();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-comment">//将验证码放入redis</span><br>    redisUtil.set(BusinessConstant.CAPTCHA_KEY + key, code, <span class="hljs-number">2</span>,<br>        TimeUnit.MINUTES);<br>    log.info(<span class="hljs-string">&quot;验证码: &#123;&#125;&quot;</span>, code);<br>    <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bi</span> <span class="hljs-operator">=</span> producer.createImage(code);<br>    <span class="hljs-comment">//2.写入内存</span><br>    <span class="hljs-type">FastByteArrayOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastByteArrayOutputStream</span>();<br>    ImageIO.write(bi, <span class="hljs-string">&quot;jpg&quot;</span>, fos);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data:image/jpeg;base64,&quot;</span>;<br>    <span class="hljs-comment">//3.生成 base64</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">base64Img</span> <span class="hljs-operator">=</span> str + Base64.encodeBase64String(fos.toByteArray());<br>    <span class="hljs-keyword">return</span> Result.succ(<br>        MapUtil.builder()<br>            .put(<span class="hljs-string">&quot;token&quot;</span>, key)<br>            .put(<span class="hljs-string">&quot;captchaImg&quot;</span>, base64Img)<br>            .build()<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>定义验证码异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KaptchaNotMatchException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthenticationException</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KaptchaNotMatchException</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KaptchaNotMatchException</span><span class="hljs-params">(String msg, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg, cause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在自定义LoginKaptchaFilter中加入验证码验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//自定义 filter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginKaptchaFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FORM_KAPTCHA_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;kaptcha&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">kaptchaParameter</span> <span class="hljs-operator">=</span> FORM_KAPTCHA_KEY;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKaptchaParameter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> kaptchaParameter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKaptchaParameter</span><span class="hljs-params">(String kaptchaParameter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.kaptchaParameter = kaptchaParameter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-keyword">if</span> (!request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationServiceException</span>(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取请求数据</span><br>            Map&lt;String, String&gt; userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().readValue(request.getInputStream(), Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">kaptcha</span> <span class="hljs-operator">=</span> userInfo.get(getKaptchaParameter());<span class="hljs-comment">//用来获取数据中验证码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> userInfo.get(getUsernameParameter());<span class="hljs-comment">//用来接收用户名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> userInfo.get(getPasswordParameter());<span class="hljs-comment">//用来接收密码</span><br>            <span class="hljs-comment">//2.获取 session 中验证码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sessionVerifyCode</span> <span class="hljs-operator">=</span> (String) request.getSession().getAttribute(<span class="hljs-string">&quot;kaptcha&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(kaptcha) &amp;&amp; !ObjectUtils.isEmpty(sessionVerifyCode) &amp;&amp;<br>                    kaptcha.equalsIgnoreCase(sessionVerifyCode)) &#123;<br>                <span class="hljs-comment">//3.获取用户名 和密码认证</span><br>                <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(username, password);<br>                setDetails(request, authRequest);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAuthenticationManager().authenticate(authRequest);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KaptchaNotMatchException</span>(<span class="hljs-string">&quot;验证码不匹配!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-comment">//自定义内存数据源</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>    <span class="hljs-comment">//配置</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginKaptchaFilter <span class="hljs-title function_">loginKaptchaFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">LoginKaptchaFilter</span> <span class="hljs-variable">loginKaptchaFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginKaptchaFilter</span>();<br>        <span class="hljs-comment">//1.认证 url</span><br>        loginKaptchaFilter.setFilterProcessesUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>);<br>        <span class="hljs-comment">//2.认证 接收参数</span><br>        loginKaptchaFilter.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>        loginKaptchaFilter.setPasswordParameter(<span class="hljs-string">&quot;passwd&quot;</span>);<br>        loginKaptchaFilter.setKaptchaParameter(<span class="hljs-string">&quot;kaptcha&quot;</span>);<br>        <span class="hljs-comment">//3.指定认证管理器</span><br>        loginKaptchaFilter.setAuthenticationManager(authenticationManagerBean());<br>        <span class="hljs-comment">//4.指定成功时处理</span><br>        loginKaptchaFilter.setAuthenticationSuccessHandler((req, resp, authentication) -&gt; &#123;<br>            Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>            result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;用户信息&quot;</span>, authentication.getPrincipal());<br>            resp.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>            resp.setStatus(HttpStatus.OK.value());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>            resp.getWriter().println(s);<br>        &#125;);<br>        <span class="hljs-comment">//5.认证失败处理</span><br>        loginKaptchaFilter.setAuthenticationFailureHandler((request, response, exception) -&gt; &#123;<br>                    response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>                    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>                    <span class="hljs-type">RespBean</span> <span class="hljs-variable">respBean</span> <span class="hljs-operator">=</span> RespBean.error(exception.getMessage());<br>                    <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> LockedException) &#123;<br>                        respBean.setMsg(<span class="hljs-string">&quot;账户被锁定，请联系管理员!&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> CredentialsExpiredException) &#123;<br>                        respBean.setMsg(<span class="hljs-string">&quot;密码过期，请联系管理员!&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> AccountExpiredException) &#123;<br>                        respBean.setMsg(<span class="hljs-string">&quot;账户过期，请联系管理员!&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> DisabledException) &#123;<br>                        respBean.setMsg(<span class="hljs-string">&quot;账户被禁用，请联系管理员!&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> BadCredentialsException) &#123;<br>                        respBean.setMsg(<span class="hljs-string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>);<br>                    &#125;<br>                    out.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(respBean));<br>                    out.flush();<br>                    out.close();<br>                &#125;<br>        <span class="hljs-keyword">return</span> loginKaptchaFilter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/vc.jpg&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .exceptionHandling()<br>                .authenticationEntryPoint((req, resp, ex) -&gt; &#123;<br>                    resp.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                    resp.setStatus(HttpStatus.UNAUTHORIZED.value());<br>                    resp.getWriter().println(<span class="hljs-string">&quot;必须认证之后才能访问!&quot;</span>);<br>                &#125;)<br>                .and()<br>                .logout()<br>                .and()<br>                .csrf().disable();<br><br>        http.addFilterAt(loginKaptchaFilter(), UsernamePasswordAuthenticationFilter.class);<br>    &#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试验证</p></li></ul><h1 id="第四章-过滤器链分析"><a href="#第四章-过滤器链分析" class="headerlink" title="第四章 过滤器链分析"></a>第四章 过滤器链分析</h1><p>本章主要讲解SpringSecurity的初始化流程分析</p><h2 id="4-1-SpringSecurity核心类"><a href="#4-1-SpringSecurity核心类" class="headerlink" title="4.1 SpringSecurity核心类"></a>4.1 SpringSecurity核心类</h2><p>要想明白SpringSecurity的过滤器链初始化思路, 首先我们可以从<strong>WebSecurity</strong>、<strong>HttpSecurity</strong>开始下手, 我们发现这两个类都实现了<strong>SecurityBuilder</strong>类, 我们先看下这个类:</p><h3 id="4-1-1-SecurityBuilder安全对象构建接口"><a href="#4-1-1-SecurityBuilder安全对象构建接口" class="headerlink" title="4.1.1 SecurityBuilder安全对象构建接口"></a>4.1.1 SecurityBuilder安全对象构建接口</h3><p>​Spring Security中所有需要构建的对象都可以通过<strong>SecuriyBuilder</strong>来实现, 默认的过滤器链、代理过滤器、<strong>AuthenticationManager</strong>等, 都可以通过<strong>SecurityBuilder</strong>来构建. <strong>SecurityBuilder</strong>的实现类如下图所示:</p><img src="/2022/01/26/SpringSecurity/image-20230215233755090.png" alt="image-20230215233755090" style="zoom:50%;"><p>​我们先来看下<strong>SecurityBuilder</strong>的源码:</p><img src="/2022/01/26/SpringSecurity/image-20230215234327892.png" alt="image-20230215234327892" style="zoom:50%;"><p>​由上述代码可以看到, <strong>SecurityBuilder</strong>中只有一个build方法, 就是对象构建方法. build方法的返回值, 就是具体构建的对象泛型O, 也就是说不同的<strong>SecurityBuilder</strong>将来会构建出不同的对象.</p><p>​<span style="color:red;">总的来说: 这个类是SpringSecurity创建对象的基类.</span></p><h4 id="AbstractSecurityBuilder"><a href="#AbstractSecurityBuilder" class="headerlink" title="AbstractSecurityBuilder"></a>AbstractSecurityBuilder</h4><p>承接<strong>SecurityBuilder</strong>, 刚我们查看源码发现这个类只是一个基类并没有很多方法, 那么则需要再实现一个类来完成构建.<strong>AbstractSecurityBuilder</strong>实现了<strong>SecurityBuilder</strong>接口, 并对<strong>build</strong>做了完善, 确保只<strong>build</strong>一次. 我们来看一下<strong>AbstractSecurityBuilder</strong>的源码:</p><img src="/2022/01/26/SpringSecurity/image-20230216000810983.png" alt="image-20230216000810983" style="zoom:50%;"><p>由上述代码可以看到, 在<strong>AbstractSecurityBuilder</strong>类中:</p><ol><li>首先声明了<strong>building</strong>变量, 可以确保即使在多线程环境下, 配置类也只构建一次</li><li>对<strong>build</strong>方法进行重写, 并且设置为<strong>final</strong>,这样在<strong>AbstractSecurityBuilder</strong>的子类中将不能再次重写<strong>build</strong>方法. 在build方法内部, 通过<strong>building</strong>变量来控制配置类只构建一次, <strong>具体的构建工作则交给doBuild</strong>方法去完成</li><li><strong>getObject</strong>方法用来返回构建的对象</li><li><strong>doBuild</strong>方法则是具体的构建方法, 该方法在<strong>AbstractSecurityBuilder</strong>中是一个抽象方法, 具体的实现在其子类中</li></ol><p>​<span style="color:red;"><strong>总而言之,AbstractSecurityBuilder实现了SecurityBuilder接口并确保在目标对象中只构建一次</strong></span></p><h4 id="AbstractConfiguredSecurityBuilder"><a href="#AbstractConfiguredSecurityBuilder" class="headerlink" title="AbstractConfiguredSecurityBuilder"></a>AbstractConfiguredSecurityBuilder</h4><p><strong>AbstractConfiguredSecurityBuilder</strong>这个类继承了<strong>AbstractSecurityBuilder</strong>, 维护了<strong>SecurityConfiurer</strong>集合,源码就稍微长一点, 我们分别来看下.</p><p>首先在<strong>AbstractConfiguredSecurityBuilder</strong>中声明了一个枚举类, 用来描述构建过程的不同状态:</p><img src="/2022/01/26/SpringSecurity/image-20230216095646474.png" alt="image-20230216095646474" style="zoom:50%;"><p>可以看到, 整个构建过程一共有五种不同的状态:</p><ul><li><strong>UNBUILT</strong>: 配置类构建前</li><li><strong>INITIALIZING</strong>: 初始化中 (初始化完成之前是这个状态)</li><li><strong>CONFIGURING</strong>: 配置中 (开始构建之前是这个状态)</li><li><strong>BUILDING</strong>: 构建中</li><li><strong>BUILT</strong>: 构建完成</li></ul><p>这个枚举类里面还提供了两个判断方法, <strong>isInitializing</strong>表示是否正在初始化中, <strong>isConfigured</strong>方法表示是否已完成配置</p><p><strong>AbstractConfiguredSecurityBuilder</strong>中还声明了<strong>configurers</strong>变量, 用来保存所有的配置类. 针对<strong>configurers</strong>变量, 我们可以进行添加配置、移除配置等操作, 相关方法如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractConfiguredSecurityBuilder</span>&lt;O, B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;O&gt;&gt;<br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSecurityBuilder</span>&lt;O&gt; &#123;<br>  <br>  <span class="hljs-comment">//首先声明了一个configurers变量, 用来保存所有的配置类, key是配置类Class对象, 值是一个List集合中放着配置类</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LinkedHashMap&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt;, List&lt;SecurityConfigurer&lt;O, B&gt;&gt;&gt; configurers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br><br>  <span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurerAdapter</span>&lt;O, B&gt;&gt; C <span class="hljs-title function_">apply</span><span class="hljs-params">(C configurer)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>configurer.addObjectPostProcessor(<span class="hljs-built_in">this</span>.objectPostProcessor);<br>configurer.setBuilder((B) <span class="hljs-built_in">this</span>);<br>add(configurer);<br><span class="hljs-keyword">return</span> configurer;<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; C <span class="hljs-title function_">apply</span><span class="hljs-params">(C configurer)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>add(configurer);<br><span class="hljs-keyword">return</span> configurer;<br>&#125;<br>  <br>  <span class="hljs-keyword">private</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(C configurer)</span> &#123;<br>Assert.notNull(configurer, <span class="hljs-string">&quot;configurer cannot be null&quot;</span>);<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; clazz = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt;) configurer<br>.getClass();<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.configurers) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.buildState.isConfigured()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot apply &quot;</span> + configurer + <span class="hljs-string">&quot; to already built object&quot;</span>);<br>&#125;<br>List&lt;SecurityConfigurer&lt;O, B&gt;&gt; configs = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.allowConfigurersOfSameType) &#123;<br>configs = <span class="hljs-built_in">this</span>.configurers.get(clazz);<br>&#125;<br>configs = (configs != <span class="hljs-literal">null</span>) ? configs : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>configs.add(configurer);<br><span class="hljs-built_in">this</span>.configurers.put(clazz, configs);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.buildState.isInitializing()) &#123;<br><span class="hljs-built_in">this</span>.configurersAddedInInitializing.add(configurer);<br>&#125;<br>&#125;<br>&#125;<br>  <br><span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; List&lt;C&gt; <span class="hljs-title function_">getConfigurers</span><span class="hljs-params">(Class&lt;C&gt; clazz)</span> &#123;<br>List&lt;C&gt; configs = (List&lt;C&gt;) <span class="hljs-built_in">this</span>.configurers.get(clazz);<br><span class="hljs-keyword">if</span> (configs == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(configs);<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; List&lt;C&gt; <span class="hljs-title function_">removeConfigurers</span><span class="hljs-params">(Class&lt;C&gt; clazz)</span> &#123;<br>List&lt;C&gt; configs = (List&lt;C&gt;) <span class="hljs-built_in">this</span>.configurers.remove(clazz);<br><span class="hljs-keyword">if</span> (configs == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(configs);<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; C <span class="hljs-title function_">getConfigurer</span><span class="hljs-params">(Class&lt;C&gt; clazz)</span> &#123;<br>List&lt;SecurityConfigurer&lt;O, B&gt;&gt; configs = <span class="hljs-built_in">this</span>.configurers.get(clazz);<br><span class="hljs-keyword">if</span> (configs == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>Assert.state(configs.size() == <span class="hljs-number">1</span>,<br>() -&gt; <span class="hljs-string">&quot;Only one configurer expected for type &quot;</span> + clazz + <span class="hljs-string">&quot;, but got &quot;</span> + configs);<br><span class="hljs-keyword">return</span> (C) configs.get(<span class="hljs-number">0</span>);<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt;&gt; C <span class="hljs-title function_">removeConfigurer</span><span class="hljs-params">(Class&lt;C&gt; clazz)</span> &#123;<br>List&lt;SecurityConfigurer&lt;O, B&gt;&gt; configs = <span class="hljs-built_in">this</span>.configurers.remove(clazz);<br><span class="hljs-keyword">if</span> (configs == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>Assert.state(configs.size() == <span class="hljs-number">1</span>,<br>() -&gt; <span class="hljs-string">&quot;Only one configurer expected for type &quot;</span> + clazz + <span class="hljs-string">&quot;, but got &quot;</span> + configs);<br><span class="hljs-keyword">return</span> (C) configs.get(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来解析一下这段源码:</p><ol><li>首先声明了一个<strong>configurers</strong>变量, 用来保存所有的配置类, key是配置类Class对象, 值是一个List集合中放着配置类</li><li><strong>apply</strong>方法有两个,参数类型差不多, 主要功能基本一致, 都是向<strong>configurers</strong>变量中添加配置类, 具体的添加过程则是调用<strong>add</strong>方法.</li><li><strong>add</strong>方法用来将所有的配置类保存在<strong>configurers</strong>中, 在添加的过程中, 如果<strong>allowConfigurersOfSameType</strong>变量为<strong>true</strong>, 则表示允许相同类型的配置存在, 也就是List集合中可以存在多个相同类型的配置类. 默认情况下, 如果是普通配置类, <strong>allowConfigurersOfSameType</strong>是<strong>false</strong>, 所以List集合中的配置类始终只有一个配置类; 如果在<strong>AuthenticationManagerBuilder</strong>中设置<strong>allowConfigurersOfSameType</strong>为<strong>true</strong>, 此时相同类型的配置类可以有多个 (后文会详细介绍)</li><li><strong>getConfigurers(Class<C>)</C></strong> 方法可以从<strong>configurers</strong>中返回某个配置类对应的所有实例</li><li><strong>removeConfigurers</strong>方法可以从<strong>configurers</strong>中移除某一个配置类对应的所有实例, 并返回被移除掉的配置类实例集合</li></ol><p>这些就是<strong>AbstractConfiguredSecurityBuilder</strong>中关于<strong>configurers</strong>的所有操作</p><p>接下来就是<strong>AbstractConfiguredSecurityBuilder</strong>中的<strong>doBuild</strong>方法了, 这是核心的构建方法, 我们一起来看一下相应方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Executes the build using the &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer&#125;&#x27;s that have been applied</span><br><span class="hljs-comment"> * using the following steps:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;ul&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;Invokes &#123;<span class="hljs-doctag">@link</span> #beforeInit()&#125; for any subclass to hook into&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;Invokes &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer#init(SecurityBuilder)&#125; for any</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer&#125; that was applied to this builder.&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;Invokes &#123;<span class="hljs-doctag">@link</span> #beforeConfigure()&#125; for any subclass to hook into&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;Invokes &#123;<span class="hljs-doctag">@link</span> #performBuild()&#125; which actually builds the Object&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;/ul&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> O <span class="hljs-title function_">doBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.configurers) &#123;<br><span class="hljs-built_in">this</span>.buildState = BuildState.INITIALIZING;<br>beforeInit();<br>init();<br><span class="hljs-built_in">this</span>.buildState = BuildState.CONFIGURING;<br>beforeConfigure();<br>configure();<br><span class="hljs-built_in">this</span>.buildState = BuildState.BUILDING;<br><span class="hljs-type">O</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> performBuild();<br><span class="hljs-built_in">this</span>.buildState = BuildState.BUILT;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Invoked prior to invoking each &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer#init(SecurityBuilder)&#125;</span><br><span class="hljs-comment"> * method. Subclasses may override this method to hook into the lifecycle without</span><br><span class="hljs-comment"> * using a &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeInit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Invoked prior to invoking each</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer#configure(SecurityBuilder)&#125; method. Subclasses may</span><br><span class="hljs-comment"> * override this method to hook into the lifecycle without using a</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SecurityConfigurer&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeConfigure</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Subclasses must implement this method to build the object that is being returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the Object to be buit or null if the implementation allows it</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> O <span class="hljs-title function_">performBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>Collection&lt;SecurityConfigurer&lt;O, B&gt;&gt; configurers = getConfigurers();<br><span class="hljs-keyword">for</span> (SecurityConfigurer&lt;O, B&gt; configurer : configurers) &#123;<br>configurer.init((B) <span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (SecurityConfigurer&lt;O, B&gt; configurer : <span class="hljs-built_in">this</span>.configurersAddedInInitializing) &#123;<br>configurer.init((B) <span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>Collection&lt;SecurityConfigurer&lt;O, B&gt;&gt; configurers = getConfigurers();<br><span class="hljs-keyword">for</span> (SecurityConfigurer&lt;O, B&gt; configurer : configurers) &#123;<br>configurer.configure((B) <span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在<strong>doBuild</strong>方法中, 一边更新构建状态, 一边执行构建方法. 构建方法中, <strong>beforeInit</strong>是一个空的初始化方法, 如果需要在初始化之前做一些准备工作, 可以通过重写该方法来实现.</li><li><strong>init</strong>方法是所有配置类的初始化方法, 在该方法中, 遍历所有的配置类, 并调用其<strong>init</strong>方法完成初始化操作</li><li><strong>beforeConfigure</strong>方法可以在<strong>configure</strong>方法执行之前做一些准备操作. 该方法默认也是一个空方法.</li><li><strong>configure</strong>方法用来完成所有配置类的配置, 在<strong>configure</strong>方法中, 遍历所有的配置类, 分别调用其<strong>configure</strong>方法来完成配置</li><li><strong>performBuild</strong>方法用来做最终的构建操作, 前面的准备工作完成之后, 最后在<strong>performBuild</strong>方法之后完成构建, 这是一个抽象方法, 具体的实现则在不同的配置类中.</li></ol><p><span style="color:red;">总而言之: <strong>AbstractConfiguredSecurityBuilder</strong>继承了<strong>AbstractSecurityBuilder</strong>, 并维护了<strong>SecurityConfigure</strong>集合, <strong>引入了不同的构建状态</strong>以及核心方法<strong>doBuild</strong>来遍历维护的<strong>SecurityConfigure</strong>集合来进行初始化<strong>init</strong>和配置<strong>configure</strong>操作、最后构建<strong>performBuilde</strong>. </span></p><h3 id="4-1-2-ObjectPostProcessor对象后置处理器"><a href="#4-1-2-ObjectPostProcessor对象后置处理器" class="headerlink" title="4.1.2 ObjectPostProcessor对象后置处理器"></a>4.1.2 ObjectPostProcessor对象后置处理器</h3><p><span style="color:red;"><strong>ObjectPostProcessor</strong>是Spring Security中使用频率很高的组件之一, 它是一个对象后置处理器, 也就是当一个对象创建成功后,如果还有一些额外的事情需要补充,那么可以通过<strong>ObjectPostProcessor</strong>来进行处理.</span>这个接口默认只有一个方法<strong>postProcess</strong>, 该方法用来完成对对象的二次处理,代码如下:</p><img src="/2022/01/26/SpringSecurity/image-20230215224147534.png" alt="image-20230215224147534" style="zoom:50%;"><p><strong>ObjectPostProcessor</strong>有两个默认实现:</p><img src="/2022/01/26/SpringSecurity/image-20230215230305042.png" alt="image-20230215230305042" style="zoom:50%;"><ul><li><strong>AutowireBeanFactoryObjectPostProcessor</strong>:  由于SpringSecurity中大量采用了Java配置, 许多过滤器都是直接new出来的, 这些直接new出来的对象并不会自动注入到Spring容器中.SpringSecurity这样做的本意是为了简化配置,但是却带来了另外一个问题就是, 大量new出来的对象需要我们手动注册到Spring容器中去. AutowireBeanFactoryObjectPostProcessor对象所承担的就是这件事,一个对象new出来之后,只要调用AutowireBeanFactoryObjectPostProcessor#postProcessor方法就可以成功注入到Spring容器中, 它的实现原理就是通过调用Spring容器中的AutowireCapableBeanFactory对象将一个new出来的对象注入到Spring容器中去.</li><li><strong>CompositeObjectPostProcessor</strong>:  这是ObjectPostProcessor的另一个实现, 一个对象可以有一个后置处理器,开发者可以自定义多个对象后置处理器. CompositeObjectPostProcessor是一个组合的对象后置处理器, 它里面维护了一个List集合, 集合里面存放了某个对象后置处理器, 它里面维护了一个List集合, 集合里面存放了某个对象的所有后置处理器, 当需要执行对象的后置处理器时, 会遍历集合中的所有ObjectPostProcessor实例, 分别调用实例的postProcess方法进行对象后置处理. <strong>在SpringSecurity框架中, 最终使用的对象后置处理器其实就是CompositeObjectPostProcessor, 它里面的集合默认只有一个对象, 就是AutowireBeanFactoryObjectPostProcessor</strong></li></ul><p>​在Spring Security中, 开发者可以灵活地配置项目中需要哪些Spring Security过滤器, 一旦选定过滤器之后,<span style="color:red;"> <strong>每一个过滤器都会有一个对应的配置器, 叫做xxxConfigurer (例如: CorsConfigurer、CsrfConfigurer、FormLoginConfigurer等), 过滤器都是在xxxConfigurer中new出来的, 然后在postProcess方法之后处理一遍, 就将这些过滤器注入到Spring容器中了.</strong></span></p><p>​这就是对象后置处理器<strong>ObjectPostProcessor</strong>的作用</p><h4 id="ObjectPostProcessor自定义使用"><a href="#ObjectPostProcessor自定义使用" class="headerlink" title="ObjectPostProcessor自定义使用"></a>ObjectPostProcessor自定义使用</h4><p>前面介绍了<strong>ObjectPostProcessor</strong>的基本使用. 所有的过滤器都由对应的配置类来负责创建, 配置类在将过滤器创建成功之后, 会调用父类的<strong>postProcess</strong>方法, 该方法最终会调用到<strong>CompositeObjectPostProcessor</strong>对象所维护的List集合中存储的所有<strong>ObjectPostProcessor</strong>对象, 并调用其<strong>postProcess</strong>方法对对象进行后置处理. 默认情况下, <strong>CompositeObjectPostProcessor</strong>对象中维护的List集合中只有一个对象那就是<strong>AutowireBeanFactoryObjectPostProcessor</strong>, 调用<strong>AutowireBeanFactoryObjectPostProcessor</strong>, 调用<strong>AutowireBeanFactroyObjectPostProcessor</strong>的<strong>postProcess</strong>方法可以将对象注册到Spring容器中去.</p><p>​开发者可以自定义<strong>ObjectPostProcessor</strong>对象, 并添加到<strong>CompositeObjectPostProcessor</strong>所维护的List集合中, 此时, 当一个过滤器在创建成功之后, 就会被两个对象后置处理器处理, 第一个默认的对象后置处理器, 负责将对象注册到Spring容器中; 第二个是我们自定义的对象后置处理器, 可以完成一下个性化配置</p><p>​自定义<strong>ObjectPostProcessor</strong>对象比较典型的用法是动态权限配置, 为了方便大家理解, 这里先通过一个大家熟悉的案例来展示<strong>ObjectPostProcessor</strong>的用法, 后面在配置动态权限时, <strong>ObjectPostProcessor</strong>的使用思路是一致的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>        User.builder().username(<span class="hljs-string">&quot;admin&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build());<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> DefaultSecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>        .anyRequest().authenticated()<br>        .and().formLogin()<br>        .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;UsernamePasswordAuthenticationFilter&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>            <span class="hljs-comment">//自定义ObjectPostProcessor</span><br>            object.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>            object.setPasswordParameter(<span class="hljs-string">&quot;pwd&quot;</span>);<br>            object.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;<br>              response.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>            &#125;);<br>            <span class="hljs-keyword">return</span> object;<br>          &#125;<br>        &#125;)<br>        .and().userDetailsService(userDetailService())<br>        .csrf().disable();<br><br>    <span class="hljs-keyword">return</span> http.build();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20230718112719806.png" alt="image-20230718112719806"></p><p>​在这个案例中, 调用<strong>formLogin</strong>方法之后, 开启了<strong>FormLoginConfigurer</strong>的配置, <strong>FormLoginConfigurer</strong>的作用是为了配置<strong>UsernamePasswordAuthenticationFilter</strong>过滤器, 在<strong>formLogin</strong>方法执行完毕后, 我们调用<strong>withObjectPostProcessor</strong>方法对<strong>UsernamePasswordAuthenticationFilter</strong>过滤器进行二次处理, 修改登录参数的key, 将登录用户名参数的key改为name, 将登录密码参数的key改为passwd, 同时配置一个登录成功的处理器.</p><h3 id="4-1-3-SecurityConfigurer配置接口"><a href="#4-1-3-SecurityConfigurer配置接口" class="headerlink" title="4.1.3 SecurityConfigurer配置接口"></a>4.1.3 SecurityConfigurer配置接口</h3><p>​我们之前讲过了<strong>SecurityBuilder</strong>是用来构建安全对象比如:<strong>SecurityFilterChain</strong>、<strong>FilterChainProxy</strong>、<strong>ProviderManager</strong>,而<span style="color:red;"><strong>SecurityConfigurer</strong>这个类是用来配置和初始化<strong>SecurityBuilder</strong>的配置类, 而往往一个<strong>SecurityBuilder</strong>会维护多个<strong>SecurityConfigurer</strong>来进行初始化和配置(只需要继承<strong>AbstractConfiguredSecurityBuilder</strong>).</span><strong>SecurityConfigurer</strong>中有两个核心方法, 一个是<strong>init</strong>方法, 用来完成配置类的初始化操作, 另外一个是<strong>configure</strong>方法, 进行配置类的配置. 后面介绍的<strong>AbstractConfiguredSecurityBuilder</strong>类里面的<strong>init</strong>方法和<strong>configure</strong>其实就是在遍历执行不同配置类的<strong>init</strong>和<strong>configure</strong>方法.</p><p>​<strong>SecurityConfigurer</strong>的实现类比较多, 这里主要梳理一下常见的<strong>SecurityConfigurer</strong>实现类,我们可以分别来看下一下:</p><p>​先来看下<strong>SecurityConfigurer</strong>源码, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;O&gt;&gt; &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initialize the &#123;<span class="hljs-doctag">@link</span> SecurityBuilder&#125;. Here only shared state should be created</span><br><span class="hljs-comment"> * and modified, but not properties on the &#123;<span class="hljs-doctag">@link</span> SecurityBuilder&#125; used for building</span><br><span class="hljs-comment"> * the object. This ensures that the &#123;<span class="hljs-doctag">@link</span> #configure(SecurityBuilder)&#125; method uses</span><br><span class="hljs-comment"> * the correct shared objects when building. Configurers should be applied here.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(B builder)</span> <span class="hljs-keyword">throws</span> Exception;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Configure the &#123;<span class="hljs-doctag">@link</span> SecurityBuilder&#125; by setting the necessary properties on the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SecurityBuilder&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(B builder)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, <strong>SecurityConfigurer</strong>只有两个方法: <strong>init</strong>和<strong>configure</strong>, 两个方法的参数都是<strong>SecurityBuilder</strong>对象, 也就是说在这两个方法中对<strong>SecurityBuilder</strong>进行初始话和配置.</p><p>​<strong>SecurityConfigurer</strong>的子类非常多, 因为每一个过滤器都有自己对应的<strong>xxxConfigurer</strong>, 这里着重介绍几个关键的实现类, 如图所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230312213646207.png" alt="image-20230312213646207"></p><p>我们分别来看下实现:</p><h4 id="SecurityConfigurerAdapter"><a href="#SecurityConfigurerAdapter" class="headerlink" title="SecurityConfigurerAdapter"></a>SecurityConfigurerAdapter</h4><p>​实现了<strong>SecurityConfigurer</strong>接口, 运用了适配器模式, 它的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfigurerAdapter</span>&lt;O, B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;O&gt;&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityConfigurer</span>&lt;O, B&gt; &#123;<br>  <br>  <span class="hljs-comment">//1. 提供了一个SecurityBuilder对象, 为每一个配置类都提供了一个SecurityBuilder对象, 将来通过SecurityBuilder构建出具体的配置对象; 通过and方法返回SecurityBuilder对象, 这样方便不同的配置类在配置时, 可以进行链式配置</span><br>  <span class="hljs-keyword">private</span> B securityBuilder;<br><br>  <span class="hljs-comment">//2. 定义了内部类CompositeObjectPostProcessor, 这是一个复合的对象后置处理器</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">CompositeObjectPostProcessor</span> <span class="hljs-variable">objectPostProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeObjectPostProcessor</span>();<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(B builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(B builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> B <span class="hljs-title function_">and</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> getBuilder();<br>&#125;<br>  <br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> B <span class="hljs-title function_">getBuilder</span><span class="hljs-params">()</span> &#123;<br>Assert.state(<span class="hljs-built_in">this</span>.securityBuilder != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;securityBuilder cannot be null&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.securityBuilder;<br>&#125;<br>  <br>  <span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">postProcess</span><span class="hljs-params">(T object)</span> &#123;<br><span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">this</span>.objectPostProcessor.postProcess(object);<br>&#125;<br>  <br>  <span class="hljs-comment">//3. 提供了一个addObjectPostProcessor方法, 通过该方法可以像复合的对象后置处理器中添加新的ObjectPostProcessor实例</span><br>    用此方法则可以将自定义的ObjectPostProcessor添加到维护的复合对象后置处理器中, 达到自定义ObjectPostProcessor处理逻辑的目的<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addObjectPostProcessor</span><span class="hljs-params">(ObjectPostProcessor&lt;?&gt; objectPostProcessor)</span> &#123;<br><span class="hljs-built_in">this</span>.objectPostProcessor.addObjectPostProcessor(objectPostProcessor);<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(B builder)</span> &#123;<br><span class="hljs-built_in">this</span>.securityBuilder = builder;<br>&#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeObjectPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;Object&gt; &#123;<br><br><span class="hljs-keyword">private</span> List&lt;ObjectPostProcessor&lt;?&gt;&gt; postProcessors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcess</span><span class="hljs-params">(Object object)</span> &#123;<br><span class="hljs-keyword">for</span> (ObjectPostProcessor opp : <span class="hljs-built_in">this</span>.postProcessors) &#123;<br>Class&lt;?&gt; oppClass = opp.getClass();<br>Class&lt;?&gt; oppType = GenericTypeResolver.resolveTypeArgument(oppClass, ObjectPostProcessor.class);<br><span class="hljs-keyword">if</span> (oppType == <span class="hljs-literal">null</span> || oppType.isAssignableFrom(object.getClass())) &#123;<br>object = opp.postProcess(object);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> object;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addObjectPostProcessor</span><span class="hljs-params">(ObjectPostProcessor&lt;?&gt; objectPostProcessor)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.postProcessors.add(objectPostProcessor);<br><span class="hljs-built_in">this</span>.postProcessors.sort(AnnotationAwareOrderComparator.INSTANCE);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red;">总而言之: <strong>SecurityConfigureAdapter</strong>使用了适配器模式将<strong>SecurityBuilder</strong>、复合对象后置处理器<strong>CompositeObjectPostProcessor</strong>引入, 并引入了添加对象后置处理器的方法</span></p><h4 id="AbstractHttpConfigurer"><a href="#AbstractHttpConfigurer" class="headerlink" title="AbstractHttpConfigurer"></a>AbstractHttpConfigurer</h4><p>​<strong>AbstractHttpConfigurer</strong>主要是为了给在<strong>HttpSecurity</strong>中使用的配置类添加一个方便的父类, 提取出共同的操作.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHttpConfigurer</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHttpConfigurer</span>&lt;T, B&gt;, B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSecurityBuilder</span>&lt;B&gt;&gt;<br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurerAdapter</span>&lt;DefaultSecurityFilterChain, B&gt; &#123;<br>  <br>  <span class="hljs-keyword">public</span> B <span class="hljs-title function_">disable</span><span class="hljs-params">()</span> &#123;<br>getBuilder().removeConfigurer(getClass());<br><span class="hljs-keyword">return</span> getBuilder();<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">withObjectPostProcessor</span><span class="hljs-params">(ObjectPostProcessor&lt;?&gt; objectPostProcessor)</span> &#123;<br>addObjectPostProcessor(objectPostProcessor);<br><span class="hljs-keyword">return</span> (T) <span class="hljs-built_in">this</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, 提取出来的方法其实就两个: 一个<strong>disable</strong>表示禁用某个配置(比如我们配置的<strong>csrf().disable()</strong>), 本质就是从<strong>AbstractConfiguredSecurityBuilder</strong>的<strong>configurers</strong>集合中移除某个配置类, 这样在将来构建的时候就不存在该配置类, 那么对应的功能也就不存在(被禁用); 另一个<strong>withObjectPostProcessor</strong>表示给某一个对象添加一个对象后置处理器, 由于该方法的返回值是当前对象, 所有该方法可以用来在链式配置中.</p><p>​<strong>AbstractHttpConfigurer</strong>的实现类比较多, 基本上都用来配置各种各样的过滤器, 如图所示:</p><img src="/2022/01/26/SpringSecurity/image-20230313214804744.png" alt="image-20230313214804744" style="zoom:50%;"><h4 id="UserDetailsAwareConfigurer"><a href="#UserDetailsAwareConfigurer" class="headerlink" title="UserDetailsAwareConfigurer"></a>UserDetailsAwareConfigurer</h4><p>​<strong>UserDetailsAwareConfigurer</strong>的子类主要负责配置用户认证相关的组件, 如: <strong>UserDetails</strong>等, <strong>UserDetailsAwareConfigurer</strong>中提供了获取<strong>UserDetailsService</strong>的抽象方法, 具体实现则在它的子类中, <strong>UserDetailsAwareConfigurer</strong>的子类如同所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230312220109915.png" alt="image-20230312220109915"></p><ul><li><strong>AbstractDaoAuthenticationConfigurer</strong>: 完成对<strong>DaoAuthenticationProvider</strong>的配置</li><li><strong>UserDetailsServiceConfigurer</strong>: 完成对<strong>UserDetailsService</strong>的配置</li><li><strong>UserDetailsManagerConfigurer</strong>: 使用<strong>UserDetailsManager</strong>构建用户对象, 完成对<strong>AuthenticationManagerBuilder</strong>的填充</li><li><strong>JdbcUserDetailsManagerConfigurer</strong>: 配置<strong>JdbcUserDetailsManager</strong>并填充到<strong>AuthenticationManagerBuilder</strong>中</li><li><strong>InMemoryUserDetailsManagerConfigurer</strong>: 配置<strong>InMemoryUserDetailsManager</strong></li><li><strong>DaoAuthenticationConfigurer</strong>: 完成对<strong>DaoAuthenticationProvider</strong>的配置</li></ul><h3 id="4-1-4-SecurityFilterChain过滤器链"><a href="#4-1-4-SecurityFilterChain过滤器链" class="headerlink" title="4.1.4 SecurityFilterChain过滤器链"></a>4.1.4 SecurityFilterChain过滤器链</h3><p> 先说到<strong>HttpSecurity</strong>类之前, 一定要先说下<strong>HttpSecurity</strong>创建的过滤器链对象.从名称上可以看出, <span style="color:red;"><strong>SecurityFilterChain</strong>就是Spring Security中的过滤器链对象.</span> 下面来看一下<strong>SecurityFilterChain</strong>的源码:</p><img src="/2022/01/26/SpringSecurity/image-20230215232503921.png" alt="image-20230215232503921" style="zoom:50%;"><p>可以看到, <strong>SecurityFilterChain</strong>中有两个方法:</p><ol><li><strong>matches</strong>: 该方法用来判断request请求是否应该被当前过滤器链所处理</li><li><strong>getFilters</strong>: 该方法返回一个List集合, 集合中存放的就是Spring Security中的过滤器.换言之, 如果matches方法返回true, 那么request请求就会在getFilters方法所返回的Filter集合中被处理</li></ol><p>​ <strong>SecurityFilterChain</strong>只有一个默认的实现类就是<strong>DefaultSecurityFilterChain</strong>, 这也是<strong>HttpSecurity</strong>构建的对象, 其中定义了两个属性, 并具体实现了<strong>SecurityFilterChain</strong>中的两个方法:</p><img src="/2022/01/26/SpringSecurity/image-20230215233159036.png" alt="image-20230215233159036" style="zoom:50%;"><p>​可以看到, 在<strong>DefaultSecurityFilterChain</strong>的构造方法中, 需要传入两个对象, 一个是请求匹配器<strong>requestMatcher</strong>, 另一个则是过滤器集合或者过滤器数组filter. 这个实现类比较简单, 这里就不再赘述了</p><p>​<span style="color:red;">注意:  在一个Spring Security项目中, <strong>SecurityFilterChain</strong>的实例可能会有多个.</span></p><h3 id="4-1-5-HttpSecurity内幕"><a href="#4-1-5-HttpSecurity内幕" class="headerlink" title="4.1.5 HttpSecurity内幕"></a>4.1.5 HttpSecurity内幕</h3><p>​在了解了HttpSecurity的主要相关类后, 可以通过此图看出主体架构:</p><p><img src="/2022/01/26/SpringSecurity/image-20230718154226258.png" alt="image-20230718154226258"></p><p>​<span style="color:red;"><strong>HttpSecurity</strong>的主要作用是用来构建一条过滤器链, 并反映到代码上,也就是构建一个<strong>DefaultSecurityFilterChain</strong>对象. </span>一个<strong>DefaultSecurityChain</strong>对象包含一个路径匹配器和多个<strong>SpringSecurity</strong>过滤器, <strong>HttpSecurity</strong>中通过收集各种各样的<strong>xxxConfigurer,</strong> 将<strong>Spring Security</strong>过滤器对应的配置类收集起来, 并保存到父类<strong>AbstractConfiguredSecurityBuilder</strong>的<strong>configurers</strong>变量中, 在后续的构建过程中, 再将这些<strong>xxxConfigurer</strong>构建为具体的<strong>Spring Security</strong>的过滤器,  同时添加到<strong>HttpSecurity</strong>的<strong>filters</strong>对象中.</p><p>​其中<strong>HttpSecurityBuilder</strong>接口是用来构建<strong>HttpSecurity</strong>对象的, <strong>HttpSecurityBuilder</strong>的定义如下:</p><img src="/2022/01/26/SpringSecurity/image-20230215234757406.png" alt="image-20230215234757406" style="zoom:50%;"><p>我们来简单分析下这段源码:</p><ol><li><strong>HttpSecurityBuilder</strong>对象本身在定义时就有一个泛型, 这个泛型是<strong>HttpSecurityBuilder</strong>的子类, 由于默认情况下<strong>HttpSecurityBuilder</strong>的实现类只有一个<strong>HttpSecurity</strong>, 所以可以暂且把接口中的H都当成<strong>HttpSecurity</strong>来理解</li><li><strong>HttpSecurityBuilder</strong>继承自<strong>SecurityBuilder</strong>接口, 同时也指定了<strong>SecurityBuilder</strong>中的泛型为<strong>DefaultSecurityFilterChain</strong>, 也就是说,<strong>HttpSecurityBuilder</strong>最终想要构建的对象是<strong>DefaultSecurityFilterChain</strong></li><li><strong>getConfigurer</strong>方法用来获取一个配置器, 所谓的配置器就是<strong>xxxConfigurer</strong></li><li><strong>removeConfigurer</strong>方法用来移除一个配置器(相当于从Spring Security过滤器链中移除一个过滤器)</li><li><strong>setSharedObject</strong> &#x2F; <strong>getSharedObject</strong>这两个方法用来设置或者获取一个可以在多配置器之间共享的对象</li><li><strong>authenticationProvider</strong>方法可以用来配置一个认证器<strong>AuthencationProvider</strong></li><li><strong>userDetailsService</strong>方法可以用来配置一个数据源<strong>UserDetailsService</strong></li><li><strong>addFilterAfter</strong>&#x2F;<strong>addFilterBefore</strong>方法表示在某个过滤器之后或者之前添加一个自定义的过滤器</li><li><strong>addFilter</strong>方法可以添加一个过滤器, 这个过滤器必须是Spring Security框架提供的过滤器的一个实例或者其扩展, 添加完成之后, 会自动进行过滤器的排序</li></ol><p>​由于<strong>HttpSecurity</strong>中存在大量功能类似的方法, 因此这里挑选一个作为例子来说明<strong>HttpSecurity</strong>的配置原理, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpSecurity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractConfiguredSecurityBuilder</span>&lt;DefaultSecurityFilterChain, HttpSecurity&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;DefaultSecurityFilterChain&gt;, HttpSecurityBuilder&lt;HttpSecurity&gt; &#123;<br>  <br>  <span class="hljs-comment">//1. 以form表单登录配置为例, 在HttpSecurity中有两个重载方法可以进行配置: 第一个是一个无参, 该方法的返回值是一个FormLoginConfigurer&lt;HttpSecurity&gt;对象</span><br>    开发者可以在该对象的基础上继续完善对form表单的配置, 我们在后续中配置的表单登录都是通过这种方式来进行配置的.<br>  <span class="hljs-keyword">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class="hljs-title function_">formLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> getOrApply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormLoginConfigurer</span>&lt;&gt;());<br>&#125;<br>  <br>  <span class="hljs-comment">//第二个是一个有参的formLogin方法, 该方法的参数是一个FormLoginConfigurer对象, 返回值则是一个HttpSecurity对象, 也就是说开发者可以提前在外面配置好FormLoginConfigurer对象, 然后直接传进来进行配置即可, 返回值HttpSecurity对象则可以在方法返回后直接进行其他过滤器的配置. </span><br>    无论是有参或者无参, 最终都会调用getOrApply方法, 该方法会调用父类的getConfigurer方法去查看是否已经有对应的配置类了,如果有,则直接返回; 如果没有,则调用apply方法添加到父类的configurers变量中. HttpSecurity中其他过滤器的配置都和form表单登录配置类似, 这里就不赘述了<br>  <span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">formLogin</span><span class="hljs-params">(Customizer&lt;FormLoginConfigurer&lt;HttpSecurity&gt;&gt; formLoginCustomizer)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>formLoginCustomizer.customize(getOrApply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormLoginConfigurer</span>&lt;&gt;()));<br><span class="hljs-keyword">return</span> HttpSecurity.<span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-comment">//2. 每一套过滤器链都会有一个AuthenticationManager对象来进行认证操作(如果认证失败,就会调用AuthenticationManager的parent再次进行认证),主要是通过这个authenticationProvider方法配置执行认证的authenticationProvider对象</span><br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">authenticationProvider</span><span class="hljs-params">(AuthenticationProvider authenticationProvider)</span> &#123;<br>getAuthenticationRegistry().authenticationProvider(authenticationProvider);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-comment">//通过userDetailsService方法配置UserDetailsService</span><br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">(UserDetailsService userDetailsService)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>getAuthenticationRegistry().userDetailsService(userDetailsService);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-keyword">private</span> AuthenticationManagerBuilder <span class="hljs-title function_">getAuthenticationRegistry</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> getSharedObject(AuthenticationManagerBuilder.class);<br>&#125;<br>  <br>  <span class="hljs-comment">//最后在beforeConfigurer方法中触发AuthenticationManager对象的构建.</span><br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeConfigure</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>setSharedObject(AuthenticationManager.class, getAuthenticationRegistry().build());<br>&#125;<br><br>  <span class="hljs-comment">//3. performBuild方法则是进行DefalutSecurityFilterChain对象的构建, 传入请求匹配器和过滤器集合filters, 在构建之前, 会先按照既定的顺序对filters进行排序</span><br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> DefaultSecurityFilterChain <span class="hljs-title function_">performBuild</span><span class="hljs-params">()</span> &#123;<br>ExpressionUrlAuthorizationConfigurer&lt;?&gt; expressionConfigurer = getConfigurer(<br>ExpressionUrlAuthorizationConfigurer.class);<br>AuthorizeHttpRequestsConfigurer&lt;?&gt; httpConfigurer = getConfigurer(AuthorizeHttpRequestsConfigurer.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">oneConfigurerPresent</span> <span class="hljs-operator">=</span> expressionConfigurer == <span class="hljs-literal">null</span> ^ httpConfigurer == <span class="hljs-literal">null</span>;<br>Assert.state((expressionConfigurer == <span class="hljs-literal">null</span> &amp;&amp; httpConfigurer == <span class="hljs-literal">null</span>) || oneConfigurerPresent,<br><span class="hljs-string">&quot;authorizeHttpRequests cannot be used in conjunction with authorizeRequests. Please select just one.&quot;</span>);<br><span class="hljs-built_in">this</span>.filters.sort(OrderComparator.INSTANCE);<br>List&lt;Filter&gt; sortedFilters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.filters.size());<br><span class="hljs-keyword">for</span> (Filter filter : <span class="hljs-built_in">this</span>.filters) &#123;<br>sortedFilters.add(((OrderedFilter) filter).filter);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityFilterChain</span>(<span class="hljs-built_in">this</span>.requestMatcher, sortedFilters);<br>&#125;<br>  <br>  <br>  <span class="hljs-comment">//4. 通过addFilter、addFilterBefore两个方法, 我们可以在某个过滤器之后或者之前添加一个自定义的过滤器</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">addFilterBefore</span><span class="hljs-params">(Filter filter, Class&lt;? extends Filter&gt; beforeFilter)</span> &#123;<br><span class="hljs-built_in">this</span>.comparator.registerBefore(filter.getClass(), beforeFilter);<br><span class="hljs-keyword">return</span> addFilter(filter);<br>&#125;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">addFilter</span><span class="hljs-params">(Filter filter)</span> &#123;<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Filter</span>&gt; filterClass = filter.getClass();<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.comparator.isRegistered(filterClass)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;The Filter class &quot;</span> + filterClass.getName()<br>+ <span class="hljs-string">&quot; does not have a registered order and cannot be added without a specified order. Consider using addFilterBefore or addFilterAfter instead.&quot;</span>);<br>&#125;<br><span class="hljs-built_in">this</span>.filters.add(filter);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-comment">//5.addFilterAt方法可以在指定的位置添加一个过滤器. 需要注意的是, 在同一个位置添加多个过滤器不会覆盖现有的过滤器</span><br>  <span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">addFilterAt</span><span class="hljs-params">(Filter filter, Class&lt;? extends Filter&gt; atFilter)</span> &#123;<br><span class="hljs-built_in">this</span>.comparator.registerAt(filter.getClass(), atFilter);<br><span class="hljs-keyword">return</span> addFilter(filter);<br>&#125;<br>  <br>  <span class="hljs-keyword">private</span> &lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityConfigurerAdapter</span>&lt;DefaultSecurityFilterChain, HttpSecurity&gt;&gt; C <span class="hljs-title function_">getOrApply</span><span class="hljs-params">(C configurer)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">C</span> <span class="hljs-variable">existingConfig</span> <span class="hljs-operator">=</span> (C) getConfigurer(configurer.getClass());<br><span class="hljs-keyword">if</span> (existingConfig != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> existingConfig;<br>&#125;<br><span class="hljs-keyword">return</span> apply(configurer);<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是HttpSecurity基本的功能</p><h3 id="4-1-6-WebSecurity内幕"><a href="#4-1-6-WebSecurity内幕" class="headerlink" title="4.1.6 WebSecurity内幕"></a>4.1.6 WebSecurity内幕</h3><p>​再讲到<strong>WebSecurity</strong>类, 相对于<strong>HttpSecurity</strong>,  <strong>WebSecurity</strong>是在一个更大的层面上去构建过滤器. 一个<strong>HttpSecurity</strong>对象可以构建一个过滤器链, 也就是说一个<strong>DefaultSecurityFilterChain</strong>对象,而一个项目中可以存在多个<strong>HttpSecurity</strong>对象, 也就是说可以构建多个<strong>DefaultSecurityFilterChain</strong>过滤器链</p><p>​<span style="color:red;">而<strong>WebSecurity</strong>负责将<strong>HttpSecurity</strong>所构建的<strong>DefaultSecurityFilterChain</strong>对象(可能有多个), 以及其他需要忽略的请求, 再次重新构建为一次<strong>FilterChainProxy</strong>对象, 同时添加上HTTP防火墙</span></p><p>​我们来看下<strong>WebSecurity</strong>中的几个关键方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractConfiguredSecurityBuilder</span>&lt;Filter, WebSecurity&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;Filter&gt;, ApplicationContextAware &#123;<br>  <br>  <span class="hljs-comment">//1. 首先在WebSecurity中声明了ignoredRequests集合, 这个集合中保存了所有被忽略的请求, 因为在实际的项目中, 并非所有的请求都需要经过Spring Security过滤器链, 有一些静态资源可能不需要权限认证, 直接返回给客户端即可, 那么这些需要忽略的请求可以直接保存在ignoredRequests变量中</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;RequestMatcher&gt; ignoredRequests = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  <span class="hljs-comment">//2. 接下来声明了个securityFilterChainBuilders集合, 该集合用来保存所有的HttpSecurity对象, 每一个HttpSecurity对象创建成功之后, 通过addSecurityFilterChainBuilder方法将HttpSecurity对象添加到securityFilterChainBuilders中</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;SecurityBuilder&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityFilterChain</span>&gt;&gt; securityFilterChainBuilders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  <br>  <span class="hljs-comment">//3. httpFirewall方法可以用来配置请求防火墙</span><br>  <span class="hljs-keyword">public</span> WebSecurity <span class="hljs-title function_">httpFirewall</span><span class="hljs-params">(HttpFirewall httpFirewall)</span> &#123;<br><span class="hljs-built_in">this</span>.httpFirewall = httpFirewall;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> WebSecurity <span class="hljs-title function_">addSecurityFilterChainBuilder</span><span class="hljs-params">(</span><br><span class="hljs-params">SecurityBuilder&lt;? extends SecurityFilterChain&gt; securityFilterChainBuilder)</span> &#123;<br><span class="hljs-built_in">this</span>.securityFilterChainBuilders.add(securityFilterChainBuilder);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <br>  <span class="hljs-comment">//4. 是具体的构造方法, 在该方法中, 首先统计出过滤器链的总数(被忽略的请求个数+通过HttpSecurity创建出来的过滤器链个数),然后创建一个集合securityFilterChains, 遍历被忽略的请求并分别构建成DefaultSecurityFilterChain对象保存在securityFilterChains集合中. 需要注意的是, 对于被忽略的请求,在构建DefaultSecurityFilterChain对象时,只是传了请求匹配器, 而没有传入对应的过滤器链, 这就意味着这些被忽略掉的请求, 将来不必经过SpringSecurity过滤器链; 接下来再遍历securityFilterChainBuilders集合, 调用每个对象的build方法去创建DefaultFilterChain并存入securityFilterChains集合中, 然后传入securityFilterChains集合构建FilterChainProxy对象,最后再设置HTTP防火墙. 所有设置完成之后,最后返回filterChainProxy对象</span><br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Filter <span class="hljs-title function_">performBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>Assert.state(!<span class="hljs-built_in">this</span>.securityFilterChainBuilders.isEmpty(),<br>() -&gt; <span class="hljs-string">&quot;At least one SecurityBuilder&lt;? extends SecurityFilterChain&gt; needs to be specified. &quot;</span><br>+ <span class="hljs-string">&quot;Typically this is done by exposing a SecurityFilterChain bean &quot;</span><br>+ <span class="hljs-string">&quot;or by adding a @Configuration that extends WebSecurityConfigurerAdapter. &quot;</span><br>+ <span class="hljs-string">&quot;More advanced users can invoke &quot;</span> + WebSecurity.class.getSimpleName()<br>+ <span class="hljs-string">&quot;.addSecurityFilterChainBuilder directly&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">chainSize</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.ignoredRequests.size() + <span class="hljs-built_in">this</span>.securityFilterChainBuilders.size();<br>List&lt;SecurityFilterChain&gt; securityFilterChains = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(chainSize);<br><span class="hljs-keyword">for</span> (RequestMatcher ignoredRequest : <span class="hljs-built_in">this</span>.ignoredRequests) &#123;<br>securityFilterChains.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityFilterChain</span>(ignoredRequest));<br>&#125;<br><span class="hljs-keyword">for</span> (SecurityBuilder&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SecurityFilterChain</span>&gt; securityFilterChainBuilder : <span class="hljs-built_in">this</span>.securityFilterChainBuilders) &#123;<br>securityFilterChains.add(securityFilterChainBuilder.build());<br>&#125;<br>    <span class="hljs-comment">//直接new出来的FilterChainProxy</span><br><span class="hljs-type">FilterChainProxy</span> <span class="hljs-variable">filterChaiFilterChainProxynProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChainProxy</span>(securityFilterChains);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.httpFirewall != <span class="hljs-literal">null</span>) &#123;<br>filterChainProxy.setFirewall(<span class="hljs-built_in">this</span>.httpFirewall);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.requestRejectedHandler != <span class="hljs-literal">null</span>) &#123;<br>filterChainProxy.setRequestRejectedHandler(<span class="hljs-built_in">this</span>.requestRejectedHandler);<br>&#125;<br>filterChainProxy.afterPropertiesSet();<br><br><span class="hljs-type">Filter</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> filterChainProxy;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.debugEnabled) &#123;<br><span class="hljs-built_in">this</span>.logger.warn(<span class="hljs-string">&quot;\n\n&quot;</span> + <span class="hljs-string">&quot;********************************************************************\n&quot;</span><br>+ <span class="hljs-string">&quot;**********        Security debugging is enabled.       *************\n&quot;</span><br>+ <span class="hljs-string">&quot;**********    This may include sensitive information.  *************\n&quot;</span><br>+ <span class="hljs-string">&quot;**********      Do not use in a production system!     *************\n&quot;</span><br>+ <span class="hljs-string">&quot;********************************************************************\n\n&quot;</span>);<br>result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugFilter</span>(filterChainProxy);<br>&#125;<br><span class="hljs-built_in">this</span>.postBuildAction.run();<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<span style="color:red;"><strong>FilterChainProxy</strong>就是我们最终构建出来的代理过滤器链, 后面就可以通过Spring提供<strong>Delegating</strong> <strong>FilterProxy</strong>将<strong>FilterChainProxy</strong>对象嵌入到<strong>Web Filter</strong>中(原生的过滤器链中), 这样我们定义的<strong>SecurityFilterChain</strong>(<strong>DefaultSecurityFilterChain</strong>)就可以在Spring原生过滤器链中执行了.</span></p><p>总的来说: 构建<strong>SpringSecurity</strong>过滤器链也就是<strong>SecurityFilterChain</strong>最主要需要了解的类有:</p><ul><li><strong>HttpSecurity</strong>: 构建<strong>SpringSecurity</strong>的过滤器链<strong>SecurityFilterChain</strong>(<strong>DefalutSecurityFilterChain</strong>)</li><li><strong>WebSecurity</strong>: 构建比<strong>HttpSecurity</strong>更高层级的过滤器<strong>FilterChainProxy</strong>, 主要将<strong>HttpSecurity</strong>构建的<strong>SecurityFilterChain</strong>过滤器链嵌入到Spring原生的Web Filter中.</li></ul><h2 id="4-2-SpringSecurity的过滤器链是如何执行的"><a href="#4-2-SpringSecurity的过滤器链是如何执行的" class="headerlink" title="4.2 SpringSecurity的过滤器链是如何执行的?"></a>4.2 SpringSecurity的过滤器链是如何执行的?</h2><p>​之前我们讲过了<strong>HttpSecurity</strong>以及<strong>WebSecurity</strong>是如何构建<strong>SecurityFilterChain</strong>以及将<strong>SecurityFilterChain</strong>嵌入到Spring原生WebFilter的<strong>FilterChainProxy</strong>, 本次则讲一下这些SpringSecurity过滤器具体是如何执行的?执行顺序是如何?</p><p>​想要了解这些过滤器如何执行的, 那就要先要了解下<strong>FilterChainProxy</strong></p><h3 id="4-2-1-FilterChainProxy"><a href="#4-2-1-FilterChainProxy" class="headerlink" title="4.2.1 FilterChainProxy"></a>4.2.1 FilterChainProxy</h3><p>​<strong>FilterChainProxy</strong> 通过 <strong>DelegatingFilterProxy</strong> 代理过滤器被集成到 WebFilter 中， <strong>DelegatingFilterProxy</strong>作为 一个代理对象，相信很多读者可能都用过(例如在Spring中整合Shiro 就会用到)，它不承载具体的业务。</p><p>​所以，Spring Security 中的过滤器链的最终执行，就是在<strong>FilterChainProxy</strong> 中，因此这里也 来分析一 下<strong>FilterChainProxy</strong>的源码。</p><p>​<strong>FilterChainProxy</strong>的源码比较长，我们一段一段来看:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;SecurityFilterChain&gt; filterChains;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">FilterChainValidator</span> <span class="hljs-variable">filterChainValidator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullFilterChainValidator</span>();<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">HttpFirewall</span> <span class="hljs-variable">firewall</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictHttpFirewall</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FilterChainProxy</span><span class="hljs-params">(SecurityFilterChain chain)</span> &#123;<br><span class="hljs-built_in">this</span>(Arrays.asList(chain));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FilterChainProxy</span><span class="hljs-params">(List&lt;SecurityFilterChain&gt; filterChains)</span> &#123;<br><span class="hljs-built_in">this</span>.filterChains = filterChains;<br>&#125;<br></code></pre></td></tr></table></figure><p>​首先声明了三个变量:</p><ol><li>由于在Spring Security中可以同时存在多个过滤器链，<strong>filterChains</strong>就是用来保存过滤器链的，<strong>注意保存的是过滤器链，而不是一个个具体的过滤器。</strong></li><li><strong>filterChainValidator</strong> 是一个过滤器链配置完成后的验证器，默认使用 <strong>NullFilterChainValidator</strong> 其实没有做任何验证。</li><li>创建了一个默认的防火墙对象<strong>FireWall</strong>。</li></ol><p>在构造方法中传入过滤器链的集合，并赋值给<strong>filterChains</strong> 变量。</p><p>由于<strong>FilterChainProxy</strong>本质上就是一个过滤器，因此它的核心方法就是<strong>doFilter</strong> 方法，接 下来我们来看一下<strong>doFiter</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">clearContext</span> <span class="hljs-operator">=</span> request.getAttribute(FILTER_APPLIED) == <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (!clearContext) &#123;<br>doFilterInternal(request, response, chain);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>request.setAttribute(FILTER_APPLIED, Boolean.TRUE);<br>doFilterInternal(request, response, chain);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>Throwable[] causeChain = <span class="hljs-built_in">this</span>.throwableAnalyzer.determineCauseChain(ex);<br><span class="hljs-type">Throwable</span> <span class="hljs-variable">requestRejectedException</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.throwableAnalyzer<br>.getFirstThrowableOfType(RequestRejectedException.class, causeChain);<br><span class="hljs-keyword">if</span> (!(requestRejectedException <span class="hljs-keyword">instanceof</span> RequestRejectedException)) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-built_in">this</span>.requestRejectedHandler.handle((HttpServletRequest) request, (HttpServletResponse) response,<br>(RequestRejectedException) requestRejectedException);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>SecurityContextHolder.clearContext();<br>request.removeAttribute(FILTER_APPLIED);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>doFilter</strong> 方法相当于是整个Spring Security 过滤器链的入口，我们在前面章节中所涉及的一些具体的过滤器如<strong>SecurityContextPersistenceFilter</strong>，都是在该<strong>doFilter</strong>方法之后执行的。作为整个过滤器链的入口，这里多了一个<strong>clearContext</strong> 变量，如果是第 一次执行该<strong>doFilter</strong> 方法， 执行完成后，在finally代码块中需要从<strong>SecurityContextHolder</strong> 里清除用户信息，这个主要是为了防止用户没有正确配置<strong>SecurityContextPersistenceFilter</strong> ，从而导致登录用户信息没有被正确清除，进而发生内存泄漏。</p><p>​</p><p>​在<strong>doFilter</strong>方法中，过滤器的具体执行则交给了<strong>doFilterInternal</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-type">FirewalledRequest</span> <span class="hljs-variable">firewallRequest</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.firewall.getFirewalledRequest((HttpServletRequest) request);<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">firewallResponse</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.firewall.getFirewalledResponse((HttpServletResponse) response);<br>List&lt;Filter&gt; filters = getFilters(firewallRequest);<br><span class="hljs-keyword">if</span> (filters == <span class="hljs-literal">null</span> || filters.size() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(LogMessage.of(() -&gt; <span class="hljs-string">&quot;No security for &quot;</span> + requestLine(firewallRequest)));<br>&#125;<br>firewallRequest.reset();<br>chain.doFilter(firewallRequest, firewallResponse);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(LogMessage.of(() -&gt; <span class="hljs-string">&quot;Securing &quot;</span> + requestLine(firewallRequest)));<br>&#125;<br><span class="hljs-type">VirtualFilterChain</span> <span class="hljs-variable">virtualFilterChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VirtualFilterChain</span>(firewallRequest, chain, filters);<br>virtualFilterChain.doFilter(firewallRequest, firewallResponse);<br>&#125;<br></code></pre></td></tr></table></figure><p>​在<strong>doFilterInternal</strong> 方法中:</p><ol><li>首先会将request 对象转换为一个<strong>FirewalledRequest</strong> 对象，这个转换过程会进行Http防火墙处理 (Http防火墙会在后面讲解, 这里可以直接理解成<strong>HttpServletRequest</strong>) ， 同时将response对象也转为 <strong>HttpServletResponse</strong>。</li><li>接下来调用 <strong>getFilters</strong> 方法获取当前请求对应的过滤器链， <strong>getFilters</strong> 方法会遍历<strong>filterChains</strong> 集合，进而判断出当前请求和哪一个过滤器链是对应的，<ul><li>如果找到的过滤器链filters 为null，或者filters中没有元素，说明当前请求并不需要经过SpringSecurity 过滤器链，此时执行<strong>fwRequest.reset</strong> 方法对Http 防火墙中的属性进行重置，再执行 <strong>chain.doFilter</strong> 方法，回到Web Filter 中，Spring Security 过滤器链将被跳过(回忆上一小结 WebSecurity 中配置的忽略请求)。</li><li>如果filters 集合中是有元素的，也就是说当前请求需要经 过filters 集合中元素所构成的过滤器链，那么构建 一个虚拟的过滤器链对象<strong>VirtualFilterChain</strong> , 并执行其<strong>doFilter</strong> 方法。</li></ul></li></ol><p><span style="color:red;">总而言之: <strong>FilterChainProxy</strong>过滤器的主要用处在于<strong>doFilterInternal</strong>方法里面判断当前的request请求是否匹配我们配置的过滤器链, 如果满足则将我们定义的SpringSecurity过滤器链按顺序doFilter</span></p><h2 id="4-3-SpringSecurity全局配置是怎么注入的"><a href="#4-3-SpringSecurity全局配置是怎么注入的" class="headerlink" title="4.3 SpringSecurity全局配置是怎么注入的?"></a>4.3 SpringSecurity全局配置是怎么注入的?</h2><p>​这里的全局配置主要是指定是全局的<strong>AuthenticationManager</strong>、<strong>UserDetailsService</strong>, 想完整明白如何配置的, 不妨先了解其相关的构建类:</p><h3 id="4-3-1-ProviderManagerBuilder"><a href="#4-3-1-ProviderManagerBuilder" class="headerlink" title="4.3.1 ProviderManagerBuilder"></a>4.3.1 ProviderManagerBuilder</h3><p><strong>ProviderManagerBuilder</strong>继承自<strong>SecurityBuilder</strong>接口, 并制定了构建的对象是<strong>AuthenticationManager</strong>, 代码如下:</p><p><img src="/2022/01/26/SpringSecurity/image-20230716212401489.png" alt="image-20230716212401489"></p><p><span style="color:red;">可以看到, <strong>ProviderManagerBuilder</strong>中增加了一个<strong>authenticationProvider</strong>方法, 同时通过泛型指定了构建的对象为<strong>AuthenticationManager</strong></span></p><h3 id="4-3-2-AuthenticationManagerBuilder"><a href="#4-3-2-AuthenticationManagerBuilder" class="headerlink" title="4.3.2 AuthenticationManagerBuilder"></a>4.3.2 AuthenticationManagerBuilder</h3><p>​<span style="color:red;"><strong>AuthenticationManagerBuilder</strong>用来构建<strong>AuthenticationManager</strong>对象</span>, 它继承自<strong>AbstractConfiguredSecurityBuilder</strong>, 并且实现了<strong>ProviderManagerBuilder</strong>接口, 源码比较长, 我们截取部分代码, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationManagerBuilder</span><br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractConfiguredSecurityBuilder</span>&lt;AuthenticationManager, AuthenticationManagerBuilder&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProviderManagerBuilder</span>&lt;AuthenticationManagerBuilder&gt; &#123;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthenticationManagerBuilder</span><span class="hljs-params">(ObjectPostProcessor&lt;Object&gt; objectPostProcessor)</span> &#123;<br><span class="hljs-built_in">super</span>(objectPostProcessor, <span class="hljs-literal">true</span>);<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> AuthenticationManagerBuilder <span class="hljs-title function_">parentAuthenticationManager</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> &#123;<br><span class="hljs-keyword">if</span> (authenticationManager <span class="hljs-keyword">instanceof</span> ProviderManager) &#123;<br>eraseCredentials(((ProviderManager) authenticationManager).isEraseCredentialsAfterAuthentication());<br>&#125;<br><span class="hljs-built_in">this</span>.parentAuthenticationManager = authenticationManager;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; <span class="hljs-title function_">inMemoryAuthentication</span><span class="hljs-params">()</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManagerConfigurer</span>&lt;&gt;());<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> JdbcUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; <span class="hljs-title function_">jdbcAuthentication</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcUserDetailsManagerConfigurer</span>&lt;&gt;());<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UserDetailsService</span>&gt; DaoAuthenticationConfigurer&lt;AuthenticationManagerBuilder, T&gt; <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">(</span><br><span class="hljs-params">T userDetailsService)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-built_in">this</span>.defaultUserDetailsService = userDetailsService;<br><span class="hljs-keyword">return</span> apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationConfigurer</span>&lt;&gt;(userDetailsService));<br>&#125;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> AuthenticationManagerBuilder <span class="hljs-title function_">authenticationProvider</span><span class="hljs-params">(AuthenticationProvider authenticationProvider)</span> &#123;<br><span class="hljs-built_in">this</span>.authenticationProviders.add(authenticationProvider);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ProviderManager <span class="hljs-title function_">performBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (!isConfigured()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;No authenticationProviders and no parentAuthenticationManager defined. Returning null.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-type">ProviderManager</span> <span class="hljs-variable">providerManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(<span class="hljs-built_in">this</span>.authenticationProviders,<br><span class="hljs-built_in">this</span>.parentAuthenticationManager);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eraseCredentials != <span class="hljs-literal">null</span>) &#123;<br>providerManager.setEraseCredentialsAfterAuthentication(<span class="hljs-built_in">this</span>.eraseCredentials);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eventPublisher != <span class="hljs-literal">null</span>) &#123;<br>providerManager.setAuthenticationEventPublisher(<span class="hljs-built_in">this</span>.eventPublisher);<br>&#125;<br>providerManager = postProcess(providerManager);<br><span class="hljs-keyword">return</span> providerManager;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先在<strong>AuthenticationManagerBuilder</strong>的构造方法中, 调用了父类的构造方法, 注意第二个参数传递了true, 表示允许相同类型的配置类同时存在(结合<strong>AbstractConfiguredSecurityBuilder</strong>的源码来理解)</li><li><strong>parentAuthenticationManager</strong>方法来给一个<strong>AuthenticationManager</strong>设置<strong>parent</strong></li><li><strong>inMemoryAuthentication</strong>方法来配置基于内存的数据源, 该方法会自动创建<strong>InMemoryUserDetailsManagerConfigurer</strong>配置类, 并最终将该配置类添加到父类的<strong>configurers</strong>变量中.由于设置了允许相同类型的配置类同时存在, 因此<strong>inMemoryAuthentication</strong>方法可以反复调用多次.</li><li><strong>jdbcAuthentication</strong>以及<strong>userDetailsService</strong>方法与<strong>inMemoryAuthentication</strong>方法类似, 也就是用来配置数据源的, 就不再赘述</li><li><strong>authenticationProvider</strong>方法用来向<strong>authenticationProviders</strong>集合中添加<strong>AuthenticationProvider</strong>对象, 根据之前的讲解, 我们已经知道一个<strong>AuthenticationManager</strong>实例中包含了多个<strong>AuthenticationProvider</strong>实例, 那么多个<strong>AuthenticationProvider</strong>实例可以通过<strong>authenticationProvider</strong>方法来进行添加</li><li><strong>performBuild</strong>方法则是执行具体的构建方法, 常用的<strong>AuthenticationManager</strong>实例就是<strong>ProviderManager</strong>, 所以这里创建<strong>ProviderManager</strong>对象, 并且配置<strong>authenticationProviders</strong>和<strong>parentAuthenticationManager</strong>对象, <strong>ProviderManager</strong>对象创建成功之后,再去对象后置处理器中处理一遍再返回</li></ol><p>这就是<strong>AuthenticationManagerBuilder</strong>的大致逻辑, 我们需要重点掌握<strong>authenticationProvider</strong>、<strong>parentAuthenticationManager</strong>方法</p><h3 id="4-3-3-GlobalAuthenticationConfigurerAdapter"><a href="#4-3-3-GlobalAuthenticationConfigurerAdapter" class="headerlink" title="4.3.3 GlobalAuthenticationConfigurerAdapter"></a>4.3.3 GlobalAuthenticationConfigurerAdapter</h3><p>​<span style="color:red;"><strong>GlobalAuthenticationConfigurerAdapter</strong> 主要是用于配置全局<strong>AuthenticationManagerBuilder</strong>, 在<strong>AuthenticationConfigureration</strong>类会自动使用<strong>GlobalAuthenticationConfigurerAdapter</strong>提供的<strong>Bean</strong>来配置全局的<strong>AuthenticationManagerBuilder</strong></span></p><p>​在之前介绍过<strong>ProviderManager</strong>时曾经提到过, 默认情况下<strong>ProviderManager</strong>有一个parent, 这个parent就是通过这里的全局<strong>AuthenticationManagerBuilder</strong>来构建的.</p><p>​<strong>GlobalAuthenticationConfigurerAdapter</strong>有四个不同的子类, 如图所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230313215553853.png" alt="image-20230313215553853"></p><ul><li><strong>InitializeAuthenticationProviderBeanManagerConfigurer</strong>: 初始化全局的<strong>AuthenticationProvider</strong>对象</li><li><strong>InitializeAuthenticationProviderManagerConfigurer</strong>: 配置全局的<strong>AuthenticationProvider</strong>对象, 配置的过程就是从Spring容器中找<strong>AuthenticationProvider</strong>并添加到全局的<strong>AuthenticationManagerBuilder</strong>对象的<strong>authenticationProvider</strong>中</li><li><strong>InitializeUserDetailsBeanManagerConfigurer</strong>: 初始化全局的<strong>UserDetailsService</strong>对象</li><li><strong>IntializeUserDetailsManagerConfigurer</strong>: 配置全局的<strong>UserDetailsService</strong>对象,配置过程就是从Spring容器中查找<strong>UserDetailsService</strong>,封装为一个<strong>DaoAuthenticationProvider</strong> 并添加到全局的<strong>AuthenticatioonManagerBuilder</strong>对象的<strong>authenticationProvider</strong>中</li><li><strong>EnableGlobalAuthenticationAutowiredConfigurer</strong>: 从Spring容器中加载被@<strong>EnableGlobalAuthentication</strong>注解标记的Bean</li></ul><h3 id="4-3-4-AuthenticationConfiguration"><a href="#4-3-4-AuthenticationConfiguration" class="headerlink" title="4.3.4 AuthenticationConfiguration"></a>4.3.4 AuthenticationConfiguration</h3><p>​在SpringSecurity自动化配置类中导入的另外一个配置类是<strong>AuthenticationConfiguration</strong>,<span style="color:red;"> 该类的功能主要是做全局的配置, 同时提供一个方法来一个全局的<strong>AuthenticationManager</strong>实例. </span>首先我们来看<strong>AuthenticationConfiguration</strong>类定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(ObjectPostProcessorConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, <strong>AuthenticationConfiguration</strong>类的定义中, 导入了<strong>ObjectPostProcessorConfiguration</strong>配置, 而<strong>ObjectPostProcessorConfiguration</strong>配置则提供了一个基本的对象后置处理器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectPostProcessorConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="hljs-keyword">public</span> ObjectPostProcessor&lt;Object&gt; <span class="hljs-title function_">objectPostProcessor</span><span class="hljs-params">(AutowireCapableBeanFactory beanFactory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutowireBeanFactoryObjectPostProcessor</span>(beanFactory);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, <strong>ObjectPostProcessorConfiguration</strong>类主要提供了一个<strong>ObjectPostProcessor</strong>实例, 具体的实现类是<strong>AutowireBeanFactoryObjetPostProcessor</strong>, 根据前面的介绍, 该实现类主要用来将一个对象注册到Spring容器中, 我们在其他配置类中所见到的<strong>ObjectPostProcessor</strong>实例其实都是这里提供的</p><p>​这是<strong>AuthenticationConfiguration</strong>类的定义部分, <strong>AuthenticationConfiguration</strong>类中的方法比较多, 我们挑选出关键的部分分析一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> AuthenticationManagerBuilder <span class="hljs-title function_">authenticationManagerBuilder</span><span class="hljs-params">(ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-type">LazyPasswordEncoder</span> <span class="hljs-variable">defaultPasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyPasswordEncoder</span>(context);<br><span class="hljs-type">AuthenticationEventPublisher</span> <span class="hljs-variable">authenticationEventPublisher</span> <span class="hljs-operator">=</span> getAuthenticationEventPublisher(context);<br><span class="hljs-type">DefaultPasswordEncoderAuthenticationManagerBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(<br>objectPostProcessor, defaultPasswordEncoder);<br><span class="hljs-keyword">if</span> (authenticationEventPublisher != <span class="hljs-literal">null</span>) &#123;<br>result.authenticationEventPublisher(authenticationEventPublisher);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GlobalAuthenticationConfigurerAdapter <span class="hljs-title function_">enableGlobalAuthenticationAutowiredConfigurer</span><span class="hljs-params">(</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnableGlobalAuthenticationAutowiredConfigurer</span>(context);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InitializeUserDetailsBeanManagerConfigurer <span class="hljs-title function_">initializeUserDetailsBeanManagerConfigurer</span><span class="hljs-params">(</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeUserDetailsBeanManagerConfigurer</span>(context);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InitializeAuthenticationProviderBeanManagerConfigurer <span class="hljs-title function_">initializeAuthenticationProviderBeanManagerConfigurer</span><span class="hljs-params">(</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeAuthenticationProviderBeanManagerConfigurer</span>(context);<br>&#125;<br><br><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">getAuthenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationManagerInitialized) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authenticationManager;<br>&#125;<br><span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationContext.getBean(AuthenticationManagerBuilder.class);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.buildingAuthenticationManager.getAndSet(<span class="hljs-literal">true</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationManagerDelegator</span>(authBuilder);<br>&#125;<br><span class="hljs-keyword">for</span> (GlobalAuthenticationConfigurerAdapter config : <span class="hljs-built_in">this</span>.globalAuthConfigurers) &#123;<br>authBuilder.apply(config);<br>&#125;<br><span class="hljs-built_in">this</span>.authenticationManager = authBuilder.build();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationManager == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.authenticationManager = getAuthenticationManagerBean();<br>&#125;<br><span class="hljs-built_in">this</span>.authenticationManagerInitialized = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authenticationManager;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>首先定义了一个<strong>AuthenticationManagerBuilder</strong>实例, 目的是为了构建全局的<strong>AuthenticationManager</strong>对象, 这个过程中会从Spring容器中查找<strong>AuthenticationEventPublisher</strong>实例设置给<strong>AuthenticationManagerBuilder</strong>对象</p></li><li><p>接下来构建了三个Bean, 这三个Bean的作用在之前介绍过了.</p></li><li><p><strong>getAuthenticationManager</strong>方法则用来构建具体的<strong>AuthenticationManager</strong>对象, 在该方法内部, 会首先判断<strong>AuthenticationManager</strong>对象是否已经初始化, 如果已经初始化, 则直接返回<strong>AuthenticationManager</strong>对象, 否则就先从Spring容器中获取到<strong>AuthenticationManagerDelegator</strong>对象, 这个主要是为了防止在初始化<strong>AuthenticationManager</strong>时进行无限递归. 拿到<strong>authBuilder</strong>对象之后, 接下来遍历<strong>globalAuthConfigurers</strong>配置类集合(也就是第二点所说的三个配置类), 将配置类分别添加到<strong>authBuilder</strong>对象中, 然后进行构建, 最终将构建结果返回.</p><p>这是全局<strong>AuthenticationManager</strong>的构建过程.</p><p>整体来说, <strong>AuthenticationConfiguration</strong>的作用主要体现在两方面:</p><ul><li>第一就是导入了<strong>ObjectPostProcessorConfiguration</strong>配置类;</li><li>第二则是提供了一个全局的<strong>AuthenticationManager</strong>对象.如果开发者在自定义配置类中重写了<strong>configure(AuthenticationManagerBuilder)<strong>方法, 这里的全局</strong>AuthenticationManager</strong>对象将不会生效, 而大部分情况下, 开发者都会重写**configure(AuthenticationManagerBuilder)**方法</li></ul></li></ol><p>​</p><h3 id="4-3-5-全局配置初始化分析"><a href="#4-3-5-全局配置初始化分析" class="headerlink" title="4.3.5 全局配置初始化分析"></a>4.3.5 全局配置初始化分析</h3><p>有了前缀的构造器和构造器的知识, 我们就可以来分析下SpringSecurity的全局<strong>AuthenticationManager</strong>是如何初始化的(<strong>SecurityFilterChain版本</strong>):</p><p>我们知道自定义<strong>SecurityFilterChain</strong>的方式会创建<strong>HttpSecurity</strong>, 创建逻辑在<strong>HttpSecurityConfiguration</strong>#<strong>httpSecurity</strong>, 我们看下具体逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpSecurityConfiguration</span> &#123;<br>  <br>  <span class="hljs-meta">@Bean(HTTPSECURITY_BEAN_NAME)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>HttpSecurity <span class="hljs-title function_">httpSecurity</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>WebSecurityConfigurerAdapter.<span class="hljs-type">LazyPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>.LazyPasswordEncoder(<br><span class="hljs-built_in">this</span>.context);<br><span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authenticationBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>.DefaultPasswordEncoderAuthenticationManagerBuilder(<br><span class="hljs-built_in">this</span>.objectPostProcessor, passwordEncoder);<br>    <span class="hljs-comment">//将创建的全局AuthenticationManager设置到authenticationBuilder的parentAuthenticationManager</span><br>authenticationBuilder.parentAuthenticationManager(authenticationManager());<br>authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());<br>    <span class="hljs-comment">//将AuthenticationBuilder设置到shareObjects</span><br><span class="hljs-type">HttpSecurity</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSecurity</span>(<span class="hljs-built_in">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());<br><span class="hljs-comment">// @formatter:off</span><br>http<br>.csrf(withDefaults())<br>.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAsyncManagerIntegrationFilter</span>())<br>.exceptionHandling(withDefaults())<br>.headers(withDefaults())<br>.sessionManagement(withDefaults())<br>.securityContext(withDefaults())<br>.requestCache(withDefaults())<br>.anonymous(withDefaults())<br>.servletApi(withDefaults())<br>.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultLoginPageConfigurer</span>&lt;&gt;());<br>http.logout(withDefaults());<br><span class="hljs-comment">// @formatter:on</span><br>applyDefaultConfigurers(http);<br><span class="hljs-keyword">return</span> http;<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局AuthentionManager初始化分析"><a href="#全局AuthentionManager初始化分析" class="headerlink" title="全局AuthentionManager初始化分析"></a>全局AuthentionManager初始化分析</h4><p>我们先分析下<strong>HttpSecurity</strong>中的这段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authenticationBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>.DefaultPasswordEncoderAuthenticationManagerBuilder(<br><span class="hljs-built_in">this</span>.objectPostProcessor, passwordEncoder);<br>authenticationBuilder.parentAuthenticationManager(authenticationManager());<br></code></pre></td></tr></table></figure><p>这里的逻辑主要是:</p><ol><li>先构建一个<strong>AuthenticationManagerBuilder</strong>, 从前置知识我们知道这个<strong>AuthenticationManagerBuilder</strong>继承了<strong>AbstractConfiguredSecurityBuilder</strong>里面维护了一堆的<strong>configures</strong>, 是用来构建<strong>AuthenticationManager</strong>. </li><li><span style="color:red;">然后调用<strong>AuthenticationConfiguration</strong>#<strong>getAuthenticationManager</strong>构建一个<strong>全局AuthenticationManager</strong></span>,然后设置到<strong>AuthenticationManagerBuilder</strong>中, 我们再来复习下<strong>AuthenticationConfiguration</strong>这个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">getAuthenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-comment">//这里如果保证这个方法只能初始化一次AuthenticationManager</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationManagerInitialized) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authenticationManager;<br>&#125;<br>  <span class="hljs-comment">//从Spring中获取AuthenticationManagerBuilder</span><br><span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationContext.getBean(AuthenticationManagerBuilder.class);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.buildingAuthenticationManager.getAndSet(<span class="hljs-literal">true</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationManagerDelegator</span>(authBuilder);<br>&#125;<br>  <span class="hljs-comment">//从GlobalAuthenticationConfigurerAdapter添加进配置</span><br><span class="hljs-keyword">for</span> (GlobalAuthenticationConfigurerAdapter config : <span class="hljs-built_in">this</span>.globalAuthConfigurers) &#123;<br>authBuilder.apply(config);<br>&#125;<br>  <span class="hljs-comment">//在执行AuthenticationManagerBuilder#build方法构建全局的AuthenticationManager</span><br><span class="hljs-built_in">this</span>.authenticationManager = authBuilder.build();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationManager == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.authenticationManager = getAuthenticationManagerBean();<br>&#125;<br><span class="hljs-built_in">this</span>.authenticationManagerInitialized = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authenticationManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法会从Spring容器中获取<strong>AuthenticationManagerBuilder</strong>, 这个<strong>AuthenticationManagerBuilder</strong>是从<strong>AuthenticationConfiguration</strong>中注入的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(ObjectPostProcessorConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationConfiguration</span> &#123;<br>  <br>  <span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> AuthenticationManagerBuilder <span class="hljs-title function_">authenticationManagerBuilder</span><span class="hljs-params">(ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-type">LazyPasswordEncoder</span> <span class="hljs-variable">defaultPasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyPasswordEncoder</span>(context);<br><span class="hljs-type">AuthenticationEventPublisher</span> <span class="hljs-variable">authenticationEventPublisher</span> <span class="hljs-operator">=</span> getAuthenticationEventPublisher(context);<br><span class="hljs-type">DefaultPasswordEncoderAuthenticationManagerBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(<br>objectPostProcessor, defaultPasswordEncoder);<br><span class="hljs-keyword">if</span> (authenticationEventPublisher != <span class="hljs-literal">null</span>) &#123;<br>result.authenticationEventPublisher(authenticationEventPublisher);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后将默认的<strong>GlobalAuthenticationConfigurerAdapter</strong>添加进这个<strong>AuthenticationManagerBuilder</strong>中的<strong>configures</strong>, 这个<strong>GlobalAuthenticationConfigurerAdapter</strong>是我们之前讲过的并配置到<strong>AuthenticationConfiguration</strong>里的全局配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(ObjectPostProcessorConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationConfiguration</span> &#123;<br>  <br>  <span class="hljs-comment">//配置全局的UserDetailsService(我们自定义的UserDetailsService会从这个configure加载)</span><br>  <span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InitializeUserDetailsBeanManagerConfigurer <span class="hljs-title function_">initializeUserDetailsBeanManagerConfigurer</span><span class="hljs-params">(</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeUserDetailsBeanManagerConfigurer</span>(context);<br>&#125;<br>  <br>  <span class="hljs-comment">//配置全局的AuthenticationProvider</span><br>  <span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InitializeAuthenticationProviderBeanManagerConfigurer <span class="hljs-title function_">initializeAuthenticationProviderBeanManagerConfigurer</span><span class="hljs-params">(</span><br><span class="hljs-params">ApplicationContext context)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeAuthenticationProviderBeanManagerConfigurer</span>(context);<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>再回到<strong>AuthenticationConfiguration</strong>#<strong>getAuthenticationManager</strong>, 将我们的全局配置添加进<strong>AuthenticationManagerBuilder</strong>中的<strong>configures</strong>后, 就会去执行<strong>build</strong>方法去初始化还有配置了, 最后构建出全局的<strong>AuthenticationManager</strong></p><p>这里我们详细说下<strong>InitializeAuthenticationProviderBeanManagerConfigurer</strong>这个配置是如何初始化和配置出全局的<strong>AuthenticationManager</strong>的, 当执行到<strong>AuthenticationConfiguration#getAuthenticationManager</strong>的<strong>authBuilder.build()<strong>就会开始构建全局的</strong>AuthenticationManager</strong>, 我们看下在初始化和配置逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>auth.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeAuthenticationProviderManagerConfigurer</span>());<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InitializeAuthenticationProviderManagerConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GlobalAuthenticationConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> &#123;<br><span class="hljs-keyword">if</span> (auth.isConfigured()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">AuthenticationProvider</span> <span class="hljs-variable">authenticationProvider</span> <span class="hljs-operator">=</span> getBeanOrNull(AuthenticationProvider.class);<br><span class="hljs-keyword">if</span> (authenticationProvider == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>auth.authenticationProvider(authenticationProvider);<br>&#125;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>init</strong>方法就是将<strong>InitializeAuthenticationProviderManagerConfigurer</strong>配置又添加到了<strong>AuthenticationManagerBuilder</strong>中</p></li><li><p>而<strong>configure</strong>方法则是:</p><ul><li><p>先判断该<strong>AuthenticationManagerBuilder</strong>是否是第一次配置, 保证只会配置一次</p></li><li><p>在从Spring中获取全局的<strong>AuthenticationProvider</strong>, 如果我们有自定义<strong>AuthenticationProvider</strong>就会添加到<strong>AuthenticationManagerBuilder</strong>中的<strong>authenticationProviders</strong></p></li></ul></li></ul><p>简单来说, 主要看没有我们自定义的<strong>AuthenticationProvider</strong>有就放到全局<strong>AuthenticationManagerBuilder</strong>的<strong>authenticationProvider</strong>中, 这样我们就可以自己注入一个<strong>AuthenticationProvider</strong></p><h4 id="全局UserDetailsService初始化分析"><a href="#全局UserDetailsService初始化分析" class="headerlink" title="全局UserDetailsService初始化分析"></a>全局UserDetailsService初始化分析</h4><p>全局<strong>UserDetailsService</strong>是由添加到<strong>AuthenticationManagerBuilder</strong>中的<strong>configures</strong>的<strong>InitializeUserDetailsBeanManagerConfigurer</strong>来进行初始化配置的, 我们详细看下具体逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(InitializeUserDetailsBeanManagerConfigurer.DEFAULT_ORDER)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InitializeUserDetailsBeanManagerConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GlobalAuthenticationConfigurerAdapter</span> &#123;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>auth.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InitializeUserDetailsManagerConfigurer</span>());<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InitializeUserDetailsManagerConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GlobalAuthenticationConfigurerAdapter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (auth.isConfigured()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">UserDetailsService</span> <span class="hljs-variable">userDetailsService</span> <span class="hljs-operator">=</span> getBeanOrNull(UserDetailsService.class);<br><span class="hljs-keyword">if</span> (userDetailsService == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> getBeanOrNull(PasswordEncoder.class);<br><span class="hljs-type">UserDetailsPasswordService</span> <span class="hljs-variable">passwordManager</span> <span class="hljs-operator">=</span> getBeanOrNull(UserDetailsPasswordService.class);<br><span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>provider.setUserDetailsService(userDetailsService);<br><span class="hljs-keyword">if</span> (passwordEncoder != <span class="hljs-literal">null</span>) &#123;<br>provider.setPasswordEncoder(passwordEncoder);<br>&#125;<br><span class="hljs-keyword">if</span> (passwordManager != <span class="hljs-literal">null</span>) &#123;<br>provider.setUserDetailsPasswordService(passwordManager);<br>&#125;<br>provider.afterPropertiesSet();<br>auth.authenticationProvider(provider);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a bean of the requested class if there&#x27;s just a single registered</span><br><span class="hljs-comment"> * component, null otherwise.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">getBeanOrNull</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>String[] beanNames = InitializeUserDetailsBeanManagerConfigurer.<span class="hljs-built_in">this</span>.context.getBeanNamesForType(type);<br><span class="hljs-keyword">if</span> (beanNames.length != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">return</span> InitializeUserDetailsBeanManagerConfigurer.<span class="hljs-built_in">this</span>.context.getBean(beanNames[<span class="hljs-number">0</span>], type);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>init</strong>方法的设计和<strong>InitializeAuthenticationProviderManagerConfigurer</strong>是一样的</li><li><strong>configure</strong>的主要逻辑为:<ul><li>先判断该<strong>AuthenticationManagerBuilder</strong>是否是第一次配置, 保证只会配置一次</li><li>从Spring去拿我们自定义的<strong>UserDetailsService</strong>、<strong>PasswordEncoder</strong>, 如果有则封装为一个<strong>DaoAuthenticationProvider</strong>对象再添加到<strong>AuthenticationManagerBuilder</strong>中的<strong>authenticationProviders</strong>中.</li></ul></li></ul><p>这就是我们自定义的<strong>UserDetailsService</strong>、<strong>PasswordEncoder</strong>是如何被添加到全局的<strong>AuthenticationManager</strong>的</p><p>​看完了<strong>InitializeAuthenticationProviderManagerConfigurer#configure</strong>添加自定义<strong>AuthenticationProvider</strong>以及<strong>InitializeUserDetailsBeanManagerConfigurer#configure</strong>添加自定义<strong>userDetailsService</strong>, 我们再来看下<strong>AuthenticationManagerBuilder</strong>构建过程#<strong>performBuild</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ProviderManager <span class="hljs-title function_">performBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (!isConfigured()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;No authenticationProviders and no parentAuthenticationManager defined. Returning null.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-type">ProviderManager</span> <span class="hljs-variable">providerManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(<span class="hljs-built_in">this</span>.authenticationProviders,<br><span class="hljs-built_in">this</span>.parentAuthenticationManager);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eraseCredentials != <span class="hljs-literal">null</span>) &#123;<br>providerManager.setEraseCredentialsAfterAuthentication(<span class="hljs-built_in">this</span>.eraseCredentials);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eventPublisher != <span class="hljs-literal">null</span>) &#123;<br>providerManager.setAuthenticationEventPublisher(<span class="hljs-built_in">this</span>.eventPublisher);<br>&#125;<br>providerManager = postProcess(providerManager);<br><span class="hljs-keyword">return</span> providerManager;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>先判断该<strong>AuthenticationManagerBuilder</strong>是否是第一次构建, 保证只会构建一次</li><li>直接封装一个<strong>ProviderManager</strong>然后调用<strong>postProcess</strong>来注入容器</li></ul><p>这样注入全局<strong>AuthenticationManager</strong>过程也就是<strong>AuthenticationManager#getAuthenticationManager</strong>就结束.</p><p>​ 我们再回到<strong>HttpSecurityConfiguration#httpSecurity</strong>方法中来, 再回忆下之前的操作: </p><ol><li><strong>new</strong>了一个<strong>AuthenticationManagerBuilder</strong>,</li><li>调用<strong>AuthenticationConfiguration#getAuthenticationManager</strong>方法直接构建了一个<strong>全局的AuthenticationManager</strong>, 并把这个<strong>全局AuthenticationManager</strong>设置为了我们<strong>new</strong>出的<strong>AuthenticationManagerBuilder</strong>的<strong>parentAuthenticationManager</strong>,</li><li><strong>new HttpSecurity()</strong>: 并将这个<strong>AuthenticationManagerBuilder</strong>设置到<strong>shareObjects</strong></li></ol><p>​后面就是添加一些默认配置到<strong>HttpSecurity</strong>, 到此<strong>HttpSecurityConfiguration#httpSecurity</strong>就结束了.再回到我们自定义<strong>SecurityFilterChain</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   http.authorizeHttpRequests()<br>       .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>       .anyRequest().authenticated()<br>       .and().formLogin()<br>       .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;UsernamePasswordAuthenticationFilter&gt;() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>           <span class="hljs-comment">//自定义ObjectPostProcessor</span><br>           object.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>           object.setPasswordParameter(<span class="hljs-string">&quot;pwd&quot;</span>);<br>           object.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;<br>             response.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>           &#125;);<br>           <span class="hljs-keyword">return</span> object;<br>         &#125;<br>       &#125;)<br>       .and().userDetailsService(userDetailService())<br>       .csrf().disable();<br><br>   <span class="hljs-keyword">return</span> http.build();<br> &#125;<br></code></pre></td></tr></table></figure><p>配置逻辑很简单, 基本都是往<strong>HttpSecurity</strong>的<strong>configures</strong>进行配置, 然后<strong>build</strong>构建<strong>SecurityFilterChain</strong>, 我们主要看下这个<strong>build</strong>中的<strong>doBuild</strong>方法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> O <span class="hljs-title function_">doBuild</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.configurers) &#123;<br><span class="hljs-built_in">this</span>.buildState = BuildState.INITIALIZING;<br>beforeInit();<br>init();<br><span class="hljs-built_in">this</span>.buildState = BuildState.CONFIGURING;<br>beforeConfigure();<br>configure();<br><span class="hljs-built_in">this</span>.buildState = BuildState.BUILDING;<br><span class="hljs-type">O</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> performBuild();<br><span class="hljs-built_in">this</span>.buildState = BuildState.BUILT;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个过程就是初始化和配置各种之前<strong>HttpSecurityConfiguration#httpSecurity</strong>添加或者我们自定义添加的<strong>xxxConfigurer</strong> .</p><p>这里我们提下在<strong>HttpSecurityConfiguration#httpSecurity</strong>添加了<strong>AnonymousConfigurer</strong>, 我们看下<strong>init</strong>、<strong>configure</strong>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationProvider == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.authenticationProvider = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnonymousAuthenticationProvider</span>(getKey());<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationFilter == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.authenticationFilter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnonymousAuthenticationFilter</span>(getKey(), <span class="hljs-built_in">this</span>.principal, <span class="hljs-built_in">this</span>.authorities);<br>&#125;<br><span class="hljs-built_in">this</span>.authenticationProvider = postProcess(<span class="hljs-built_in">this</span>.authenticationProvider);<br>http.authenticationProvider(<span class="hljs-built_in">this</span>.authenticationProvider);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-built_in">this</span>.authenticationFilter.afterPropertiesSet();<br>http.addFilter(<span class="hljs-built_in">this</span>.authenticationFilter);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>init</strong>方法会将初始化一个<strong>AnonymousAuthenticationProvider</strong>并添加给我们之前设置到<strong>shareObjects</strong>的<strong>AuthenticationProviderBuilder</strong>中的<strong>authenticationProviders</strong>中</li><li><strong>configure</strong>方法则是将过滤器添加到<strong>HttpSecurity</strong>的<strong>filters</strong></li></ul><p><span style="color:red;">这就解释了为什么默认<strong>HttpSecurity</strong>中的<strong>authenticationManager</strong>有个<strong>AnonymousAuthenticationProvider</strong></span></p><h4 id="自定义AuthenticationManager覆盖全局AuthenticationManager"><a href="#自定义AuthenticationManager覆盖全局AuthenticationManager" class="headerlink" title="自定义AuthenticationManager覆盖全局AuthenticationManager"></a>自定义AuthenticationManager覆盖全局AuthenticationManager</h4><blockquote><p>HttpSecurity中AuthenticationManagerBuilder构建时机</p></blockquote><p>我们根据流程知道: 之前已经初始化了全局的<strong>AuthenticationManager</strong>并作为<strong>parent</strong>设置到<strong>HttpSecurity</strong>中的<strong>authenticationManagerBuilder</strong>中, 并把这个<strong>authenticationManagerBuilder</strong>放到了<strong>HttpSecurity</strong>中的<strong>shareObjects</strong>中.</p><p>但一直没给这个<strong>HttpSecurity</strong>的<strong>authenticationManager</strong>构建, 那其实这个构建是在<strong>HttpSecurity#build#doBuild#beforeConfigure</strong>中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpSecurity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractConfiguredSecurityBuilder</span>&lt;DefaultSecurityFilterChain, HttpSecurity&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityBuilder</span>&lt;DefaultSecurityFilterChain&gt;, HttpSecurityBuilder&lt;HttpSecurity&gt; &#123;<br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeConfigure</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationManager != <span class="hljs-literal">null</span>) &#123;<br>setSharedObject(AuthenticationManager.class, <span class="hljs-built_in">this</span>.authenticationManager);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>setSharedObject(AuthenticationManager.class, getAuthenticationRegistry().build());<br>&#125;<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这个方法大体逻辑是如果有我们自定义的<strong>AuthenticationManager</strong>, 就直接用我们自定义的来覆盖全局的,并设置到<strong>shareObjects</strong>里面</li><li>如果没有自定义的就用我们在<strong>HttpSecurityConfiguration#httpSecurity</strong>构建的<strong>AuthenticationManagerBuilder</strong>, 构建出<strong>AuthenticationManager</strong>,并设置到<strong>shareObjects</strong>里面</li></ul><blockquote><p>自定义AuthenticationManager</p></blockquote><p><strong>HttpSecurity</strong>已经提供给了方法来覆盖全局的<strong>AuthenticationManager</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> HttpSecurity <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> &#123;<br>Assert.notNull(authenticationManager, <span class="hljs-string">&quot;authenticationManager cannot be null&quot;</span>);<br><span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br><span class="hljs-keyword">return</span> HttpSecurity.<span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-过滤器链初始化分析"><a href="#4-4-过滤器链初始化分析" class="headerlink" title="4.4 过滤器链初始化分析"></a>4.4 过滤器链初始化分析</h2><p>在介绍SpringSecurity过滤器链也就是<strong>FilterChainProxy</strong>是如何初始化之前, 我们应该先要了解下<strong>WebSecurityConfigurer</strong>、<strong>WebSecurityConfigurerAdapter</strong></p><h3 id="4-4-1-WebSecurityConfigurer"><a href="#4-4-1-WebSecurityConfigurer" class="headerlink" title="4.4.1 WebSecurityConfigurer"></a>4.4.1 WebSecurityConfigurer</h3><p>​<strong>WebSecurityConfigurer</strong>是一个空接口, 我们可以通过它来自定义<strong>WebSecurity</strong>. <strong>WebSecurityConfigurer</strong> 只有一个实现类就是<strong>WebSecurityConfigurerAdpter</strong>, 在大多数情况下, 开发者可以通过继承<strong>WebSecurityConfigurerAdapter</strong>来实现<strong>WebSecurity</strong>的自定义配置</p><h3 id="4-4-2-WebSecurityConfigurerAdapter"><a href="#4-4-2-WebSecurityConfigurerAdapter" class="headerlink" title="4.4.2 WebSecurityConfigurerAdapter"></a>4.4.2 WebSecurityConfigurerAdapter</h3><p>​<strong>WebSecurityConfigurerAdapter</strong>是一个可以方便创建<strong>WebSecurityConfigurer</strong>实例的基类, 开发者可以通过覆盖<strong>WebSecurityConfigurerAdapter</strong>中的方法完成对<strong>HttpSecurity</strong>和<strong>WebSecurity</strong>的定制. 后面都是通过自定义<strong>WebSecurityConfigurerAdapter</strong>来实现的</p><p>​在<strong>WebSecurityConfigurerAdapter</strong>中声明了两个<strong>AuthenticationManagerBuilder</strong>对象用来构建<strong>AuthenticationManager</strong>: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> AuthenticationManagerBuilder authenticationBuilder;<br><span class="hljs-keyword">private</span> AuthenticationManagerBuilder localConfigureAuthenticationBuilder;<br></code></pre></td></tr></table></figure><p>​其中, <strong>localConfigureAuthenticationBuilder</strong>对象负责构建全局的<strong>AuthenticationManager</strong>, 而<strong>authenticationBuilder</strong>则负责构建局部的<strong>AuthenticationManager</strong>. 局部的<strong>AuthenticationManager</strong>是和每一个<strong>HttpSecurity</strong>对象绑定的, 而全局的<strong>AuthenticationManager</strong>对象则是所有局部<strong>AuthenticationManager</strong>的<strong>parent</strong>. </p><p>需要注意的是:  </p><ul><li><strong>localConfigurerAuthenticationBuilder</strong>并非总是有用的, 在开发者没有重写<strong>configure(AuthenticationManagerBuilder)<strong>方法的情况下, 全局的</strong>AuthenticationManager</strong>对象是由<strong>AuthenticationConfiguration</strong>类中的<strong>getAuthenticationManager</strong>方法提供的</li><li>如果用户重写了<strong>configure(AuthenticationManagerBuilder)<strong>方法, 则全局的</strong>AuthenticationManager</strong>就由<strong>localConfigureAuthenticationBuilder</strong>负责构建.</li></ul><p>​<strong>WebSecurityConfigurerAdapter</strong>类的初始化方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 在init方法中, 首先调用getHttp方法获取一个HttpSecurity实例, 并将获取到实例添加到WebSecurity对象中, 再由WebSecurity对象进行构建</span><br><span class="hljs-type">HttpSecurity</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> getHttp();<br>web.addSecurityFilterChainBuilder(http).postBuildAction(() -&gt; &#123;<br><span class="hljs-type">FilterSecurityInterceptor</span> <span class="hljs-variable">securityInterceptor</span> <span class="hljs-operator">=</span> http.getSharedObject(FilterSecurityInterceptor.class);<br>web.securityInterceptor(securityInterceptor);<br>&#125;);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> HttpSecurity <span class="hljs-title function_">getHttp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//2. 在getHttp方法中, 如果Http对象已经初始化, 则直接返回, 否则进行初始化操作. 在初始化的过程中, 给localConfigureAuthenticationBldr设置事件发布器, 并调用authenticationManager方法获取全局的AuthenticationManager对象</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.http != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.http;<br>&#125;<br><span class="hljs-type">AuthenticationEventPublisher</span> <span class="hljs-variable">eventPublisher</span> <span class="hljs-operator">=</span> getAuthenticationEventPublisher();<br><span class="hljs-built_in">this</span>.localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);<br>  <br>   <span class="hljs-comment">//3. 在authenticationManager方法中, 如果全局的AuthenticationManager对象还没有初始化,则先调用configure方法, 该方法的逻辑很简单, 就是将disableLocalConfigure AuthenticationBldr变量由false变为true, 接下来就会进入到authenticationManager方法的if分支中,通过调用authenticationConfiguration.getAuthenticationManager()方法获取全局的AuthenticationManager对象并返回.如果开发者自己重写了configure(AuthenticationManager Builder)方法, 则disableLocalConfigureAuthenticationBldr变量就一直是false, 没有机会变为true, 这样就会进入到else分支中, 通过localConfigureAuthenticationBldr变量来构建authenticationManager对象</span><br><span class="hljs-type">AuthenticationManager</span> <span class="hljs-variable">authenticationManager</span> <span class="hljs-operator">=</span> authenticationManager();<br>  <br>   <span class="hljs-comment">//4. 再次回到getHttp方法中, 获取到全局的authenticationManager对象之后, 设置给authenticationBuilder, 然后创建一个HttpSecurity实例出来, 并为其配置上默认的过滤器. 默认的配置完成后, 调用configure(HttpSecurity)方法进行扩展配置, WebSecurityConfigurerAdapter中对configure(HttpSecurity)方法提供了默认的实现, 开发者也可以自定义该方法</span><br><span class="hljs-built_in">this</span>.authenticationBuilder.parentAuthenticationManager(authenticationManager);<br>Map&lt;Class&lt;?&gt;, Object&gt; sharedObjects = createSharedObjects();<br>  <span class="hljs-comment">//将this.authenticationBuilder设置到this.sharedObjects</span><br><span class="hljs-built_in">this</span>.http = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSecurity</span>(<span class="hljs-built_in">this</span>.objectPostProcessor, <span class="hljs-built_in">this</span>.authenticationBuilder, sharedObjects);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.disableDefaults) &#123;<br>      <span class="hljs-comment">//这里是在往HttpSecurity的configurers集合添加各种xxxConfigurer</span><br>http.csrf();<br>http.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAsyncManagerIntegrationFilter</span>());<br>http.exceptionHandling();<br>http.headers();<br>http.sessionManagement();<br>http.securityContext();<br>http.requestCache();<br>http.anonymous();<br>http.servletApi();<br>http.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultLoginPageConfigurer</span>&lt;&gt;());<br>http.logout();<br>      <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.context.getClassLoader();<br>List&lt;AbstractHttpConfigurer&gt; defaultHttpConfigurers = SpringFactoriesLoader<br>.loadFactories(AbstractHttpConfigurer.class, classLoader);<br><span class="hljs-keyword">for</span> (AbstractHttpConfigurer configurer : defaultHttpConfigurers) &#123;<br><span class="hljs-built_in">this</span>.http.apply(configurer);<br>&#125;<br>&#125;<br>configure(<span class="hljs-built_in">this</span>.http);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.http;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-built_in">this</span>.disableLocalConfigureAuthenticationBldr = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">protected</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.authenticationManagerInitialized) &#123;<br>configure(<span class="hljs-built_in">this</span>.localConfigureAuthenticationBldr);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.disableLocalConfigureAuthenticationBldr) &#123;<br><span class="hljs-built_in">this</span>.authenticationManager = <span class="hljs-built_in">this</span>.authenticationConfiguration.getAuthenticationManager();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.authenticationManager = <span class="hljs-built_in">this</span>.localConfigureAuthenticationBldr.build();<br>&#125;<br><span class="hljs-built_in">this</span>.authenticationManagerInitialized = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authenticationManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这就是<strong>WebSecurityConfigurerAdapter</strong>的初始化方法, 其实就是创建并配置一个<strong>HttpSecurity</strong>实例, 之后添加到<strong>WebSecurity</strong>中</p><p>​<strong>WebSecurityConfigurerAdapter</strong>中的<strong>configure</strong>方法是一个空方法, 可以用来配置<strong>WebSecurity</strong>, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><p>​一般来说, 如果我们有一些静态资源不需要经过SpringSecurity过滤器, 就可以通过重写该方法来实现.</p><p>​至此, 在SpringSecurity初始化过程中, 几个重要的组件都介绍完了, 但是出现了一个问题: <strong>WebSecurityConfigurerAdapter</strong>这个类的<strong>init、configure</strong>是如何被调用的? 应该作为那个类的配置类来初始化和配置? 后面<strong>WebSecurityConfiguration</strong>的介绍会恍然大悟</p><h3 id="4-4-3-初始化分析"><a href="#4-4-3-初始化分析" class="headerlink" title="4.4.3 初始化分析"></a>4.4.3 初始化分析</h3><p>​在SpringBoot中使用SpringSecurity, 初始化就从SpringSecurity的自动化配置类开始:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfiguration</span><br><span class="hljs-meta">@ConditionalOnClass(DefaultAuthenticationEventPublisher.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(SecurityProperties.class)</span><br><span class="hljs-meta">@Import(&#123; SpringBootWebSecurityConfiguration.class, SecurityDataConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityAutoConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(AuthenticationEventPublisher.class)</span><br><span class="hljs-keyword">public</span> DefaultAuthenticationEventPublisher <span class="hljs-title function_">authenticationEventPublisher</span><span class="hljs-params">(ApplicationEventPublisher publisher)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAuthenticationEventPublisher</span>(publisher);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, 在自动化配置类<strong>SecurityAutoConfiguration</strong>中, 最重要的就是导入了三个配置类, 并且定义了默认的事件发布器</p><p>​导入的三个配置类中, <strong>SpringBootWebSecurityConfiguration</strong>的主要作用是在开发者没有提供<strong>WebSecurityConfigurerAdapter</strong>实例的情况下, 由其负责提供一个默认的<strong>SecuriyFilterChain</strong>实例, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnDefaultWebSecurity</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityFilterChainConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Order(SecurityProperties.BASIC_AUTH_ORDER)</span><br>SecurityFilterChain <span class="hljs-title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>http.authorizeRequests().anyRequest().authenticated();<br>http.formLogin();<br>http.httpBasic();<br><span class="hljs-keyword">return</span> http.build();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>另一个导入的配置类<strong>SecurityDataConfiguration</strong>主要提供了一个<strong>SecurityEvaluationContextExtension</strong>实例, 以便通过SpEL为经过身份验证的用户提供数据查询:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(SecurityEvaluationContextExtension.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityDataConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> SecurityEvaluationContextExtension <span class="hljs-title function_">securityEvaluationContextExtension</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityEvaluationContextExtension</span>();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red;">最后一个导入的配置类<strong>WebSecurityEnablerConfiguration</strong>则是我们分析的重点:</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span><br><span class="hljs-meta">@ConditionalOnClass(EnableWebSecurity.class)</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityEnablerConfiguration</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>WebSecurityEnablerConfiguration</strong>配置类中添加了@<strong>EnableWebSecurity</strong>注解, 而该注解的定义, 引入了关键的配置类<strong>WebSecurityConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(&#123; WebSecurityConfiguration.class, SpringWebMvcImportSelector.class, OAuth2ImportSelector.class,</span><br><span class="hljs-meta">HttpSecurityConfiguration.class &#125;)</span><br><span class="hljs-meta">@EnableGlobalAuthentication</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebSecurity &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Controls debugging support for Spring Security. Default is false.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> if true, enables debug support with Spring Security</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">debug</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到, @<strong>EnableWebSecurity</strong>是一个组合注解, 首先导入了三个配置类:</p><ul><li><strong>WebSecurityConfiguration</strong>: 用来配置<strong>WebSecurity</strong></li><li><strong>SpringWebMvcImportSelector</strong>: 判断当前环境是否存在Spring MVC , 如果存在,则引入相关配置</li><li><strong>OAuth2ImportSelector</strong>: 判断当前环境是否存在OAuth2, 如果存在, 则引入相关配置</li><li><strong>HttpSecurityConfiguration</strong>: 用来配置<strong>HttpSecurity</strong></li></ul><p>​另外还有一个@<strong>EnableGlobalAuthentication</strong>注解, 用来开启全局配置, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(AuthenticationConfiguration.class)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableGlobalAuthentication &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, @<strong>EnableGlobalAuthentication</strong>注解的主要功能是导入了配置类<strong>AuthenticationConfiguration</strong></p><p>​从上面的源码,我们可以看到, <strong>SpringSecurity</strong>的自动化配置类主要导入了两个类: <strong>WebSecurityConfiguration</strong>和<strong>AuthenticationConfiguration</strong>. 接下来我们就来分析下<strong>WebSecurityConfiguration</strong></p><h5 id="WebSecurityConfiguration"><a href="#WebSecurityConfiguration" class="headerlink" title="WebSecurityConfiguration"></a>WebSecurityConfiguration</h5><p>​<strong>WebSecurityConfiguration</strong>配置类的功能, 主要就是为了构建<strong>SpringSecurity</strong>过滤器链代理对象<strong>FilterChainProxy</strong>. 根据前面的分析, <strong>FilterChainProxy</strong>是由<strong>WebSecurity</strong>来构建的, 所以在<strong>WebSecurityConfiguration</strong>中会首先构建<strong>WebSecurity</strong>对象,在利用<strong>WebSecurity</strong>对象构建出<strong>FilterChainProxy</strong></p><p>​我们来看一下<strong>WebSecurityConfiguration</strong>中定义的属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportAware</span>, BeanClassLoaderAware &#123;<br> <br>  <span class="hljs-keyword">private</span> WebSecurity webSecurity;<br><br><span class="hljs-keyword">private</span> Boolean debugEnabled;<br><br><span class="hljs-keyword">private</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers;<br><br><span class="hljs-keyword">private</span> ClassLoader beanClassLoader;<br><br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> ObjectPostProcessor&lt;Object&gt; objectObjectPostProcessor;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>WebSecurityConfiguration</strong>类实现了<strong>ImportAware</strong>接口. <strong>ImportAware</strong>接口一般是和@<strong>Import</strong>注解一起使用的, 实现了<strong>ImportAware</strong>接口的配置类可以方便地通过<strong>setImportMetadata</strong>方法获取到导入类中的数据配置. 换句话说, <strong>WebSecurityConfiguration</strong>实现了<strong>ImportAware</strong>接口, 使用@<strong>Import</strong>注解在@<strong>EnableWebSecurity</strong>上导入<strong>WebSecurityConfiguration</strong>之后, 在<strong>WebSecurityConfiguration</strong>的<strong>setImportMetadata</strong>方法中可以方便的获取到@<strong>EnableWebSecurity</strong>注解中的属性值, 这里主要是debug的属性. 另一方面, <strong>WebSecurityConfiguration</strong>类通过实现<strong>BeanClassLoaderAware</strong>接口可以方便地回去到ClassLoader对象</li><li><strong>webSecurity</strong>对象是<strong>WebSecurityConfiguration</strong>中需要构建的<strong>WebSecurity</strong>对象</li><li><strong>webSecurityConfigurers</strong>集合中保存了所有的配置类, 也就是<strong>WebSecurityConfigurerAdapter</strong>对象, 一个<strong>WebSecurityConfigurerAdapter</strong>对象可以创建一个<strong>HttpSecurity</strong>, 进而构建一条过滤器链, 多个<strong>WebSecurityConfigurerAdapter</strong>对象就可以构建出多条过滤器链</li><li><strong>beanClassLoader</strong>是一个ClassLoader</li><li><strong>objectObjectPostProcessor</strong>是一个对象后置处理器, 注意这个对象是直接从Spring容器中注入的.</li></ol><blockquote><p>setFilterChainProxySecurityConfigurer: 构建WebSecurity</p></blockquote><p>​这是<strong>WebSecurityConfiguration</strong>类中定义的属性. 接下来, 我们来看一下<strong>setFilterChainProxySecurityConfigurer</strong>方法, 该方法主要用来构建一个<strong>WebSecurity</strong>对象, 并且加载所有的配置类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFilterChainProxySecurityConfigurer</span><span class="hljs-params">(ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span><br><span class="hljs-params">ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-built_in">this</span>.webSecurity = objectPostProcessor.postProcess(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurity</span>(objectPostProcessor));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.debugEnabled != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.webSecurity.debug(<span class="hljs-built_in">this</span>.debugEnabled);<br>&#125;<br>   <span class="hljs-comment">//获取Spring中的所有WebSecurityAdapter</span><br>List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutowiredWebSecurityConfigurersIgnoreParents</span>(<br>beanFactory).getWebSecurityConfigurers();<br>webSecurityConfigurers.sort(AnnotationAwareOrderComparator.INSTANCE);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">previousOrder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Object</span> <span class="hljs-variable">previousConfig</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; config : webSecurityConfigurers) &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> AnnotationAwareOrderComparator.lookupOrder(config);<br><span class="hljs-keyword">if</span> (previousOrder != <span class="hljs-literal">null</span> &amp;&amp; previousOrder.equals(order)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;@Order on WebSecurityConfigurers must be unique. Order of &quot;</span> + order<br>+ <span class="hljs-string">&quot; was already used on &quot;</span> + previousConfig + <span class="hljs-string">&quot;, so it cannot be used on &quot;</span> + config + <span class="hljs-string">&quot; too.&quot;</span>);<br>&#125;<br>previousOrder = order;<br>previousConfig = config;<br>&#125;<br>   <span class="hljs-comment">//将Spring中的所有WebSecurityAdapter添加到webSecurity的configures中</span><br><span class="hljs-keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; webSecurityConfigurer : webSecurityConfigurers) &#123;<br><span class="hljs-built_in">this</span>.webSecurity.apply(webSecurityConfigurer);<br>&#125;<br><span class="hljs-built_in">this</span>.webSecurityConfigurers = webSecurityConfigurers;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>setFilterChainProxySecurityConfigurer</strong>方法有两个参数: </p><ul><li>第一个参数<strong>objectPostProcessor</strong>是一个对象后置处理器, 由于该方法有一个**@Autowired<strong>注解, 会自动查找需要注入的参数, 所以</strong>objectPostProcessor<strong>参数会自动注入进来. 需要注意的是, <strong>@Autowired</strong>注解的</strong>required**属性为false, 所以在方法参数注入的时候, 有就注入, 没有就忽略.</li><li><strong>required</strong>属性设置为false主要是针对第二个参数<strong>webSecurityConfigurers</strong>, 因为该参数的值是通过调用<strong>autowiredWebSecurityConfigurersIgnorePatterns</strong>对象也是在当前类中注入到Spring容器的, 我们来看一下它的<strong>getWebSecurityConfigurers</strong>方法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; <span class="hljs-title function_">getWebSecurityConfigurers</span><span class="hljs-params">()</span> &#123;<br>List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Map&lt;String, WebSecurityConfigurer&gt; beansOfType = <span class="hljs-built_in">this</span>.beanFactory.getBeansOfType(WebSecurityConfigurer.class);<br><span class="hljs-keyword">for</span> (Entry&lt;String, WebSecurityConfigurer&gt; entry : beansOfType.entrySet()) &#123;<br>webSecurityConfigurers.add(entry.getValue());<br>&#125;<br><span class="hljs-keyword">return</span> webSecurityConfigurers;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, 在<strong>getWebSecurityConfigurers</strong>方法中主要是通过调用<strong>beanFactory.getBeansOfType</strong>方法来获取Spring容器中所有的<strong>WebSecurityConfigurer</strong>实例, <span style="color:red;">也就是这个方法可以获取开发者自定义的各种各样继承自<strong>WebSecurityConfigurerAdapter</strong>的配置类. </span>如果开发者没有自定义任何配置类, 那么这里获取到的就是前面所讲的<strong>SpringBootWebSecurityConfiguration</strong>类中提供的默认配置类. 将获取到的所有配置类实例放到<strong>webSecurityConfigurers</strong>集合中并返回.</p><p>​返回<strong>setFilterChainProxySecurityConfigurer</strong>方法中, 现在我们已经明白了第二个参数<strong>webSecurityConfigurers</strong>的含义了. 在该方法中:</p><ol><li>首先创建一个<strong>WebSecurity</strong>实例, 创建出来之后去对象后置处理器中走一圈, 这样就将<strong>webSecurity</strong>对象注册到Spring容器中去了. </li><li>接下来, 根据每一个配置类的@<strong>Order</strong>注解对<strong>webSecurityConfigurers</strong>集合中的所有配置类进行排序, 因为一个配置类对应一条过滤器链, 当请求到来后, 需要先和哪个过滤器进行匹配,这里必然存在一个优先级问题, 所以如果开发者自定义了多个配置类, 则需要通过@<strong>Order</strong>注解标记多个配置类的优先级.</li><li>排序完成后, 进入到for循环中, 检查是否存在优先级相等的配置类, 如果存在,则直接抛出异常. 最后再去遍历所有的配置类, 调用<strong>webSecurity.apply</strong>方法将其添加到<strong>webSecurity</strong>父类中的<strong>configurers</strong>集合中(将来遍历该集合并分别调用配置类的<strong>init</strong>和<strong>configure</strong>方法完成配置类的初始化操作)</li></ol><p>​<span style="color:red;">这是<strong>setFilterChainProxySecurityConfigurer</strong>方法的执行逻辑, 该方法主要用来初始化<strong>WebSecurity</strong>对象, 同时收集到所有的用来构建<strong>FailterChainProxy</strong>的自定义配置类, 也就是我们自定义的<strong>WebSecurityConfigurerAdapter</strong>加入到<strong>WebSecurity</strong>的<strong>configures</strong>集合中(后面<strong>WebSecurity</strong>执行<strong>build</strong>方法时会初始化以及配置)</span></p><blockquote><p>springSecurityFilterChain: 构建FilterChainProxy</p></blockquote><p>​有了<strong>WebSecurity</strong>对象和配置类, 接下来就可以构建过滤器<strong>FilterChainProxy</strong>了. 我们来看下<strong>springSecurityFilterChain</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)</span><br><span class="hljs-keyword">public</span> Filter <span class="hljs-title function_">springSecurityFilterChain</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasConfigurers</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.webSecurityConfigurers != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.webSecurityConfigurers.isEmpty();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasFilterChain</span> <span class="hljs-operator">=</span> !<span class="hljs-built_in">this</span>.securityFilterChains.isEmpty();<br>Assert.state(!(hasConfigurers &amp;&amp; hasFilterChain),<br><span class="hljs-string">&quot;Found WebSecurityConfigurerAdapter as well as SecurityFilterChain. Please select just one.&quot;</span>);<br><span class="hljs-keyword">if</span> (!hasConfigurers &amp;&amp; !hasFilterChain) &#123;<br><span class="hljs-type">WebSecurityConfigurerAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.objectObjectPostProcessor<br>.postProcess(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>() &#123;<br>&#125;);<br><span class="hljs-built_in">this</span>.webSecurity.apply(adapter);<br>&#125;<br><span class="hljs-keyword">for</span> (SecurityFilterChain securityFilterChain : <span class="hljs-built_in">this</span>.securityFilterChains) &#123;<br><span class="hljs-built_in">this</span>.webSecurity.addSecurityFilterChainBuilder(() -&gt; securityFilterChain);<br><span class="hljs-keyword">for</span> (Filter filter : securityFilterChain.getFilters()) &#123;<br><span class="hljs-keyword">if</span> (filter <span class="hljs-keyword">instanceof</span> FilterSecurityInterceptor) &#123;<br><span class="hljs-built_in">this</span>.webSecurity.securityInterceptor((FilterSecurityInterceptor) filter);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (WebSecurityCustomizer customizer : <span class="hljs-built_in">this</span>.webSecurityCustomizers) &#123;<br>customizer.customize(<span class="hljs-built_in">this</span>.webSecurity);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.webSecurity.build();<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里首先判断<strong>webSecurityConfigurers</strong>集合中是否存在配置类, 如果不存在, 则立马创建一个匿名的<strong>WebSecurityConfigurerAdapter</strong>对象并注册到Spring容器中, 否则就直接调用<strong>WebSecurity</strong>的<strong>build</strong>方法进行构建.</p><p>​根据之前的介绍, 了解了<strong>WebSecurity</strong>对象的<strong>build</strong>方法执行后, 首先会对所有的配置类即<strong>WebSecurityConfigurerAdapter</strong>实例进行构建, 在<strong>WebSecurityConfigurerAdapter</strong>的<strong>init</strong>方法中, 又会完成<strong>HttpSecurity</strong>的构建, 而<strong>HttpSecurity</strong>的构建过程中, 则会完成局部的<strong>AuthenticationManager</strong>对象以及每一个具体的过滤器的构建</p><p>​<span style="color:red;">简单来说, 这个方法主要是让我们之前的方法<strong>setFilterChainProxySecurityConfigurer</strong>初始化的<strong>WebSecurity</strong>来执行<strong>build</strong>方法构建一条<strong>FilterChainProxy</strong></span></p><p>​这就是整个过滤器链的构建过程.</p><p>​</p><h2 id="4-5-如何自定义SecurityFilterChain过滤器链"><a href="#4-5-如何自定义SecurityFilterChain过滤器链" class="headerlink" title="4.5 如何自定义SecurityFilterChain过滤器链?"></a>4.5 如何自定义SecurityFilterChain过滤器链?</h2><h3 id="4-5-1-SpringSecurity配置原理"><a href="#4-5-1-SpringSecurity配置原理" class="headerlink" title="4.5.1 SpringSecurity配置原理"></a>4.5.1 SpringSecurity配置原理</h3><p>之前的章节里面我们已经介绍过了SpringSecurity配置原理, 为了能更好理解本次先回忆下:</p><p>为什么SpringSecurity在我们导入依赖后就直接有了默认的表单认证功能, 这是因为SpringSecurity帮我们导入一个配置类<strong>SpringBootWebSecurityConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootWebSecurityConfiguration</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The default configuration for web security. It relies on Spring Security&#x27;s</span><br><span class="hljs-comment"> * content-negotiation strategy to determine what sort of authentication to use. If</span><br><span class="hljs-comment"> * the user specifies their own &#123;<span class="hljs-doctag">@code</span> WebSecurityConfigurerAdapter&#125; or</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SecurityFilterChain&#125; bean, this will back-off completely and the users</span><br><span class="hljs-comment"> * should specify all the bits that they want to configure as part of the custom</span><br><span class="hljs-comment"> * security configuration.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnDefaultWebSecurity</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityFilterChainConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Order(SecurityProperties.BASIC_AUTH_ORDER)</span><br>SecurityFilterChain <span class="hljs-title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>http.authorizeRequests().anyRequest().authenticated();<br>http.formLogin();<br>http.httpBasic();<br><span class="hljs-keyword">return</span> http.build();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果我们要自定义认证配置, 我们进入注解<strong>ConditionalOnDefaultWebSecurity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultWebSecurityCondition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AllNestedConditions</span> &#123;<br><br><span class="hljs-meta">@ConditionalOnClass(&#123; SecurityFilterChain.class, HttpSecurity.class &#125;)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Classes</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123;</span><br><span class="hljs-meta">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.class,</span><br><span class="hljs-meta">SecurityFilterChain.class &#125;)</span><br><span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beans</span> &#123;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现要想覆盖这个默认配置:</p><ul><li>只需要重写一个<strong>WebSecurityConfigurerAdapter</strong>然后用里面的<strong>configure(HttpSecurity http)<strong>方法构建一个</strong>SecurityFilterChain</strong></li><li>或者也可以直接构建一个<strong>SecurityFilterChain</strong></li></ul><h3 id="4-5-2-自定义SecurityFilterChain"><a href="#4-5-2-自定义SecurityFilterChain" class="headerlink" title="4.5.2 自定义SecurityFilterChain"></a>4.5.2 自定义SecurityFilterChain</h3><p>在定义之前我们发现在高版本的<strong>SpringSecurity</strong>中, 继承<strong>WebSecurityConfigurerAdapter</strong>这样的方式已经过时了, 虽然仍然可以使用但是作者已经不推荐了.<strong>自定义SecurityFilterChain的方式是作者推荐的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>        User.builder().username(<span class="hljs-string">&quot;admin&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build());<br>  &#125;<br><br>  <span class="hljs-comment">//详情可看WebSecurityConfiguration#setFilterChains、springSecurityFilterChain</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> DefaultSecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>        .anyRequest().authenticated()<br>        .and().formLogin()<br>        .successHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomSuccessHandler</span>())<br>        .and().userDetailsService(userDetailService())<br>        .csrf().disable();<br>    <span class="hljs-keyword">return</span> http.build();<br>  &#125;<br>  <br>  <span class="hljs-comment">//详情可看WebSecurityConfiguration#springSecurityFilterChain</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> web -&gt; &#123;<br>      web.ignoring().antMatchers(<span class="hljs-string">&quot;resource/**&quot;</span>);<br>    &#125;;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-我们自定义的SecurityFilterChain是如何初始化的"><a href="#4-6-我们自定义的SecurityFilterChain是如何初始化的" class="headerlink" title="4.6 我们自定义的SecurityFilterChain是如何初始化的?"></a>4.6 我们自定义的SecurityFilterChain是如何初始化的?</h2><p>如果我们像上一节一样自定义了一个<strong>SecurityFilterChain</strong>, 但是问题来了,我们配置的<strong>SecurityFilterChain</strong>是什么如何初始化的?</p><p>根据上面的讲解过使用<strong>WebSecurityConfigurerAdapter</strong>初始化流程基本一样, 但是还是有些差别的, 本次就再讲解一下:</p><ol><li>首先和继承<strong>WebSecurityConfigurerAdapter</strong>不一样, 我们是通过**@Bean<strong>注入的</strong>SecurityFilterChain<strong>中需要用的</strong>HttpSecurity**</li></ol><p>这里我们就要明确<strong>HttpSecurity</strong>是在哪儿注入进去的? 在看过初始化分析小节后, 发现是在<strong>HttpSecurityConfiguration</strong>里面</p><blockquote><p>HttpSecurityConfiguration</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpSecurityConfiguration</span> &#123;<br><br><span class="hljs-comment">//加了@Scope(&quot;prototype&quot;)表示是可以有多例, 不会直接注入到Spring, 被用到直接创建</span><br><span class="hljs-meta">@Bean(HTTPSECURITY_BEAN_NAME)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>HttpSecurity <span class="hljs-title function_">httpSecurity</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>WebSecurityConfigurerAdapter.<span class="hljs-type">LazyPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>.LazyPasswordEncoder(<br><span class="hljs-built_in">this</span>.context);<br><span class="hljs-type">AuthenticationManagerBuilder</span> <span class="hljs-variable">authenticationBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span>.DefaultPasswordEncoderAuthenticationManagerBuilder(<br><span class="hljs-built_in">this</span>.objectPostProcessor, passwordEncoder);<br>authenticationBuilder.parentAuthenticationManager(authenticationManager());<br>authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());<br><span class="hljs-type">HttpSecurity</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSecurity</span>(<span class="hljs-built_in">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());<br><span class="hljs-comment">// @formatter:off</span><br>http<br>.csrf(withDefaults())<br>.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAsyncManagerIntegrationFilter</span>())<br>.exceptionHandling(withDefaults())<br>.headers(withDefaults())<br>.sessionManagement(withDefaults())<br>.securityContext(withDefaults())<br>.requestCache(withDefaults())<br>.anonymous(withDefaults())<br>.servletApi(withDefaults())<br>.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultLoginPageConfigurer</span>&lt;&gt;());<br>http.logout(withDefaults());<br><span class="hljs-comment">// @formatter:on</span><br>applyDefaultConfigurers(http);<br><span class="hljs-keyword">return</span> http;<br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里会初始化一个默认使用<strong>HttpSecurity</strong></p><ol start="2"><li>然后在执行我们自定义的构建逻辑:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>        .anyRequest().authenticated()<br>        .and().formLogin()<br>        .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;UsernamePasswordAuthenticationFilter&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>            <span class="hljs-comment">//自定义ObjectPostProcessor</span><br>            object.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>            object.setPasswordParameter(<span class="hljs-string">&quot;pwd&quot;</span>);<br>            object.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;<br>              response.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>            &#125;);<br>            <span class="hljs-keyword">return</span> object;<br>          &#125;<br>        &#125;)<br>        .and().userDetailsService(userDetailService())<br>        .csrf().disable();<br><br>    <span class="hljs-keyword">return</span> http.build();<br>  &#125;<br></code></pre></td></tr></table></figure><p>和用<strong>WebSecurityConfigurerAdapter</strong>一样然后执行<strong>HttpSecurity</strong>的<strong>build</strong>方法就是会对其的所有配置<strong>configurers</strong>进行初始化以及配置操作, 以及最终<strong>DefaultSecurityFilterChain</strong>的构建#<strong>performBuild</strong>, 最后构建<strong>FilterChainProxy</strong></p><h2 id="4-7-SpringSecurity那么多过滤器链是如何加载进来的"><a href="#4-7-SpringSecurity那么多过滤器链是如何加载进来的" class="headerlink" title="4.7 SpringSecurity那么多过滤器链是如何加载进来的?"></a>4.7 SpringSecurity那么多过滤器链是如何加载进来的?</h2><p>每个SpringSecurity过滤器都对应的有<strong>xxxConfigurer</strong>配置类, 会给SpringSecurity的安全类比如<strong>HttpSecurity</strong>进行配置和初始化, 尤其是在<strong>configure</strong>配置里会给<strong>HttpSecurity</strong>添加进过滤器集合filters.</p><p>这里我们举个例子:<strong>HttpSecurity</strong>#<strong>formLogin</strong>, 会添加一个<strong>FormLoginConfigurer</strong>在<strong>HttpSecurity</strong>#<strong>build</strong>调用之后就会调用<strong>FormLoginConfigurer</strong>#<strong>init</strong>、<strong>configurer</strong>方法, 在<strong>configurer</strong>中就会添加过滤器并且调用 **this.objectPostProcessor.postProcess(object)**来将过滤器注入到Spring容器</p><h2 id="4-8-如何设置静态资源过滤"><a href="#4-8-如何设置静态资源过滤" class="headerlink" title="4.8 如何设置静态资源过滤?"></a>4.8 如何设置静态资源过滤?</h2><p>在一个实际项目中, 并非所有的请求都需要经过SpringSecurity过滤器, 有一些特殊的请求, 例如静态资源等, 一般来说并不需要经过SpringSecurity过滤器链, 用户如果访问这些静态资源, 直接返回对于的资源即可.</p><p>​回顾之前关于<strong>WebSecurity</strong>的讲解, 提到了它里面维护了一个<strong>ignoredRequests</strong>变量, 该变量记录的就是所有需要被忽略的请求, 这些被忽略的请求将不再经过<strong>SpringSecurity</strong>过滤器. </p><img src="/2022/01/26/SpringSecurity/image-20230323174059920.png" alt="image-20230323174059920" style="zoom:50%;"><p>​现在这些静态资源的访问不需要经过SpringSecurity过滤器, 具体配置方案如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>    users.createUser(User.withUsername(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>    <span class="hljs-keyword">return</span> users;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    web.ignoring().antMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;/images/**&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>        .anyRequest().authenticated()<br>        .and()<br>        .formLogin()<br>        .and()<br>        .csrf().disable();<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">//新版方式</span><br><span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSecurityCustomizer</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(WebSecurity web)</span> &#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/resource/**&quot;</span>);<br>      &#125;<br>    &#125;;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>​重写<strong>configure(WebSecurity)<strong>方法, 并配置需要忽略的请求,这些需要忽略的地址, 最终都会被添加到</strong>ignoredRequests</strong>集合中, 并最终以过滤器链的形式呈现出来. 换句话说, 上面的配置中一共包含了五个过滤器链: <strong>configure(WebSecurity)<strong>方法中配置的四个以及</strong>HttpSecurity</strong>中配置的一个(即:&#x2F;**).</p><h2 id="4-9-如何配置多用户认证"><a href="#4-9-如何配置多用户认证" class="headerlink" title="4.9 如何配置多用户认证"></a>4.9 如何配置多用户认证</h2><p>​在之前的章节中, 我们定义用户主要是两种方式:</p><ol><li>重写**configure(AuthenticationManagerBuilder)**方法的方式</li><li>第二种方式是定义多个数据源, 我们直接向Spring容器中注入了<strong>UserDetailsService</strong>对象</li></ol><p>​那么这两种用户定义方式有什么区别?</p><p>​根据前面的源码分析可知: 在SpringSecurity之后存在两种类型的<strong>AuthenticationManager</strong>, 一种是全局的<strong>AuthenticationManager</strong>, 另一种是局部的<strong>AuthenticationManager</strong>. 局部的<strong>AuthenticationManager</strong>由<strong>HttpSecurity</strong>进行配置, 而全局的<strong>AuthenticationManager</strong>可以不用配置, 系统会默认提供一个全局的<strong>AuthenticationManager</strong>对象, 也可以通过重写**configure(AuthenticationManagerBuilder)**方法进行全局配置</p><p>​当进行用户身份验证时, 首先会通过局部的<strong>AuthenticationManager</strong>对象进行验证, 如果验证失败, 则会调用其parent也就是全局的<strong>AuthenticationManager</strong>再次进行验证.</p><p>​所以开发者在定义用户时, 也分为两种情况, 一种是针对局部<strong>AuthenticationManager</strong>定义的用户, 另一种则是针对全局<strong>AuthenticationManager</strong>定义的用户.</p><p>​为了演示方便, 接下来的案例我们将采取<strong>InMemoryUserDetailsManager</strong>来构建用户对象.</p><p>​先来看针对局部<strong>AuthenticationManager</strong>定义的用户:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>   user.createUser(User.withUsername(<span class="hljs-string">&quot;javaboy&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).build());<br>   http.authorizeHttpRequests()<br>       .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>       .anyRequest().authenticated()<br>       .and().formLogin()<br>       .and().userDetailsService(user)<br>       .csrf().disable();<br> &#125;<br></code></pre></td></tr></table></figure><p>​在上面这段代码中, 我们基于内存来管理用户, 并向user中添加了个用户, 将配置好的users对象添加到HttpSecurity中, 也就是配置到局部的AuthenticationManager中.</p><p>​配置完成后, 启动项目. 项目启动成功后, 我们就可以javaboy&#x2F;123来登录系统了.</p><p>​值得注意的是, 当我们启动项目时, 在IDEA控制台输出的日志中可以看到如下内容:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Using</span> <span class="hljs-keyword">generated</span> <span class="hljs-keyword">security</span> <span class="hljs-keyword">password</span>: <span class="hljs-number">683311</span>a8<span class="hljs-number">-7</span>a53<span class="hljs-number">-453</span>b-b07c-aa9a665365be<br></code></pre></td></tr></table></figure><p>​系统自动提供的用户对象实际上就是往Spring容器中注册了一个<strong>InMemoryUserDetailsManager</strong>对象. 而在前面的代码中, 我们没有重写<strong>configure(AuthenticationManagerBuilder)</strong> 方法, 这意味着全局的<strong>AuthenticationManager</strong>是通过<strong>AuthenticationConfiguration</strong>#<strong>getAuthenticationManager</strong>方法自动生成的, 在生成的过程中, 会从Spring容器中查找对应的<strong>UserDetailsService</strong>实例进行配置(具体配置在<strong>InitializeUserDetailsManagerConfigurer</strong>类中)所以系统自动提供的用户实际上相当于是全局<strong>AuthenticationManager</strong>对应的用户.</p><p>​以上面的代码为例, 当我们执行登录后, SpringSecurity首先会调用局部<strong>AuthenticationManager</strong>去进行登录验证, 如果登录的用户名&#x2F;密码是javaboy&#x2F;123, 那么就直接登录成功, 否则登录失败. 当登录失败后, 会继续调用局部<strong>AuthenticationManager</strong>的parent继续进行校验, 此时如果登录的用户名&#x2F;密码是user&#x2F;683311a8-7a53-453b-b07c-aa9a665365be, 则登录成功, 否则登录失败</p><p>​这是针对局部<strong>AuthenticationManager</strong>定义的用户, 我们也可以将定义的用户配置给全局的<strong>AuthenticationManager</strong>, 由于默认的全局<strong>AuthenticationManager</strong>在配置时会从Spring容器中查找<strong>UserDetailsService</strong>实例, 所以我们如果针对全局<strong>AuthenticationManager</strong>配置用户, 只需要往Spring容器中注入一个<strong>UserDetailsService</strong>实例即可, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>  inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;javaboy&quot;</span>).password(<span class="hljs-string">&quot;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>  <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  http.authorizeHttpRequests()<br>      .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>      .anyRequest().authenticated()<br>      .and().formLogin()<br>      .and().userDetailsService(userDetailsService())<br>      .csrf().disable();<br>&#125;<br></code></pre></td></tr></table></figure><p>​配置完成后, 当我们启动项目时, 全局的<strong>AuthenticationManager</strong>在配置时会去Spring容器中查找<strong>UserDetailsService</strong>实例, 找到的就是我们自定义的<strong>UserDetailsService</strong>实例. </p><p>​当然, 开发者也可以不使用SpringSecurity提供的默认的全局<strong>AuthenticationManager</strong>对象, 而是通过重写<strong>configure(AuthenticationManagerBuilder)<strong>方法来自定义全局</strong>AuthenticationManager</strong>对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;javaboy&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>        .anyRequest().authenticated()<br>        .and().formLogin()<br>        .and()<br>        .csrf().disable();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​根据<strong>WebSecurityConfigurerAdapter</strong>的源码分析可知, 一旦我们重写了<strong>configure(AuthenticationManagerBuilder)<strong>方法, 则全局的</strong>AuthenticationManager</strong>对象将不再通过<strong>AuthenticationConfiguration</strong>#<strong>getAuthenticationManager</strong>方法来构建, 而是通过<strong>WebSecurityConfigurerAdapter</strong>中的<strong>localConfigureAuthenticationBldr</strong>变量来构建, 该变量也是我们重写的**configure(AuthenticationManagerBuilder)**方法的参数.</p><p>​配置完成后, 当我们启动项目后, 全局的<strong>AuthenticationManager</strong>在构建时会直接使用**configure(AuthenticationManagerBuilder)**方法的auth变量去构建, 使用的用户也是我们配置给auth变量的用户,使用的用户也是我们配置给auth变量的用户.</p><p>​需要注意的是, 一旦重写了<strong>configure(AuthenticationManagerBuilder)<strong>方法, 那么全局</strong>AuthenticationManager</strong>对象中使用的用户. 将以<strong>configure(AuthenticationManagerBuilder)<strong>方法中定义的用户为准. 此时, 如果我们还向Spring容器中注入了另外一个</strong>userDetailsService</strong>实例, 那么该实例中定义的用户将不会生效(因为<strong>AuthenticationConfiguration#getAuthenticationManager</strong>方法没有被调用)</p><blockquote><p>自定义多用户</p></blockquote><p>我们知道认证的过程是如果遍历<strong>AuthenticationManager</strong>的所有<strong>authenticationProvider</strong>, 如果都没有认证则遍历父类的<strong>ParentManager</strong>的<strong>authenticationProvider</strong>, 只要有一个<strong>authenticationProvider</strong>认证成功则成功,自定义多用户认证则只需要增加<strong>authenticationProvider</strong>就可以了, 下面举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br><span class="hljs-comment">//覆盖全局的AuthenticationManager</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>    daoAuthenticationProvider1.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>        User.builder().username(<span class="hljs-string">&quot;admin2&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build()));<br>    <span class="hljs-type">ProviderManager</span> <span class="hljs-variable">providerManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(daoAuthenticationProvider1);<br><br>    <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>    daoAuthenticationProvider2.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>        User.builder().username(<span class="hljs-string">&quot;admin1&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build()));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(Arrays.asList(daoAuthenticationProvider2), providerManager);<br>  &#125;<br>  <br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http.authorizeHttpRequests()<br>        .anyRequest().authenticated()<br>        .and().formLogin()<br>        .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;UsernamePasswordAuthenticationFilter&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>            <span class="hljs-comment">//自定义ObjectPostProcessor</span><br>            object.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>            object.setPasswordParameter(<span class="hljs-string">&quot;pwd&quot;</span>);<br>            object.setAuthenticationFailureHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomFailHandler</span>());<br>            object.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;<br>              response.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>            &#125;);<br>            <span class="hljs-keyword">return</span> object;<br>          &#125;<br>        &#125;)<br>        .and().exceptionHandling().accessDeniedHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomAccessDeniedHandler</span>())<br>        .and().authenticationManager(authenticationManager())<br>        .csrf().disable();<br><br>    <span class="hljs-keyword">return</span> http.build();<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-10-如何配置多个过滤器链"><a href="#4-10-如何配置多个过滤器链" class="headerlink" title="4.10 如何配置多个过滤器链"></a>4.10 如何配置多个过滤器链</h2><p>​在SpringSecurity中可以同时存在多个过滤器链, 一个<strong>WebSecurityConfigurerAdapter</strong>的实例就可以配置一条过滤器链.</p><p>​我们来看如下一个案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>    users.createUser(User.withUsername(<span class="hljs-string">&quot;javaboy&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>    <span class="hljs-keyword">return</span> users;<br>  &#125;<br><br>  <span class="hljs-meta">@Order(1)</span><br>  <span class="hljs-meta">@Configuration</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>      users.createUser(User.withUsername(<span class="hljs-string">&quot;bar&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>      http.antMatcher(<span class="hljs-string">&quot;/bar/**&quot;</span>)<br>          .authorizeHttpRequests()<br>          .anyRequest().authenticated()<br>          .and()<br>          .formLogin()<br>          .loginProcessingUrl(<span class="hljs-string">&quot;/bar/login&quot;</span>)<br>          .successForwardUrl(<span class="hljs-string">&quot;/bar/login&quot;</span>)<br>          .successHandler((req, resp, auth) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(auth);<br>            resp.getWriter().write(s);<br>          &#125;)<br>          .permitAll()<br>          .and()<br>          .csrf().disable()<br>          .userDetailsService(users);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Order(2)</span><br>  <span class="hljs-meta">@Configuration</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;javagirl&quot;</span>)<br>          .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>)<br>          .roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>      users.createUser(User.withUsername(<span class="hljs-string">&quot;foo&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>      http.antMatcher(<span class="hljs-string">&quot;/foo/**&quot;</span>)<br>          .authorizeHttpRequests()<br>          .anyRequest().authenticated()<br>          .and()<br>          .formLogin()<br>          .loginProcessingUrl(<span class="hljs-string">&quot;/foo/login&quot;</span>)<br>          .successForwardUrl(<span class="hljs-string">&quot;/foo/login&quot;</span>)<br>          .successHandler((req, resp, auth) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(auth);<br>            resp.getWriter().write(s);<br>          &#125;)<br>          .permitAll()<br>          .and()<br>          .csrf().disable()<br>          .userDetailsService(users);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​在<strong>SecurityConfig</strong>中分别定义两个静态内部类<strong>SecurityConfig01</strong>和<strong>SecurityConfig02</strong>, 两个配置类都继承自<strong>WebSecurityConfigurerAdapter</strong>, 分别配置一条过滤器链</p><p>​先来看Security01. 在Security01中, 我们设置过滤器链的拦截规则是&#x2F;bar&#x2F;*, 即如果请求路径是&#x2F;bar&#x2F;<strong>格式的, 则进入到Security01的过滤器链这进行处理. 同时我们配置了局部</strong>AuthenticationManager<strong>对应的用户是&#x2F;bar&#x2F;123, 由于没有重写configure(AuthenticationManagerBuilder)方法, 所以注册到Spring容器中的UserDetailsService将作为局部</strong>AuthenticationManager**的parent对应的用户. 换句话说, 如果登录的路径是&#x2F;bar&#x2F;login, 那么开发者可以使用bar&#x2F;123和javaboy&#x2F;123两个用户进行登录.</p><img src="/2022/01/26/SpringSecurity/image-20230323165755959.png" alt="image-20230323165755959" style="zoom:50%;"><p>​再来看SecurityConfig02. 在Security02中, 我们设置过滤器链的拦截规则是&#x2F;foo&#x2F;**, 即如果请求路径是&#x2F;foo&#x2F;**格式的, 则进入到Security02的过滤器链中进行处理, 同时我们配置了局部<strong>AuthenticationManager</strong>对应的用户是foo&#x2F;123, 由于重写了configure(AuthenticationManagerBuilder)方法, 在该方法中定义了局部AuthenticationManager的parent对应的用户, 此时注册到Spring容器中的UserDetailsService实例对于&#x2F;foo&#x2F;**过滤器链不再生效,. 换句话说, 如果登录路径是&#x2F;foo&#x2F;login, 开发者可以使用foo&#x2F;123和javagirl&#x2F;123两个用户进行登录, 而不可以使用javaboy&#x2F;123进行登录. 登录效果如下:</p><img src="/2022/01/26/SpringSecurity/image-20230323172948891.png" alt="image-20230323172948891" style="zoom:50%;"><p>​需要注意的是, 如果配置了多个过滤器链, 需要使用**@Order**注解来标记不同配置的优先级(即不同过滤器链的优先级), 数字越大优先级越低. 当请求到来时, 会 按照过滤器的优先级从高到低, 依次进行匹配.</p><h1 id="第五章-密码加密"><a href="#第五章-密码加密" class="headerlink" title="第五章 密码加密"></a>第五章 密码加密</h1><ul><li>密码为什么要加密</li><li>常见加密的解决方案</li><li><strong>PasswordEncoder</strong> 详解</li><li>优雅使用加密</li></ul><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><h3 id="5-1-1-加密意义"><a href="#5-1-1-加密意义" class="headerlink" title="5.1.1 加密意义"></a>5.1.1 加密意义</h3><p>​2011 年12月21 日，有人在网络上公开了一个包含600万个 CSDN 用户资料的数据库，数据全部为明文储存，包含用户名、密码以及注册邮箱。事件发生后 CSDN 在微博、官方网站等渠道发出了声明，解释说此数据库系2009 年备份所用，因不明原因泄漏，已经向警方报<br>案，后又在官网发出了公开道歉信。在接下来的十多天里，金山、网易、京东、当当、新浪等多家公司被卷入到这次事件中。整个事件中最触目惊心的莫过于 CSDN 把用户密码明文存储，由于很多用户是多个网站共用一个密码，因此一个网站密码泄漏就会造成很大的安全隐患。由于有了这么多前车之鉴，我们现在做系统时，密码都要加密处理。</p><p>在前面的案例中，凡是涉及密码的地方，我们都采用明文存储，在实际项目中这肯定是不可取的，因为这会带来极高的安全风险。在企业级应用中，密码不仅需要加密，还需要加<code>盐</code>，最大程度地保证密码安全。</p><h3 id="5-1-2-常见方案"><a href="#5-1-2-常见方案" class="headerlink" title="5.1.2 常见方案"></a>5.1.2 常见方案</h3><h4 id="Hash-算法"><a href="#Hash-算法" class="headerlink" title="Hash 算法"></a>Hash 算法</h4><p>​最早我们使用类似 SHA-256 、SHA-512 、MD5等这样的单向 Hash 算法。用户注册成功后，保存在数据库中不再是用户的明文密码，而是经过 SHA-256 加密计算的一个字行串，当用户进行登录时，用户输入的明文密码用 SHA-256 进行加密，加密完成之后，再和存储在数据库中的密码进行比对，进而确定用户登录信息是否有效。如果系统遭遇攻击，最多也只是存储在数据库中的密文被泄漏。</p><p>​这样就绝对安全了吗？由于彩虹表这种攻击方式的存在以及随着计算机硬件的发展，每秒执行数十亿次 HASH计算己经变得轻轻松松，这意味着即使给密码加密加盐也不再安全。</p><p>参考: <a href="https://baike.baidu.com/item/%E5%BD%A9%E8%99%B9%E8%A1%A8/689313?fr=aladdin">彩虹表</a></p><h4 id="单向自适应函数"><a href="#单向自适应函数" class="headerlink" title="单向自适应函数"></a>单向自适应函数<Adaptive one-way functions></Adaptive></h4><p>在Spring Security 中，我们现在是用一种自适应单向函数 (Adaptive One-way Functions)来处理密码问题，这种自适应单向函数在进行密码匹配时，会有意占用大量系统资源（例如CPU、内存等），这样可以增加恶意用户攻击系统的难度。在Spring Securiy 中，开发者可以通过 bcrypt、PBKDF2、sCrypt 以及 argon2 来体验这种自适应单向函数加密。由于自适应单向函数有意占用大量系统资源，因此每个登录认证请求都会大大降低应用程序的性能，但是 Spring Secuity 不会采取任何措施来提高密码验证速度，因为它正是通过这种方式来增强系统的安全性。</p><p>参考 1: <a href="https://byronhe.gitbooks.io/libsodium/content/password_hashing/">https://byronhe.gitbooks.io/libsodium/content/password_hashing/</a></p><p>参考 2: <a href="https://github.com/xitu/gold-miner/blob/master/TODO1/password-hashing-pbkdf2-scrypt-bcrypt-and-argon2.md">https://github.com/xitu/gold-miner/blob/master/TODO1/password-hashing-pbkdf2-scrypt-bcrypt-and-argon2.md</a></p><ul><li><p>BCryptPasswordEncoder</p><p>BCryptPasswordEncoder 使用 bcrypt 算法对密码进行加密，为了提高密码的安全性，bcrypt算法故意降低运行速度，以增强密码破解的难度。同时 BCryptP asswordEncoder “为自己带盐”开发者不需要额外维护一个“盐” 字段，使用 BCryptPasswordEncoder 加密后的字符串就已经“带盐”了，即使相同的明文每次生成的加密字符串都不相同。</p></li><li><p>Argon2PasswordEncoder</p><p>Argon2PasswordEncoder 使用 Argon2 算法对密码进行加密，Argon2 曾在 Password Hashing Competition 竞赛中获胜。为了解决在定制硬件上密码容易被破解的问题，Argon2也是故意降低运算速度，同时需要大量内存，以确保系统的安全性。</p></li><li><p>Pbkdf2PasswordEncoder</p><p>Pbkdf2PasswordEncoder 使用 PBKDF2 算法对密码进行加密，和前面几种类似，PBKDF2</p><p>算法也是一种故意降低运算速度的算法，当需要 FIPS (Federal Information Processing Standard,美国联邦信息处理标准）认证时，PBKDF2 算法是一个很好的选择。</p></li><li><p>SCryptPasswordEncoder</p><p>SCryptPasswordEncoder 使用scrypt 算法对密码进行加密，和前面的几种类似，serypt 也是一种故意降低运算速度的算法，而且需要大量内存。</p></li></ul><h2 id="5-2-PasswordEncoder"><a href="#5-2-PasswordEncoder" class="headerlink" title="5.2 PasswordEncoder"></a>5.2 PasswordEncoder</h2><p>通过对认证流程源码分析得知，实际密码比较是由PasswordEncoder完成的，因此只需要使用PasswordEncoder 不同实现就可以实现不同方式加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br>String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span>;<br><span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">upgradeEncoding</span><span class="hljs-params">(String encodedPassword)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>encode 用来进行明文加密的</li><li>matches 用来比较密码的方法</li><li>upgradeEncoding 用来给密码进行升级的方法</li></ul><p>默认提供加密算法如下:</p><p><img src="/2022/01/26/SpringSecurity/image-20220127162622771.png" alt="image-20220127162622771"></p><p><img src="/2022/01/26/SpringSecurity/image-20220127162759461.png" alt="image-20220127162759461"></p><h2 id="5-3-DelegatingPasswordEncoder"><a href="#5-3-DelegatingPasswordEncoder" class="headerlink" title="5.3 DelegatingPasswordEncoder"></a>5.3 DelegatingPasswordEncoder</h2><p>根据上面 PasswordEncoder的介绍，可能会以为 Spring security 中默认的密码加密方案应该是四种自适应单向加密函数中的一种，其实不然，在 spring Security 5.0之后，默认的密码加密方案其实是 DelegatingPasswordEncoder。从名字上来看，DelegatingPaswordEncoder 是一个代理类，而并非一种全新的密码加密方案，DeleggtinePasswordEncoder 主要用来代理上面介绍的不同的密码加密方案。为什么采DelegatingPasswordEncoder 而不是某一个具体加密方式作为默认的密码加密方案呢？主要考虑了如下两方面的因素：</p><ul><li><p>兼容性：使用 DelegatingPasswrordEncoder 可以帮助许多使用旧密码加密方式的系统顺利迁移到 Spring security 中，它允许在同一个系统中同时存在多种不同的密码加密方案。</p></li><li><p>便捷性：密码存储的最佳方案不可能一直不变，如果使用 DelegatingPasswordEncoder作为默认的密码加密方案，当需要修改加密方案时，只需要修改很小一部分代码就可以实现。</p></li></ul><h4 id="5-3-1-DelegatingPasswordEncoder源码"><a href="#5-3-1-DelegatingPasswordEncoder源码" class="headerlink" title="5.3.1 DelegatingPasswordEncoder源码"></a>5.3.1 DelegatingPasswordEncoder源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegatingPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br>  ....<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>encode 用来进行明文加密的</li><li>matches 用来比较密码的方法</li><li>upgradeEncoding 用来给密码进行升级的方法</li></ul><h4 id="5-3-2-PasswordEncoderFactories源码"><a href="#5-3-2-PasswordEncoderFactories源码" class="headerlink" title="5.3.2 PasswordEncoderFactories源码"></a>5.3.2 PasswordEncoderFactories源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PasswordEncoder <span class="hljs-title function_">createDelegatingPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">encodingId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bcrypt&quot;</span>;<br>Map&lt;String, PasswordEncoder&gt; encoders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>encoders.put(encodingId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>());<br>encoders.put(<span class="hljs-string">&quot;ldap&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.LdapShaPasswordEncoder());<br>encoders.put(<span class="hljs-string">&quot;MD4&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.Md4PasswordEncoder());<br>encoders.put(<span class="hljs-string">&quot;MD5&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="hljs-string">&quot;MD5&quot;</span>));<br>encoders.put(<span class="hljs-string">&quot;noop&quot;</span>, org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());<br>encoders.put(<span class="hljs-string">&quot;pbkdf2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pbkdf2PasswordEncoder</span>());<br>encoders.put(<span class="hljs-string">&quot;scrypt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SCryptPasswordEncoder</span>());<br>encoders.put(<span class="hljs-string">&quot;SHA-1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="hljs-string">&quot;SHA-1&quot;</span>));<br>encoders.put(<span class="hljs-string">&quot;SHA-256&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="hljs-string">&quot;SHA-256&quot;</span>));<br>encoders.put(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.crypto.password.StandardPasswordEncoder());<br>encoders.put(<span class="hljs-string">&quot;argon2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Argon2PasswordEncoder</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4-如何使用-PasswordEncoder"><a href="#5-4-如何使用-PasswordEncoder" class="headerlink" title="5.4 如何使用 PasswordEncoder"></a>5.4 如何使用 PasswordEncoder</h2><ul><li>查看WebSecurityConfigurerAdapter类中源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br><span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br>LazyPasswordEncoder(ApplicationContext applicationContext) &#123;<br><span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().encode(rawPassword);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().matches(rawPassword, encodedPassword);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">upgradeEncoding</span><span class="hljs-params">(String encodedPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().upgradeEncoding(encodedPassword);<br>&#125;<br><br><span class="hljs-keyword">private</span> PasswordEncoder <span class="hljs-title function_">getPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.passwordEncoder != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.passwordEncoder;<br>&#125;<br><span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> getBeanOrNull(PasswordEncoder.class);<br><span class="hljs-keyword">if</span> (passwordEncoder == <span class="hljs-literal">null</span>) &#123;<br>passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();<br>&#125;<br><span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br><span class="hljs-keyword">return</span> passwordEncoder;<br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">getBeanOrNull</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.applicationContext.getBean(type);<br>&#125;<br><span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码分析得知如果在工厂中指定了PasswordEncoder，就会使用指定PasswordEncoder，否则就会使用默认DelegatingPasswordEncoder。</p><h2 id="5-5-密码加密实战"><a href="#5-5-密码加密实战" class="headerlink" title="5.5 密码加密实战"></a>5.5 密码加密实战</h2><ul><li>测试生成的密码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//1.BCryptPasswordEncoder</span><br>  <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">bCryptPasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>  System.out.println(bCryptPasswordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>));<br><br>  <span class="hljs-comment">//2.Pbkdf2PasswordEncoder</span><br>  <span class="hljs-type">Pbkdf2PasswordEncoder</span> <span class="hljs-variable">pbkdf2PasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pbkdf2PasswordEncoder</span>();<br>  System.out.println(pbkdf2PasswordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>));<br><br>  <span class="hljs-comment">//3.SCryptPasswordEncoder //需要额外引入依赖</span><br>  <span class="hljs-type">SCryptPasswordEncoder</span> <span class="hljs-variable">sCryptPasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SCryptPasswordEncoder</span>();<br>  System.out.println(sCryptPasswordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>));<br><br>  <span class="hljs-comment">//4.Argon2PasswordEncoder //需要额外引入依赖</span><br>  <span class="hljs-type">Argon2PasswordEncoder</span> <span class="hljs-variable">argon2PasswordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Argon2PasswordEncoder</span>();<br>  System.out.println(argon2PasswordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用固定密码加密方案</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>     <span class="hljs-meta">@Bean</span><br>     <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">BcryptPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>     &#125;<br>   <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;$2a$10$WGFkRsZC0kzafTKOPcWONeLvNvg2jqd3U09qd5gjJGSHE5b0yoy6a&quot;</span>).roles(<span class="hljs-string">&quot;xxx&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用灵活密码加密方案</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>   <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;&#123;bcrypt&#125;$2a$10$WGFkRsZC0kzafTKOPcWONeLvNvg2jqd3U09qd5gjJGSHE5b0yoy6a&quot;</span>).roles(<span class="hljs-string">&quot;xxx&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-6-密码自动升级"><a href="#5-6-密码自动升级" class="headerlink" title="5.6 密码自动升级"></a>5.6 密码自动升级</h2><p>推荐使用DelegatingPasswordEncoder 的另外一个好处就是自动进行密码加密方案的升级，这个功能在整合一些老的系统时非常有用。</p><ul><li>准备库表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>(<br>    `id`                    <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `username`              <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `password`              <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `enabled`               tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `accountNonExpired`     tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `accountNonLocked`      tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `credentialsNonExpired` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">-- 角色表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role`<br>(<br>    `id`      <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name`    <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `name_zh` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">-- 用户角色关系表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role`<br>(<br>    `id`  <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `uid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `rid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    KEY   `uid` (`uid`),<br>    KEY   `rid` (`rid`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入用户数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;blr&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 插入角色数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ROLE_product&#x27;</span>, <span class="hljs-string">&#x27;商品管理员&#x27;</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ROLE_admin&#x27;</span>, <span class="hljs-string">&#x27;系统管理员&#x27;</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ROLE_user&#x27;</span>, <span class="hljs-string">&#x27;用户管理员&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 插入用户角色数据</span><br><span class="hljs-keyword">BEGIN</span>;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role`<br>  <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><ul><li>整合 mybatis</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.baizhi.entity</span><br><span class="hljs-attr">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><ul><li>编写实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Boolean enabled;<br>    <span class="hljs-keyword">private</span> Boolean accountNonExpired;<br>    <span class="hljs-keyword">private</span> Boolean accountNonLocked;<br>    <span class="hljs-keyword">private</span> Boolean credentialsNonExpired;<br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>            authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role.getName()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountNonExpired;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccountNonExpired</span><span class="hljs-params">(Boolean accountNonExpired)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accountNonExpired = accountNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountNonLocked;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccountNonLocked</span><span class="hljs-params">(Boolean accountNonLocked)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accountNonLocked = accountNonLocked;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> credentialsNonExpired;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCredentialsNonExpired</span><span class="hljs-params">(Boolean credentialsNonExpired)</span> &#123;<br>        <span class="hljs-built_in">this</span>.credentialsNonExpired = credentialsNonExpired;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> enabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEnabled</span><span class="hljs-params">(Boolean enabled)</span> &#123;<br>        <span class="hljs-built_in">this</span>.enabled = enabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoles</span><span class="hljs-params">(List&lt;Role&gt; roles)</span> &#123;<br>        <span class="hljs-built_in">this</span>.roles = roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String nameZh;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameZh</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nameZh;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNameZh</span><span class="hljs-params">(String nameZh)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nameZh = nameZh;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    List&lt;Role&gt; <span class="hljs-title function_">getRolesByUid</span><span class="hljs-params">(Integer uid)</span>;<br>    User <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span>;<br>  Integer <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写 mapper</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.UserDao&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select id,<br>               username,<br>               password,<br>               enabled,<br>               accountNonExpired,<br>               accountNonLocked,<br>               credentialsNonExpired<br>        from `user`<br>        where username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRolesByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Role&quot;</span>&gt;</span><br>        select r.id,<br>               r.name,<br>               r.name_zh nameZh<br>        from `role` r,<br>             `user_role` ur<br>        where r.id = ur.rid<br>          and ur.uid = #&#123;uid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updatePassword&quot;</span>&gt;</span><br>      update `user` set password=#&#123;password&#125;<br>      where username=#&#123;username&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编写service 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span>,UserDetailsPasswordService &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetailService</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(user)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户不存在!&quot;</span>);<br>        &#125;<br>        user.setRoles(userDao.getRolesByUid(user.getId()));<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>  <br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UserDetails user, String newPassword)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDao.updatePassword(user.getUsername(), newPassword);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>            ((User) user).setPassword(newPassword);<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>配置securityconfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MyUserDetailService myUserDetailService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityConfig</span><span class="hljs-params">(MyUserDetailService myUserDetailService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myUserDetailService = myUserDetailService;<br>    &#125;<br>      <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//查询数据库</span><br>        auth.userDetailsService(myUserDetailService);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动项目测试</li></ul><h2 id="5-7-是谁的PasswordEncoder"><a href="#5-7-是谁的PasswordEncoder" class="headerlink" title="5.7 是谁的PasswordEncoder"></a>5.7 是谁的PasswordEncoder</h2><p>​根据前面小节的介绍，大家知道<strong>PasswordEncoder</strong> 做密码校验主要是在 <strong>DaoAuthenticationProvider</strong> 中完成的;<strong>DaoAuthenticationProvider</strong> 是被某 一个<strong>ProviderManager</strong> 管理的;而<strong>AuthenticationManager</strong> (即<strong>ProviderManager</strong> )实例有全局和局部之分，那么如果开发者配置了<strong>PasswordEncoder</strong> 实例，是在全局的<strong>AuthenticationManager</strong> 中使用，还是在局部的<strong>AuthenticationManager</strong> 中使用呢?</p><p>​我们先来看<strong>DaoAuthenticationProvider</strong> 中的构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DaoAuthenticationProvider</span><span class="hljs-params">()</span> &#123;<br>setPasswordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPasswordEncoder</span><span class="hljs-params">(PasswordEncoder passwordEncoder)</span> &#123;<br>Assert.notNull(passwordEncoder, <span class="hljs-string">&quot;passwordEncoder cannot be null&quot;</span>);<br><span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br><span class="hljs-built_in">this</span>.userNotFoundEncodedPassword = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到，当系统创建 一个<strong>DaoAuthenticationProvider</strong> 实例的时候，就会自动调用 <strong>setPasswordEncoder</strong> 方法来指定一个默认的 <strong>PasswordEncoder</strong>，默认的 <strong>PasswordEncoder</strong> 实例就是<strong>DelegatingPasswordEncoder</strong>。</p><p>​在全局的 <strong>AuthenticationManager</strong> 创建过程中，在<strong>InitializeUserDetailsManagerConfigurer</strong>#<strong>configure</strong> 方法中，有如下 一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> getBeanOrNull(PasswordEncoder.class);<br><span class="hljs-type">UserDetailsPasswordService</span> <span class="hljs-variable">passwordManager</span> <span class="hljs-operator">=</span> getBeanOrNull(UserDetailsPasswordService.class);<br><span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>provider.setUserDetailsService(userDetailsService);<br><span class="hljs-keyword">if</span> (passwordEncoder != <span class="hljs-literal">null</span>) &#123;<br>provider.setPasswordEncoder(passwordEncoder);<br>&#125;<br><span class="hljs-keyword">if</span> (passwordManager != <span class="hljs-literal">null</span>) &#123;<br>provider.setUserDetailsPasswordService(passwordManager);<br>&#125;<br>provider.afterPropertiesSet();<br>auth.authenticationProvider(provider);<br></code></pre></td></tr></table></figure><p>​首先调用<strong>getBeanOrNull</strong> 方法，从Spring 容器中获取 一个<strong>PaswordEncoder</strong> 实例;然后创 建一个<strong>DaoAuthenticationProvider</strong> 实例，如果<strong>passwordEncoder</strong> 不为null，就设置给<strong>provider</strong>实例。从这段代码中可以看到，在上一小节中我们注册到Spring 容器的<strong>PasswordEncoder</strong> 实例， 可以在这里被获取到并设置给<strong>provider</strong>。如果我们没有向Spring 容器中注册<strong>PasswordEncoder</strong>实例，则<strong>provider</strong> 中使用默认的<strong>DelegatingPasswordEncoder</strong>。</p><p>​根据前面小节的介绍可知，全局 <strong>AuthenticationManager</strong> 也有可能是通过<strong>WebSecurityConfigurerAdapter</strong> 中的 <strong>localConfigureAuthenticationBldr</strong> 变量来构建的， <strong>IocalConfigureAuthenticationBldr</strong> 变量在构建 <strong>AuthenticationManager</strong> 实例时，使用的是 <strong>LazyPasswordEncoder</strong>，就是一个懒加载的<strong>PasswordEncoder</strong> 实例，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br><br><span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>LazyPasswordEncoder(ApplicationContext applicationContext) &#123;<br><span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().encode(rawPassword);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().matches(rawPassword, encodedPassword);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">upgradeEncoding</span><span class="hljs-params">(String encodedPassword)</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().upgradeEncoding(encodedPassword);<br>&#125;<br><br><span class="hljs-keyword">private</span> PasswordEncoder <span class="hljs-title function_">getPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.passwordEncoder != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.passwordEncoder;<br>&#125;<br><span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> getBeanOrNull(<span class="hljs-built_in">this</span>.applicationContext, PasswordEncoder.class);<br><span class="hljs-keyword">if</span> (passwordEncoder == <span class="hljs-literal">null</span>) &#123;<br>passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();<br>&#125;<br><span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br><span class="hljs-keyword">return</span> passwordEncoder;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> getPasswordEncoder().toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到，在<strong>LazyPasswordEncoder</strong> 中，使用<strong>getPasswordEncoder</strong> 方法去获取一个<strong>PasswordEncoder</strong> 实例，具体的获取过程就是去Spring 容器中查找，找到了就直接使用，没找到的话， 则调用 <strong>PasswordEncoderFactories.createDelegatingPasswordEncoder()</strong> 方法生成默认的<strong>DelegatingPasswordEncoder</strong>.</p><p>​在<strong>WebSecurityConfigurerAdapter</strong> 中，用来构建局部 <strong>AuthenticationManager</strong> 实例的 <strong>authenticationBuilder</strong> 变量也用的是<strong>LazyPasswordEncoder</strong>， 这里不再赘述。</p><p>​经过上面的分析可知 ，如 果开发者向 <strong>Spring</strong> 容器中注册了一个<strong>PasswordEncoder</strong>实 例 ， 那么无论是全局的 <strong>AuthenticationManager</strong> 还是局部的 <strong>AuthenticationManager</strong> ，都将使用该 <strong>PasswordEncoder</strong> 实例:如果开发者没有提供任何<strong>PasswordEncoder</strong> 实例，那么无论是全局的 <strong>AuthenticationManager</strong> 还是局部的 <strong>AuthenticationManager</strong> ，都将使用 <strong>DelegatingPasswordEncoder</strong> 实例。</p><h1 id="第六章-Jwt-SpringSecurity实战"><a href="#第六章-Jwt-SpringSecurity实战" class="headerlink" title="第六章 Jwt + SpringSecurity实战"></a>第六章 Jwt + SpringSecurity实战</h1><h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局异常处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>  <span class="hljs-meta">@ResponseStatus(HttpStatus.FORBIDDEN)</span><br>  <span class="hljs-meta">@ExceptionHandler(value = AccessDeniedException.class)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handler</span><span class="hljs-params">(AccessDeniedException e)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;security权限不足：----------------&#123;&#125;&quot;</span>, e.getMessage());<br>    <span class="hljs-keyword">return</span> Result<br>        .fail(<span class="hljs-string">&quot;权限不足&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span><br>  <span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handler</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;实体校验异常：----------------&#123;&#125;&quot;</span>, e.getMessage());<br>    <span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> e.getBindingResult();<br>    <span class="hljs-type">ObjectError</span> <span class="hljs-variable">objectError</span> <span class="hljs-operator">=</span> bindingResult.getAllErrors().stream().findFirst().get();<br>    <span class="hljs-keyword">return</span> Result.fail(objectError.getDefaultMessage());<br>  &#125;<br><br>  <span class="hljs-meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span><br>  <span class="hljs-meta">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handler</span><span class="hljs-params">(IllegalArgumentException e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;Assert异常：----------------&#123;&#125;&quot;</span>, e.getMessage());<br>    <span class="hljs-keyword">return</span> Result.fail(e.getMessage());<br>  &#125;<br><br>  <span class="hljs-meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span><br>  <span class="hljs-meta">@ExceptionHandler(value = RuntimeException.class)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handler</span><span class="hljs-params">(RuntimeException e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;运行时异常：----------------&#123;&#125;&quot;</span>, e);<br>    <span class="hljs-keyword">return</span> Result.fail(e.getMessage());<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> MD5加密工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gaozhe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/6 下午8:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String strSrc)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">char</span> hexChars[] = &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>,<br>                    <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>&#125;;<br>            <span class="hljs-type">byte</span>[] bytes = strSrc.getBytes();<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            md.update(bytes);<br>            bytes = md.digest();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> bytes.length;<br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[j * <span class="hljs-number">2</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> bytes[i];<br>                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>                chars[k++] = hexChars[b &amp; <span class="hljs-number">0xf</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;MD5加密出错！！+&quot;</span> + e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DefaultPasswordEncoder"><a href="#DefaultPasswordEncoder" class="headerlink" title="DefaultPasswordEncoder"></a>DefaultPasswordEncoder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 默认密码编码器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gaozhe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/2/6 下午8:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultPasswordEncoder</span><span class="hljs-params">(<span class="hljs-type">int</span> strength)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 采用MD5加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rawPassword 原生密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> md5编码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> &#123;<br>        <span class="hljs-keyword">return</span> MD5.encrypt(rawPassword.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 进行密码对比</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rawPassword     原生密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encodedPassword 加密后的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> &#123;<br>        <span class="hljs-keyword">return</span> encodedPassword.equals(MD5.encrypt(rawPassword.toString()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>security配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> DefaultPasswordEncoder <span class="hljs-title function_">defaultPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPasswordEncoder</span>();<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="Token工具类"><a href="#Token工具类" class="headerlink" title="Token工具类"></a>Token工具类</h3><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jwt--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入fastjson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.58<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWTCreator;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWTVerifier;<br><span class="hljs-keyword">import</span> com.auth0.jwt.algorithms.Algorithm;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 封装Token工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gaozhe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/1/31 上午10:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIN_KEY_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sub&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIN_KEY_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created&quot;</span>;<br><br><br>  <span class="hljs-keyword">private</span> String sign;<br><br>  <span class="hljs-keyword">private</span> Integer expiration;<br><br>  <span class="hljs-keyword">private</span> String header;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据负载返回token对象</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> map payload</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> token</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>    JWTCreator.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> JWT.create();<br>    builder.withExpiresAt(generateExpirationDate());<br>    map.forEach((k, v) -&gt; &#123;<br>      builder.withClaim(k, JSON.toJSONString(v));<br>    &#125;);<br>    <span class="hljs-keyword">return</span> builder.sign(Algorithm.HMAC512(sign));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Token过期时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">generateExpirationDate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1000</span> * expiration + System.currentTimeMillis());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取负载解码器</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 负载解码器</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> DecodedJWT <span class="hljs-title function_">getDecode</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span> JWT.require(Algorithm.HMAC512(sign)).build();<br>    <span class="hljs-keyword">return</span> verifier.verify(token);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取过期时间</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 过期时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getExpiredDateFromToken</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> getDecode(token);<br>    <span class="hljs-keyword">return</span> decode.getExpiresAt();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取payload</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 负载</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayloadFromToken</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> getDecode(token);<br>    <span class="hljs-keyword">return</span> decode.getPayload();<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * token是否过期</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">expires</span> <span class="hljs-operator">=</span> getExpiredDateFromToken(token);<br>    <span class="hljs-keyword">return</span> expires.before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取用户名</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 获取用户名</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsernameFromToken</span><span class="hljs-params">(String token)</span> &#123;<br>    String username;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> getDecode(token);<br>      username = decode.getSubject();<br>      <span class="hljs-keyword">if</span> (Objects.isNull(username)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      username = username.substring(<span class="hljs-number">1</span>, username.length() - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      username = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> username;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断token是否过期</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token       token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> userDetails userDetails</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateToken</span><span class="hljs-params">(String token, UserDetails userDetails)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromToken(token);<br>    <span class="hljs-keyword">return</span> StringUtils.equalsIgnoreCase(username, userDetails.getUsername()) &amp;&amp; !isTokenExpired(<br>        token);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据user信息返回token</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> userDetails userDetails</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> token</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>    claims.put(CLAIN_KEY_USERNAME, userDetails.getUsername());<br>    claims.put(CLAIN_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> generateToken(claims);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据username生成token</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> token</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>    claims.put(CLAIN_KEY_USERNAME, username);<br>    claims.put(CLAIN_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> generateToken(claims);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * token是否需要刷新</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> token token对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> true/false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRefresh</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-keyword">return</span> !isTokenExpired(token);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refreshToken</span><span class="hljs-params">(String token)</span> &#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    map.put(CLAIN_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> generateToken(map);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>jwt配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jwt:</span><br>  <span class="hljs-comment"># 加密秘钥</span><br>  <span class="hljs-attr">sign:</span> <span class="hljs-string">f4e2e52034348f86b67cde581c0f9eb5</span><br>  <span class="hljs-comment"># token有效时长，7天，单位秒</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">604800</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-string">Authorization</span><br></code></pre></td></tr></table></figure><h3 id="公共返回类"><a href="#公共返回类" class="headerlink" title="公共返回类"></a>公共返回类</h3><blockquote><p>ResultCodeEnum</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 统一返回结果状态信息类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultCodeEnum</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;成功&quot;</span>),<br>    FAIL(<span class="hljs-number">201</span>, <span class="hljs-string">&quot;失败&quot;</span>),<br>    PARAM_ERROR( <span class="hljs-number">202</span>, <span class="hljs-string">&quot;参数不正确&quot;</span>),<br>    SERVICE_ERROR(<span class="hljs-number">203</span>, <span class="hljs-string">&quot;服务异常&quot;</span>),<br>    DATA_ERROR(<span class="hljs-number">204</span>, <span class="hljs-string">&quot;数据异常&quot;</span>),<br>    DATA_UPDATE_ERROR(<span class="hljs-number">205</span>, <span class="hljs-string">&quot;数据版本异常&quot;</span>),<br><br>    LOGIN_AUTH(<span class="hljs-number">208</span>, <span class="hljs-string">&quot;未登陆&quot;</span>),<br>    PERMISSION(<span class="hljs-number">209</span>, <span class="hljs-string">&quot;没有权限&quot;</span>),<br><br>    CODE_ERROR(<span class="hljs-number">210</span>, <span class="hljs-string">&quot;验证码错误&quot;</span>),<br><span class="hljs-comment">//    LOGIN_MOBLE_ERROR(211, &quot;账号不正确&quot;),</span><br>    LOGIN_DISABLED_ERROR(<span class="hljs-number">212</span>, <span class="hljs-string">&quot;改用户已被禁用&quot;</span>),<br>    REGISTER_MOBLE_ERROR(<span class="hljs-number">213</span>, <span class="hljs-string">&quot;手机号已被使用&quot;</span>),<br>    LOGIN_AURH(<span class="hljs-number">214</span>, <span class="hljs-string">&quot;需要登录&quot;</span>),<br>    LOGIN_ACL(<span class="hljs-number">215</span>, <span class="hljs-string">&quot;没有权限&quot;</span>),<br><br>    URL_ENCODE_ERROR( <span class="hljs-number">216</span>, <span class="hljs-string">&quot;URL编码失败&quot;</span>),<br>    ILLEGAL_CALLBACK_REQUEST_ERROR( <span class="hljs-number">217</span>, <span class="hljs-string">&quot;非法回调请求&quot;</span>),<br>    FETCH_ACCESSTOKEN_FAILD( <span class="hljs-number">218</span>, <span class="hljs-string">&quot;获取accessToken失败&quot;</span>),<br>    FETCH_USERINFO_ERROR( <span class="hljs-number">219</span>, <span class="hljs-string">&quot;获取用户信息失败&quot;</span>),<br>    <span class="hljs-comment">//LOGIN_ERROR( 23005, &quot;登录失败&quot;),</span><br><br>    PAY_RUN(<span class="hljs-number">220</span>, <span class="hljs-string">&quot;支付中&quot;</span>),<br>    CANCEL_ORDER_FAIL(<span class="hljs-number">225</span>, <span class="hljs-string">&quot;取消订单失败&quot;</span>),<br>    CANCEL_ORDER_NO(<span class="hljs-number">225</span>, <span class="hljs-string">&quot;不能取消预约&quot;</span>),<br><br>    HOSCODE_EXIST(<span class="hljs-number">230</span>, <span class="hljs-string">&quot;医院编号已经存在&quot;</span>),<br>    NUMBER_NO(<span class="hljs-number">240</span>, <span class="hljs-string">&quot;可预约号不足&quot;</span>),<br>    TIME_NO(<span class="hljs-number">250</span>, <span class="hljs-string">&quot;当前时间不可以预约&quot;</span>),<br><br>    SIGN_ERROR(<span class="hljs-number">300</span>, <span class="hljs-string">&quot;签名错误&quot;</span>),<br>    HOSPITAL_OPEN(<span class="hljs-number">310</span>, <span class="hljs-string">&quot;医院未开通，暂时不能访问&quot;</span>),<br>    HOSPITAL_LOCK(<span class="hljs-number">320</span>, <span class="hljs-string">&quot;医院被锁定，暂时不能访问&quot;</span>),<br>    ;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultCodeEnum</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Result.java:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局统一返回结果类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value = &quot;全局统一返回结果&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回码&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(T data)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;();<br>        <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>)<br>            result.setData(data);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(T body, ResultCodeEnum resultCodeEnum)</span> &#123;<br>        Result&lt;T&gt; result = build(body);<br>        result.setCode(resultCodeEnum.getCode());<br>        result.setMessage(resultCodeEnum.getMessage());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        Result&lt;T&gt; result = build(<span class="hljs-literal">null</span>);<br>        result.setCode(code);<br>        result.setMessage(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-literal">null</span>);<br>    &#125;`<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">(T data)</span>&#123;<br>        Result&lt;T&gt; result = build(data);<br>        <span class="hljs-keyword">return</span> build(data, ResultCodeEnum.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(T data)</span>&#123;<br>        Result&lt;T&gt; result = build(data);<br>        <span class="hljs-keyword">return</span> build(data, ResultCodeEnum.FAIL);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result&lt;T&gt; <span class="hljs-title function_">message</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setMessage(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result&lt;T&gt; <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(code);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getCode().intValue() == ResultCodeEnum.SUCCESS.getCode().intValue()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="登出处理器"><a href="#登出处理器" class="headerlink" title="登出处理器"></a>登出处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JwtUtils jwtUtils;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">      Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityContextLogoutHandler</span>().logout(request, response, authentication);<br>    &#125;<br><br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    response.setHeader(jwtUtils.getHeader(), <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.ok(<span class="hljs-string">&quot;&quot;</span>);<br><br>    outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));<br><br>    outputStream.flush();<br>    outputStream.close();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>配置security</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.logout().logoutSuccessHandler(jwtLogoutSuccessHandler)<br></code></pre></td></tr></table></figure><h3 id="AuthenticationFailureHandler-认证失败处理器"><a href="#AuthenticationFailureHandler-认证失败处理器" class="headerlink" title="AuthenticationFailureHandler: 认证失败处理器"></a>AuthenticationFailureHandler: 认证失败处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> com.gz.demo.model.Result;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 认证失败处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/19 23:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">      AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.fail(exception.getMessage());<br><br>    outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));<br><br>    outputStream.flush();<br>    outputStream.close();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AuthenticationSuccessHandler-认证成功处理器"><a href="#AuthenticationSuccessHandler-认证成功处理器" class="headerlink" title="AuthenticationSuccessHandler: 认证成功处理器"></a>AuthenticationSuccessHandler: 认证成功处理器</h3><p>认证成功后需要将token返回,或设置到header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> com.gz.demo.model.Result;<br><span class="hljs-keyword">import</span> com.gz.demo.utils.JwtUtils;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 认证成功处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/19 23:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> JwtUtils jwtUtils;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">      Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-comment">// 生成jwt，并放置到请求头中</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> jwtUtils.generateToken(authentication.getName());<br>    response.setHeader(jwtUtils.getHeader(), jwt);<br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.ok(<span class="hljs-string">&quot;&quot;</span>);<br>    outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));<br>    outputStream.flush();<br>    outputStream.close();<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>security配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>LoginSuccessHandler loginSuccessHandler;<br><br><span class="hljs-meta">@Autowired</span><br>LoginFailureHandler loginFailureHandler;<br><br>...# configure代码：<br>  <br>  <br>  http.cors().and().csrf().disable()    <br>  .formLogin()      <br>  .failureHandler(loginFailureHandler)      <br>  .successHandler(loginSuccessHandler)<br></code></pre></td></tr></table></figure><h3 id="验证码异常"><a href="#验证码异常" class="headerlink" title="验证码异常"></a>验证码异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 验证码异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/19 23:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaptchaException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthenticationException</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CaptchaException</span><span class="hljs-params">(String msg)</span> &#123;<br>    <span class="hljs-built_in">super</span>(msg);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="验证码过滤器"><a href="#验证码过滤器" class="headerlink" title="验证码过滤器"></a>验证码过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;<br><span class="hljs-keyword">import</span> com.gz.demo.config.security.handler.LoginFailureHandler;<br><span class="hljs-keyword">import</span> com.gz.demo.constant.BusinessConstant;<br><span class="hljs-keyword">import</span> com.gz.demo.exception.CaptchaException;<br><span class="hljs-keyword">import</span> com.gz.demo.utils.RedisUtil;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaptchaFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  RedisUtil redisUtil;<br><br>  <span class="hljs-meta">@Resource</span><br>  LoginFailureHandler loginFailureHandler;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest httpServletRequest,</span><br><span class="hljs-params">      HttpServletResponse httpServletResponse, FilterChain filterChain)</span><br>      <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> httpServletRequest.getRequestURI();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/login&quot;</span>.equals(url) &amp;&amp; httpServletRequest.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 校验验证码</span><br>        validate(httpServletRequest);<br>      &#125; <span class="hljs-keyword">catch</span> (CaptchaException e) &#123;<br>        <span class="hljs-comment">// 交给认证失败处理器</span><br>        loginFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e);<br>      &#125;<br>    &#125;<br><br>    filterChain.doFilter(httpServletRequest, httpServletResponse);<br>  &#125;<br><br>  <span class="hljs-comment">// 校验验证码逻辑</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(HttpServletRequest httpServletRequest)</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> httpServletRequest.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> httpServletRequest.getParameter(<span class="hljs-string">&quot;token&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(code) || StringUtils.isBlank(key)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaptchaException</span>(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!code.equals(redisUtil.get(BusinessConstant.CAPTCHA_KEY + key))) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaptchaException</span>(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 一次性使用</span><br>    redisUtil.deleteKey(BusinessConstant.CAPTCHA_KEY + key);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>security配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> CaptchaFilter captchaFilter;<br><br>http...<br>.and().addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class);<br></code></pre></td></tr></table></figure><h3 id="SecurityUser-认证授权实体类"><a href="#SecurityUser-认证授权实体类" class="headerlink" title="SecurityUser: 认证授权实体类"></a>SecurityUser: 认证授权实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 认证授权实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> gzzear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/01/19 20:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Long userId;<br><br>  <span class="hljs-keyword">private</span> String password;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String username;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> accountNonExpired;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> accountNonLocked;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> credentialsNonExpired;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> enabled;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUser</span><span class="hljs-params">(Long userId, String username, String password,</span><br><span class="hljs-params">      Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;<br>    <span class="hljs-built_in">this</span>(userId, username, password, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, authorities);<br>  &#125;<br><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUser</span><span class="hljs-params">(Long userId, String username, String password, <span class="hljs-type">boolean</span> enabled,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> accountNonExpired,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> credentialsNonExpired, <span class="hljs-type">boolean</span> accountNonLocked,</span><br><span class="hljs-params">      Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;<br>    Assert.isTrue(username != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(username) &amp;&amp; password != <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;Cannot pass null or empty values to constructor&quot;</span>);<br>    <span class="hljs-built_in">this</span>.userId = userId;<br>    <span class="hljs-built_in">this</span>.username = username;<br>    <span class="hljs-built_in">this</span>.password = password;<br>    <span class="hljs-built_in">this</span>.enabled = enabled;<br>    <span class="hljs-built_in">this</span>.accountNonExpired = accountNonExpired;<br>    <span class="hljs-built_in">this</span>.credentialsNonExpired = credentialsNonExpired;<br>    <span class="hljs-built_in">this</span>.accountNonLocked = accountNonLocked;<br>    <span class="hljs-built_in">this</span>.authorities = authorities;<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authorities;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.username;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.accountNonExpired;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.accountNonLocked;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.credentialsNonExpired;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.enabled;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实现UserDetailService自定义数据源"><a href="#实现UserDetailService自定义数据源" class="headerlink" title="实现UserDetailService自定义数据源"></a>实现UserDetailService自定义数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> SysUserService sysUserService;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>    <span class="hljs-comment">//根据用户名获取用户</span><br>    <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span> sysUserService.loadUserByUserName(username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityUser</span>(sysUser.getId(), sysUser.getUsername(),<br>        sysUser.getPassword(), sysUserService.getAuthorityInfo(sysUser.getId()));<br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysUserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;SysUserMapper, SysUser&gt; <span class="hljs-keyword">implements</span><br>    <span class="hljs-title class_">SysUserService</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> SysUserMapper sysUserMapper;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SysUser <span class="hljs-title function_">loadUserByUserName</span><span class="hljs-params">(String username)</span> &#123;<br>    <span class="hljs-keyword">return</span> lambdaQuery().eq(SysUser::getUsername, username).eq(SysUser::getStatus, <span class="hljs-number">1</span>).one();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthority</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">//根据userId获取对应的角色信息</span><br>    List&lt;SysRole&gt; roles = sysUserMapper.findRolesByUserId(userId);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">roleCodes</span> <span class="hljs-operator">=</span> roles.stream().map(role -&gt; <span class="hljs-string">&quot;ROLE_&quot;</span> + role.getCode())<br>        .collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br>    <span class="hljs-comment">//根据角色id获取对应的菜单信息</span><br>    List&lt;Long&gt; roleIds = roles.stream().map(SysRole::getId).collect(Collectors.toList());<br>    List&lt;SysMenu&gt; menus = sysUserMapper.findMenusByRoleIds(roleIds);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">permissions</span> <span class="hljs-operator">=</span> menus.stream().map(SysMenu::getPerms).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br>    <span class="hljs-keyword">return</span> roleCodes.concat(permissions);<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorityInfo(Long userId) &#123;<br>    <span class="hljs-comment">//ROLE_admin,sys:user:save,sys:user:list.....</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">authorities</span> <span class="hljs-operator">=</span> getAuthority(userId);<br>     <span class="hljs-comment">// 通过内置的工具类，把权限字符串封装成GrantedAuthority列表</span><br>    <span class="hljs-keyword">return</span> AuthorityUtils.commaSeparatedStringToAuthorityList(authorities);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SysUser <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(String usernameFromToken)</span> &#123;<br>    <span class="hljs-keyword">return</span> lambdaQuery().eq(SysUser::getUsername, usernameFromToken).eq(SysUser::getStatus, <span class="hljs-number">1</span>)<br>        .one();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>配置security</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> UserDetailServiceImpl userDetailService;<br><br><br><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    auth.userDetailsService(userDetailService);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="BasicAuthenticationFilter-验证jwt-header"><a href="#BasicAuthenticationFilter-验证jwt-header" class="headerlink" title="BasicAuthenticationFilter: 验证jwt header"></a>BasicAuthenticationFilter: 验证jwt header</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasicAuthenticationFilter</span> &#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> JwtUtils jwtUtils;<br><br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> SysUserService sysUserService;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtAuthenticationFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> &#123;<br>    <span class="hljs-built_in">super</span>(authenticationManager);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">      FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> request.getHeader(jwtUtils.getHeader());<br>    <span class="hljs-keyword">if</span> (StrUtil.isBlankOrUndefined(jwt)) &#123;<br>      chain.doFilter(request, response);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">usernameFromToken</span> <span class="hljs-operator">=</span> jwtUtils.getUsernameFromToken(jwt);<br><br>    <span class="hljs-keyword">if</span> (usernameFromToken == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtException</span>(<span class="hljs-string">&quot;token 异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (jwtUtils.isTokenExpired(jwt)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtException</span>(<span class="hljs-string">&quot;token已过期&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取用户的权限等信息</span><br>    <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span> sysUserService.loadUserByUserName(usernameFromToken);<br>    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">token</span><br>        <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(usernameFromToken, <span class="hljs-literal">null</span>,<br>        sysUserService.getAuthorityInfo(sysUser.getId()));<br><br>    SecurityContextHolder.getContext().setAuthentication(token);<br><br>    chain.doFilter(request, response);<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="AuthenticationEntryPoint-jwt认证失败处理器"><a href="#AuthenticationEntryPoint-jwt认证失败处理器" class="headerlink" title="AuthenticationEntryPoint: jwt认证失败处理器"></a>AuthenticationEntryPoint: jwt认证失败处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">      AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.fail(<span class="hljs-string">&quot;请先登录&quot;</span>);<br><br>    outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));<br><br>    outputStream.flush();<br>    outputStream.close();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>配置security</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>JWTAuthenticationFilter <span class="hljs-title function_">jwtAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;   <br>  <span class="hljs-type">JWTAuthenticationFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JWTAuthenticationFilter</span>(authenticationManager());   <br>  <span class="hljs-keyword">return</span> filter;<br>&#125;<br><br> .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)<br><br> .and().addFilter(jwtAuthenticationFilter()).addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class) <span class="hljs-comment">// 登录验证码校验过滤器</span><br></code></pre></td></tr></table></figure><h3 id="AccessDeniedHandler-无权限处理器"><a href="#AccessDeniedHandler-无权限处理器" class="headerlink" title="AccessDeniedHandler: 无权限处理器"></a>AccessDeniedHandler: 无权限处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAccessDeniedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>    response.setStatus(HttpServletResponse.SC_FORBIDDEN);<br><br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.fail(accessDeniedException.getMessage());<br><br>    outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));<br><br>    outputStream.flush();<br>    outputStream.close();<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>配置security</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.exceptionHandling()<br>.authenticationEntryPoint(jwtAuthenticationEntryPoint)<br>.accessDeniedHandler(jwtAccessDeniedHandler)<br></code></pre></td></tr></table></figure><h3 id="Security配置"><a href="#Security配置" class="headerlink" title="Security配置"></a>Security配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.markerhub.security.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br>LoginFailureHandler loginFailureHandler;<br><br><span class="hljs-meta">@Autowired</span><br>LoginSuccessHandler loginSuccessHandler;<br><br><span class="hljs-meta">@Autowired</span><br>CaptchaFilter captchaFilter;<br><br><span class="hljs-meta">@Autowired</span><br>JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;<br><br><span class="hljs-meta">@Autowired</span><br>JwtAccessDeniedHandler jwtAccessDeniedHandler;<br><br><span class="hljs-meta">@Autowired</span><br>UserDetailServiceImpl userDetailService;<br><br><span class="hljs-meta">@Autowired</span><br>JwtLogoutSuccessHandler jwtLogoutSuccessHandler;<br><br><span class="hljs-meta">@Bean</span><br>JwtAuthenticationFilter <span class="hljs-title function_">jwtAuthenticationFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">JwtAuthenticationFilter</span> <span class="hljs-variable">jwtAuthenticationFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationFilter</span>(authenticationManager());<br><span class="hljs-keyword">return</span> jwtAuthenticationFilter;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br>BCryptPasswordEncoder <span class="hljs-title function_">bCryptPasswordEncoder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] URL_WHITELIST = &#123;<br><br><span class="hljs-string">&quot;/login&quot;</span>,<br><span class="hljs-string">&quot;/logout&quot;</span>,<br><span class="hljs-string">&quot;/captcha&quot;</span>,<br><span class="hljs-string">&quot;/favicon.ico&quot;</span>,<br><br>&#125;;<br><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>http.cors().and().csrf().disable()<br><br><span class="hljs-comment">// 登录配置</span><br>.formLogin()<br>.successHandler(loginSuccessHandler)<br>.failureHandler(loginFailureHandler)<br><br>.and()<br>.logout()<br>.logoutSuccessHandler(jwtLogoutSuccessHandler)<br><br><span class="hljs-comment">// 禁用session</span><br>.and()<br>.sessionManagement()<br>.sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br><br><span class="hljs-comment">// 配置拦截规则</span><br>.and()<br>.authorizeRequests()<br>.antMatchers(URL_WHITELIST).permitAll()<br>.anyRequest().authenticated()<br><br><span class="hljs-comment">// 异常处理器</span><br>.and()<br>.exceptionHandling()<br>.authenticationEntryPoint(jwtAuthenticationEntryPoint)<br>.accessDeniedHandler(jwtAccessDeniedHandler)<br><br><span class="hljs-comment">// 配置自定义的过滤器</span><br>.and()<br>.addFilter(jwtAuthenticationFilter())<br>.addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class)<br><br>;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>auth.userDetailsService(userDetailService);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Swagger2配置"><a href="#Swagger2配置" class="headerlink" title="Swagger2配置"></a>Swagger2配置</h3><blockquote><p>swagger配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Swagger2配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhoubin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                <span class="hljs-comment">//为当前包下的controller生成api文档</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.gz.yeb.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build()<br>                <span class="hljs-comment">//添加登录认证</span><br>                .securitySchemes(securitySchemes())<br>                .securityContexts(securityContexts());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;云E办接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;云E办接口文档&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;gaozhe&quot;</span>, <span class="hljs-string">&quot;http:localhost:8081/doc.html&quot;</span>, <span class="hljs-string">&quot;373795878@qq.com&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title function_">securitySchemes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//设置请求头信息</span><br>        List&lt;SecurityScheme&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ApiKey</span> <span class="hljs-variable">apiKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiKey</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Header&quot;</span>);<br>        result.add(apiKey);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title function_">securityContexts</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//设置需要登录认证的路径</span><br>        List&lt;SecurityContext&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        result.add(getContextByPath(<span class="hljs-string">&quot;/hello/.*&quot;</span>));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> SecurityContext <span class="hljs-title function_">getContextByPath</span><span class="hljs-params">(String pathRegex)</span> &#123;<br>        <span class="hljs-keyword">return</span> SecurityContext.builder()<br>                .securityReferences(defaultAuth())<br>                .forPaths(PathSelectors.regex(pathRegex))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;SecurityReference&gt; <span class="hljs-title function_">defaultAuth</span><span class="hljs-params">()</span> &#123;<br>        List&lt;SecurityReference&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">AuthorizationScope</span> <span class="hljs-variable">authorizationScope</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);<br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>[<span class="hljs-number">1</span>];<br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;<br>        result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityReference</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, authorizationScopes));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>security配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//放行静态资源</span><br>       web.ignoring().antMatchers(<br>               <span class="hljs-string">&quot;/login&quot;</span>,<br>               <span class="hljs-string">&quot;/logout&quot;</span>,<br>               <span class="hljs-string">&quot;/css/**&quot;</span>,<br>               <span class="hljs-string">&quot;/js/**&quot;</span>,<br>               <span class="hljs-string">&quot;/index.html&quot;</span>,<br>               <span class="hljs-string">&quot;/favicon.ico&quot;</span>,<br>               <span class="hljs-string">&quot;/doc.html&quot;</span>,<br>               <span class="hljs-string">&quot;/webjars/**&quot;</span>,<br>               <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>,<br>               <span class="hljs-string">&quot;/v2/api-docs/**&quot;</span><br>       );<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="第七章-RememberMe"><a href="#第七章-RememberMe" class="headerlink" title="第七章 RememberMe"></a>第七章 RememberMe</h1><ul><li>简介</li><li>基本使用</li><li>原理分析</li><li>持久化令牌</li></ul><h2 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h2><p>​RememberMe 这个功能非常常见，下图就是QQ 邮箱登录时的“记住我” 选项。提到 RememberMe，一些初学者往往会有一些误解，认为 RememberMe 功能就是把用户名&#x2F;密码用 Cookie 保存在浏览器中，下次登录时不用再次输入用户名&#x2F;密码。这个理解显然是不对的。我们这里所说的 RememberMe 是一种服务器端的行为。传统的登录方式基于 Session会话，一旦用户的会话超时过期，就要再次登录，这样太过于烦琐。如果能有一种机制，让用户会话过期之后，还能继续保持认证状态，就会方便很多，RememberMe 就是为了解决这一需求而生的。</p><p><img src="/2022/01/26/SpringSecurity/image-20220308185102746.png" alt="image-20220308185102746"></p><p>具体的实现思路就是通过 Cookie 来记录当前用户身份。当用户登录成功之后，会通过一定算法，将用户信息、时间戳等进行加密，加密完成后，通过响应头带回前端存储在cookie中，当浏览器会话过期之后，如果再次访问该网站，会自动将 Cookie 中的信息发送给服务器，服务器对 Cookie中的信息进行校验分析，进而确定出用户的身份，Cookie中所保存的用户信息也是有时效的，例如三天、一周等。</p><h2 id="7-2-基本使用"><a href="#7-2-基本使用" class="headerlink" title="7.2 基本使用"></a>7.2 基本使用</h2><h3 id="7-2-1-开始记住我"><a href="#7-2-1-开始记住我" class="headerlink" title="7.2.1 开始记住我"></a>7.2.1 开始记住我</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                <span class="hljs-comment">//...</span><br>                .and()<br>                .rememberMe() <span class="hljs-comment">//开启记住我功能</span><br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-2-使用记住我"><a href="#7-2-2-使用记住我" class="headerlink" title="7.2.2 使用记住我"></a>7.2.2 使用记住我</h3><p>可以看到一旦打开了记住我功能，登录页面中会多出一个 RememberMe 选项。</p><p><img src="/2022/01/26/SpringSecurity/image-20220308190409305.png" alt="image-20220308190409305"></p><h3 id="7-2-3-测试记住我"><a href="#7-2-3-测试记住我" class="headerlink" title="7.2.3 测试记住我"></a>7.2.3 测试记住我</h3><p>登录时勾选 <strong>RememberMe</strong> 选项，然后重启服务端之后，在测试接口是否能免登录访问。</p><h2 id="7-3-原理分析"><a href="#7-3-原理分析" class="headerlink" title="7.3 原理分析"></a>7.3 原理分析</h2><h3 id="7-3-1-RememberMeConfigurer初始化及配置"><a href="#7-3-1-RememberMeConfigurer初始化及配置" class="headerlink" title="7.3.1 RememberMeConfigurer初始化及配置"></a>7.3.1 RememberMeConfigurer初始化及配置</h3><p><img src="/2022/01/26/SpringSecurity/image-20220317194843649.png" alt="image-20220317194843649"></p><p>再了解整个<strong>Remember</strong>认证流程前, 我们首先应该了解的是**http.rememberMe()**这段代码干了什么:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> RememberMeConfigurer&lt;HttpSecurity&gt; <span class="hljs-title function_">rememberMe</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> getOrApply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeConfigurer</span>&lt;&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>再了解过滤器链初始化内幕后, 就算不用看代码就应该知道, 会往<strong>HttpSecurity</strong>的<strong>configures</strong>添加<strong>RememberMeConfigurer</strong>来初始化及配置<strong>HttpSecurity</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(H http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//验证是否自定义了rememberMeServices且重新设置了rememberMeCookieName</span><br>validateInput();<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> getKey();<br>   <span class="hljs-comment">//获取rememberMeServices</span><br><span class="hljs-type">RememberMeServices</span> <span class="hljs-variable">rememberMeServices</span> <span class="hljs-operator">=</span> getRememberMeServices(http, key);<br>   <span class="hljs-comment">//将获取rememberMeServices设置到httpSecurity的shareObjects</span><br>http.setSharedObject(RememberMeServices.class, rememberMeServices);<br>LogoutConfigurer&lt;H&gt; logoutConfigurer = http.getConfigurer(LogoutConfigurer.class);<br><span class="hljs-keyword">if</span> (logoutConfigurer != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.logoutHandler != <span class="hljs-literal">null</span>) &#123;<br>logoutConfigurer.addLogoutHandler(<span class="hljs-built_in">this</span>.logoutHandler);<br>&#125;<br>   <span class="hljs-comment">//封装RememberMeAuthenticationProvider并添加到AuthenticationManagerBuilder的authenticationProviders</span><br><span class="hljs-type">RememberMeAuthenticationProvider</span> <span class="hljs-variable">authenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationProvider</span>(key);<br>authenticationProvider = postProcess(authenticationProvider);<br>http.authenticationProvider(authenticationProvider);<br>initDefaultLoginFilter(http);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><span style="color:red;">这里<strong>getRememberMeServices</strong>的基本逻辑是如果有我们自定义的<strong>rememberMeServices</strong>则返回, 否则创建默认的<strong>TokenBasedRememberMeServices</strong></span></li><li>封装<strong>RememberMeAuthenticationProvider</strong>并添加到<strong>AuthenticationManagerBuilder</strong>的<strong>authenticationProviders</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">RememberMeAuthenticationFilter</span> <span class="hljs-variable">rememberMeFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationFilter</span>(<br>http.getSharedObject(AuthenticationManager.class), <span class="hljs-built_in">this</span>.rememberMeServices);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationSuccessHandler != <span class="hljs-literal">null</span>) &#123;<br>rememberMeFilter.setAuthenticationSuccessHandler(<span class="hljs-built_in">this</span>.authenticationSuccessHandler);<br>&#125;<br>rememberMeFilter = postProcess(rememberMeFilter);<br>http.addFilter(rememberMeFilter);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>conigure</strong>主要的逻辑是添加<strong>RememberMeAuthenticationFilter</strong></p><h3 id="7-3-2-RememberMeAuthenticationFilter"><a href="#7-3-2-RememberMeAuthenticationFilter" class="headerlink" title="7.3.2 RememberMeAuthenticationFilter"></a>7.3.2 RememberMeAuthenticationFilter</h3><p>​当我们配置了记住我功能登录传入<strong>remember-me</strong>参数后, 我们发现登录之后响应体多了个<strong>Cookie</strong>:</p><p><img src="/2022/01/26/SpringSecurity/image-20230722195828512.png" alt="image-20230722195828512"></p><p>​在讲解<strong>RemeberMeAuthenticationFilter</strong>之前, 我们先讲解下在哪设置了这个<strong>Cookie</strong>, 我们找到认证的过滤器: <strong>AbstractAuthenticationProcessingFilter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (!requiresAuthentication(request, response)) &#123;<br>chain.doFilter(request, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticationResult</span> <span class="hljs-operator">=</span> attemptAuthentication(request, response);<br><span class="hljs-keyword">if</span> (authenticationResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// return immediately as subclass has indicated that it hasn&#x27;t completed</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.sessionStrategy.onAuthentication(authenticationResult, request, response);<br><span class="hljs-comment">// Authentication success</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;<br>chain.doFilter(request, response);<br>&#125;<br>      <span class="hljs-comment">//认证成功处理</span><br>successfulAuthentication(request, response, chain, authenticationResult);<br>&#125;<br><span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException failed) &#123;<br><span class="hljs-built_in">this</span>.logger.error(<span class="hljs-string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, failed);<br>unsuccessfulAuthentication(request, response, failed);<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br><span class="hljs-comment">// Authentication failed</span><br>unsuccessfulAuthentication(request, response, ex);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain,</span><br><span class="hljs-params">Authentication authResult)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.createEmptyContext();<br>context.setAuthentication(authResult);<br>SecurityContextHolder.setContext(context);<br><span class="hljs-built_in">this</span>.securityContextRepository.saveContext(context, request, response);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Set SecurityContextHolder to %s&quot;</span>, authResult));<br>&#125;<br><span class="hljs-built_in">this</span>.rememberMeServices.loginSuccess(request, response, authResult);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eventPublisher != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InteractiveAuthenticationSuccessEvent</span>(authResult, <span class="hljs-built_in">this</span>.getClass()));<br>&#125;<br><span class="hljs-built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">Authentication successfulAuthentication)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> retrieveUserName(successfulAuthentication);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> retrievePassword(successfulAuthentication);<br><span class="hljs-comment">// If unable to find a username and password, just abort as</span><br><span class="hljs-comment">// TokenBasedRememberMeServices is</span><br><span class="hljs-comment">// unable to construct a valid token in this case.</span><br><span class="hljs-keyword">if</span> (!StringUtils.hasLength(username)) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Unable to retrieve username&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!StringUtils.hasLength(password)) &#123;<br><span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUserDetailsService().loadUserByUsername(username);<br>password = user.getPassword();<br><span class="hljs-keyword">if</span> (!StringUtils.hasLength(password)) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Unable to obtain password for user: &quot;</span> + username);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">tokenLifetime</span> <span class="hljs-operator">=</span> calculateLoginLifetime(request, successfulAuthentication);<br><span class="hljs-type">long</span> <span class="hljs-variable">expiryTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-comment">// SEC-949</span><br>expiryTime += <span class="hljs-number">1000L</span> * ((tokenLifetime &lt; <span class="hljs-number">0</span>) ? TWO_WEEKS_S : tokenLifetime);<br><span class="hljs-type">String</span> <span class="hljs-variable">signatureValue</span> <span class="hljs-operator">=</span> makeTokenSignature(expiryTime, username, password);<br>setCookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; username, Long.toString(expiryTime), signatureValue &#125;, tokenLifetime, request,<br>response);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<br><span class="hljs-string">&quot;Added remember-me cookie for user &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;, expiry: &#x27;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expiryTime) + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<span style="color:red;">记住我<strong>Cookie</strong>原来是在<strong>AbstractProcessingFilter</strong>的认证成功处理中,  大体逻辑就是生成一个<strong>token</strong>并存入<strong>Cookie</strong></span></p><p>​再回到<strong>RememberMeAuthenticationFilter</strong>, 当在SecurityConfig配置中开启了”记住我”功能之后,在进行认证时如果勾选了”记住我”选项，此时打开浏览器控制台，分析整个登录过程。首先当我们登录时，在登录请求中多了一个 <strong>RememberMe</strong> 的参数。</p><p>​我们从<strong>RememberMeConfigure</strong>初始化和配置可以了解到往<strong>HttpSecurity</strong>的<strong>filters</strong>添加了<strong>RememberMeAuthenticationFilter</strong></p><p><img src="/2022/01/26/SpringSecurity/image-20220308191736005.png" alt="image-20220308191736005"></p><p>​很显然，这个参数就是告诉服务器应该开启 <strong>RememberMe</strong>功能的。如果自定义登录页面开启 <strong>RememberMe</strong> 功能应该多加入一个一样的请求参数就可以啦。该请求会被 <code>RememberMeAuthenticationFilter</code>进行拦截然后自动登录具体参见源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>  <span class="hljs-comment">//判断登录过没, 如果登录了就不需要记住我认证, 直接放行</span><br><span class="hljs-keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage<br>.of(() -&gt; <span class="hljs-string">&quot;SecurityContextHolder not populated with remember-me token, as it already contained: &#x27;&quot;</span><br>+ SecurityContextHolder.getContext().getAuthentication() + <span class="hljs-string">&quot;&#x27;&quot;</span>));<br>chain.doFilter(request, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>  <span class="hljs-comment">//调用rememberMeServices自动认证</span><br><span class="hljs-type">Authentication</span> <span class="hljs-variable">rememberMeAuth</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.rememberMeServices.autoLogin(request, response);<br><span class="hljs-keyword">if</span> (rememberMeAuth != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Attempt authenticaton via AuthenticationManager</span><br><span class="hljs-keyword">try</span> &#123;<br>rememberMeAuth = <span class="hljs-built_in">this</span>.authenticationManager.authenticate(rememberMeAuth);<br><span class="hljs-comment">// Store to SecurityContextHolder</span><br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.createEmptyContext();<br>context.setAuthentication(rememberMeAuth);<br>SecurityContextHolder.setContext(context);<br>onSuccessfulAuthentication(request, response, rememberMeAuth);<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(() -&gt; <span class="hljs-string">&quot;SecurityContextHolder populated with remember-me token: &#x27;&quot;</span><br>+ SecurityContextHolder.getContext().getAuthentication() + <span class="hljs-string">&quot;&#x27;&quot;</span>));<br><span class="hljs-built_in">this</span>.securityContextRepository.saveContext(context, request, response);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.eventPublisher != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InteractiveAuthenticationSuccessEvent</span>(<br>SecurityContextHolder.getContext().getAuthentication(), <span class="hljs-built_in">this</span>.getClass()));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.successHandler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, rememberMeAuth);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage<br>.format(<span class="hljs-string">&quot;SecurityContextHolder not populated with remember-me token, as AuthenticationManager &quot;</span><br>+ <span class="hljs-string">&quot;rejected Authentication returned by RememberMeServices: &#x27;%s&#x27;; &quot;</span><br>+ <span class="hljs-string">&quot;invalidating remember-me token&quot;</span>, rememberMeAuth),<br>ex);<br><span class="hljs-built_in">this</span>.rememberMeServices.loginFail(request, response);<br>onUnsuccessfulAuthentication(request, response, ex);<br>&#125;<br>&#125;<br>chain.doFilter(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>请求到达过滤器之后，首先判断 <strong>SecurityContextHolder</strong> 中是否有值，没值的话表示用户尚未登录，此时调用 <strong>remeberMeServices#autoLogin</strong> 方法进行自动登录: 基本逻辑是取出请求的<strong>Cookie</strong>中的<strong>token</strong>然后验证是否一致, 如果是则返回一个<strong>RemeberMeAuthenticationToken</strong>, 否则抛出异常然后<strong>ExceptionTranslationFilter</strong>去处理异常</li><li>当自动登录成功后返回的<strong>rememberMeAuth</strong> 不为null 时，表示自动登录成功，此时调用<strong>authenticationManager</strong>#<strong>authenticate</strong> 方法对 <strong>key</strong> 进行校验，并且将登录成功的用户信息保存到 <strong>SecurityContextHolder</strong> 对象中，然后调用登录成功回调，并发布登录成功事件。需要注意的是，登录成功的回调并不包含 <strong>RememberMeServices</strong> 中的 <strong>loginSuccess</strong> 方法。</li><li>如果自动登录失败，则调用 <strong>remenberMeServices#loginFail</strong>方法处理登录失败回调。<strong>onUnsuccessfulAuthentication</strong> 和 <strong>onSuccessfulAuthentication</strong> 都是该过滤器中定义的空方法，并没有任何实现这就是 <strong>RememberMeAuthenticationFilter</strong> 过滤器所做的事情，成功将 <strong>RememberMeServices</strong>的服务集成进来。</li></ol><p>​<span style="color:red;">注意: 这里<strong>rememberMeServices#autoLogin</strong>返回的<strong>RemeberMeAuthenticationToken</strong>只能由<strong>RemeberMeAuthenticationProvider</strong>处理, 而<strong>RemeberMeAuthenticationProvider</strong>这个是在<strong>RememberMeConfigure#init</strong>初始化的. </span></p><p>​如果我们自定义的<strong>AuthenticationManager</strong>覆盖了全局<strong>AuthenticationManager</strong>的话, 就享受不到<strong>RememberMeConfigure#init</strong>初始化的<strong>RemeberMeAuthenticationProvider</strong>. 我们可以自己添加一个:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>   daoAuthenticationProvider1.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>       User.builder().username(<span class="hljs-string">&quot;admin2&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build()));<br>   <span class="hljs-type">ProviderManager</span> <span class="hljs-variable">providerManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(daoAuthenticationProvider1);<br><br>   <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>   daoAuthenticationProvider2.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(<br>       User.builder().username(<span class="hljs-string">&quot;admin1&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;admin123&quot;</span>).build()));<br><br>   <span class="hljs-comment">//记住我AuthenticationProvider</span><br>   <span class="hljs-type">RememberMeAuthenticationProvider</span> <span class="hljs-variable">rememberMeAuthenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RememberMeAuthenticationProvider</span>(rememberMeKey);<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(Arrays.asList(daoAuthenticationProvider2, rememberMeAuthenticationProvider), providerManager);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-3-RememberMeServices"><a href="#7-3-3-RememberMeServices" class="headerlink" title="7.3.3 RememberMeServices"></a>7.3.3 RememberMeServices</h3><p>这里一共定义了三个方法：</p><ol><li><strong>autoLogin</strong>方法可以从请求中提取出需要的参数, 检测相关参数然后返回<strong>RemeberMeAuthenticationToken</strong>完成自动登录功能。</li><li><strong>loginFail</strong>方法是自动登录失败的回调。</li><li><strong>loginSuccess</strong>方法是自动登录成功的回调。</li></ol><p><strong>RememberMeService</strong>接口的继承关系如图所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230721225955089.png" alt="image-20230721225955089"></p><p><strong>NullRemenberMeServices</strong> 是一个空的实现，这里不做讨论，我们来重点分析另外三个:</p><h3 id="7-3-4-AbstractRememberMeServices"><a href="#7-3-4-AbstractRememberMeServices" class="headerlink" title="7.3.4 AbstractRememberMeServices"></a>7.3.4 AbstractRememberMeServices</h3><p><strong>AbstractRememberMeServices</strong> 对于<strong>RememberMeServices</strong> 接口中定义的方法提供了基本的实现，这里就以接口中定义的方法为思路，分析<strong>AbstractRememberMeServices</strong> 中的具体实现。</p><p>首先我们来看<strong>autoLogin</strong>及其相关方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Authentication <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">rememberMeCookie</span> <span class="hljs-operator">=</span> extractRememberMeCookie(request);<br><span class="hljs-keyword">if</span> (rememberMeCookie == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie detected&quot;</span>);<br><span class="hljs-keyword">if</span> (rememberMeCookie.length() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Cookie was empty&quot;</span>);<br>cancelCookie(request, response);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>String[] cookieTokens = decodeCookie(rememberMeCookie);<br><span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> processAutoLoginCookie(cookieTokens, request, response);<br><span class="hljs-built_in">this</span>.userDetailsChecker.check(user);<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie accepted&quot;</span>);<br><span class="hljs-keyword">return</span> createSuccessfulAuthentication(request, user);<br>&#125;<br><span class="hljs-keyword">catch</span> (CookieTheftException ex) &#123;<br>cancelCookie(request, response);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (UsernameNotFoundException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login was valid but corresponding user not found.&quot;</span>, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (InvalidCookieException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Invalid remember-me cookie: &quot;</span> + ex.getMessage());<br>&#125;<br><span class="hljs-keyword">catch</span> (AccountStatusException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Invalid UserDetails: &quot;</span> + ex.getMessage());<br>&#125;<br><span class="hljs-keyword">catch</span> (RememberMeAuthenticationException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(ex.getMessage());<br>&#125;<br>cancelCookie(request, response);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red;"><strong>autoLogin</strong> 方法主要功能就是从当前请求中提取出令牌信息，根据令牌信息完成自动登录功能，登录成功之后会返回一个认证后的<strong>Authentication</strong> 对象</span>，我们来看一下该方法的具体实现:</p><ol><li>首先调用<strong>extractRememberMeCookie</strong>方法从当前请求中提取出需要的<strong>Cookie</strong>信息， 即 <strong>remenber-me</strong> 对应的值。如果这个值为null，表示本次请求携带的 <strong>Cookie</strong> 中没有 <strong>remenber-me</strong>，这次不需要自动登录，直接返回null 即可。</li><li>如果<strong>remember-me</strong>对应的值长度为 0 ， 则在返回null之 前 ，执行一下 <strong>cancelCookie</strong> 函 数 ，将 <strong>Cookie</strong> 中<strong>remember-me</strong> 的值置为null</li><li>接下来调用<strong>decodeCookie</strong> 方法对获取到的令牌进行解析。具体方式是，先用<strong>Base64</strong> 对令牌进行还原(如果令牌字符串长度不是4的倍数，则在令牌末尾补上一个或者多个“&#x3D;” ， 以使其长度变为4 的倍数，之所以要是4 的倍数，这和Base64 编解码的原理有关，感兴趣的读者可以自行学习Base64 编解码的原理，并不难)，还原之后的字符串分为 三部分，三部分 之问用“:” 隔开，<span style="color:red;">第一部分是当前登录用户名，第二部分是时问戳，第三部分是一个签名。</span> 也就是说 ， 我们一开始在浏览器中看到的<strong>remember-me</strong>令 牌 ， 其 实 是 一个Base64编 码 后 的 宇 符串，解码后的信息包含三部分，读者可以根据decodeCookie 中的方法自行尝试对令牌进行解码。最后将这三部分分别提取出来组成一个数组返回。</li><li>调用<strong>processAutoLoginCookie</strong> 方法对<strong>Cookie</strong>进行验证，如果验证通过，则返回登录用户对象，然后对用户状态进行检验 (账户是否可用、账户是否锁定等)。<strong>processAutoLoginCookie</strong> 方法是一个抽象方法，具体实现在<strong>AbstractRenenberMeServices</strong>的子类中。</li><li>最后调用<strong>createSucessfulAuthentication</strong> 方法创建登录成功的用户对象，不同于使用用户名&#x2F; 密码登录 ， 本次登录成功后创建的用户对象类型是 <strong>RememberMeAuthenticationToken</strong></li></ol><p>接下米我们再来看一下自动登录成功和自动登录失败的回调:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginFail</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Interactive login attempt was unsuccessful.&quot;</span>);<br>cancelCookie(request, response);<br>onLoginFail(request, response);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">Authentication successfulAuthentication)</span> &#123;<br><span class="hljs-keyword">if</span> (!rememberMeRequested(request, <span class="hljs-built_in">this</span>.parameter)) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login not requested.&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>onLoginSuccess(request, response, successfulAuthentication);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">rememberMeRequested</span><span class="hljs-params">(HttpServletRequest request, String parameter)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.alwaysRemember) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> request.getParameter(parameter);<br><span class="hljs-keyword">if</span> (paramValue != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;true&quot;</span>) || paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;on&quot;</span>)<br>|| paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;yes&quot;</span>) || paramValue.equals(<span class="hljs-string">&quot;1&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.logger.debug(<br>LogMessage.format(<span class="hljs-string">&quot;Did not send remember-me cookie (principal did not set parameter &#x27;%s&#x27;)&quot;</span>, parameter));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">Authentication successfulAuthentication)</span>;<br></code></pre></td></tr></table></figure><ol><li>登录失败时，首先取消<strong>Cookie</strong> 的设置，然后调用<strong>onLoginFail</strong> 方法完成失败处理， <strong>onLoginFail</strong> 方法是 一个空方法，如果有需要，开发者可以自行重写该方法， 一般来说不需要重写。</li><li>登录成功时，会首先调用<strong>remenberMeRequested</strong> 方法，判断当前请求是否开启了自动登录。开发者可以在服务端配置<strong>alwaysRemember</strong>，这样无论前端参数是什么，都会开启自动登录，如果开发者没有配置<strong>alwaysRemember</strong>，则根据前端传来的<strong>remember-me</strong> 参数进行判断，<strong>remember-me</strong> 参数的值如果是true、on (默认)、yes或者1，表示开启自动登录。如果开启了自动登录，则调用<strong>onLoginSuccess</strong> 方法进行登录成功的处理。<strong>onLoginSuccess</strong> 是一个抽象方法， 具体实现在<strong>AbstractRememberMeServices</strong> 的子类中。</li><li>最后再来看<strong>AbstractRememberMeServices</strong>中 一个比较重要的方法<strong>setCookie</strong>，在自动登录成功后，将调用该方法把令牌信息放入响应头中并最终返回到前端:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCookie</span><span class="hljs-params">(String[] tokens, <span class="hljs-type">int</span> maxAge, HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">cookieValue</span> <span class="hljs-operator">=</span> encodeCookie(tokens);<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-built_in">this</span>.cookieName, cookieValue);<br>cookie.setMaxAge(maxAge);<br>cookie.setPath(getCookiePath(request));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cookieDomain != <span class="hljs-literal">null</span>) &#123;<br>cookie.setDomain(<span class="hljs-built_in">this</span>.cookieDomain);<br>&#125;<br><span class="hljs-keyword">if</span> (maxAge &lt; <span class="hljs-number">1</span>) &#123;<br>cookie.setVersion(<span class="hljs-number">1</span>);<br>&#125;<br>cookie.setSecure((<span class="hljs-built_in">this</span>.useSecureCookie != <span class="hljs-literal">null</span>) ? <span class="hljs-built_in">this</span>.useSecureCookie : request.isSecure());<br>cookie.setHttpOnly(<span class="hljs-literal">true</span>);<br>response.addCookie(cookie);<br>&#125;<br><br><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">encodeCookie</span><span class="hljs-params">(String[] cookieTokens)</span> &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookieTokens.length; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString()));<br>&#125;<br><span class="hljs-keyword">catch</span> (UnsupportedEncodingException ex) &#123;<br><span class="hljs-built_in">this</span>.logger.error(ex.getMessage(), ex);<br>&#125;<br><span class="hljs-keyword">if</span> (i &lt; cookieTokens.length - <span class="hljs-number">1</span>) &#123;<br>sb.append(DELIMITER);<br>&#125;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> sb.toString();<br>sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(value.getBytes())));<br><span class="hljs-keyword">while</span> (sb.charAt(sb.length() - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;=&#x27;</span>) &#123;<br>sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先调用<strong>encodeCookie</strong> 方法对要返回到前端的数据进行<strong>Base64</strong> 编码，具体方式是 将数组中的数据拼接成一个字符串并用“:” 隔开，然后对其进行<strong>Base64</strong> 编码。</li><li>将编码后的字符串放入<strong>Cookie</strong>中，并配置<strong>Cookie</strong>的过期时间、<strong>path</strong>、<strong>domain</strong>、<strong>secure</strong>、 <strong>httponly</strong> 等属性，最终将配置好的<strong>Cookie</strong> 对象放入响应头中。</li></ol><p>这便是 <strong>AbstractRememberMeServices</strong> 中的几个主要方法 ， 还有其他一些辅助的方法都比较简单，读者可以自行研究。</p><h3 id="7-3-5-TokenBasedRememberMeServices"><a href="#7-3-5-TokenBasedRememberMeServices" class="headerlink" title="7.3.5 TokenBasedRememberMeServices"></a>7.3.5 TokenBasedRememberMeServices</h3><p>在开启记住我后如果没有加入额外配置默认实现就是由<strong>TokenBasedRememberMeServices</strong>进行的实现。查看这个类源码中 <strong>processAutoLoginCookie</strong> 方法实现:</p><p><img src="/2022/01/26/SpringSecurity/image-20220317201055784.png" alt="image-20220317201055784"></p><p><strong>processAutoLoginCookie</strong> 方法主要用来验证 <strong>Cookie</strong> 中的令牌信息是否合法：</p><ol><li><p>首先判断 <strong>cookieTokens</strong> 长度是否为3，不为了说明格式不对，则直接抛出异常。</p></li><li><p>从<strong>cookieTokens</strong> 数组中提取出第 1项，也就是过期时间，判断令牌是否过期，如果己经过期，则拋出异常。</p></li><li><p>根据用户名 （<strong>cookieTokens</strong> 数组的第2项）查询出当前用户对象。</p></li><li><p>调用 <strong>makeTokenSignature</strong> 方法生成一个签名，签名的生成过程如下：首先将用户名、令牌过期时间、用户密码以及 key 组成一个宇符串，中间用“：”隔开，然后通过 MD5 消息摘要算法对该宇符串进行加密，并将加密结果转为一个字符串返回。</p></li><li><p>判断第4 步生成的签名和通过 <strong>Cookie</strong> 传来的签名是否相等（即 <strong>cookieTokens</strong> 数组<br>的第2项），如果相等，表示令牌合法，则直接返回用户对象，否则拋出异常。</p></li></ol><p><img src="/2022/01/26/SpringSecurity/image-20220318142054096.png" alt="image-20220318142054096"></p><ol><li><p>在这个回调中，首先获取用户经和密码信息，如果用户密码在用户登录成功后从<strong>successfulAuthentication</strong>对象中擦除，则从数据库中重新加载出用户密码。</p></li><li><p>计算出令牌的过期时间，令牌默认有效期是两周。</p></li><li><p>根据令牌的过期时间、用户名以及用户密码，计算出一个签名。</p></li><li><p>调用 <strong>setCookie</strong> 方法设置 <strong>Cookie</strong>， 第一个参数是一个数组，数组中一共包含三项。用户名、过期时间以及签名，在<strong>setCookie</strong> 方法中会将数组转为字符串，并进行 <strong>Base64</strong>编码后响应给前端。</p></li></ol><p>看完 <strong>processAutoLoginCookie</strong>和<strong>onLoginSuccess</strong>两个方法的实现 ，相信读者对于令牌的生成和校验己经非常清楚了，这里再总结 一下:</p><ol><li>当用户通过用户名 &#x2F; 密码的形式登录成功后, 系统会根据用户的用户名 、 密码以及令牌的过期时问计算出一个签名，这个签名使用MDS消息摘要算法生成，是不可逆的。然后再将用户名、令牌过期时问以及签名拼接成 一个字符串，中间用“:” 隔开，对拼接好的字符串进行 <strong>Base64</strong> 编码，然后将编码后的结果返回到前端，也就是我们在浏览器中看到的令牌。</li><li>当用户关闭浏览器再次打开，访问系统资源时会自动携带上<strong>Cookie</strong> 中的令牌，服务端拿到<strong>Cookie</strong>中的令牌后，先进行<strong>Base64</strong>解码，解码后分别提取出令牌中的三项数据;接着根据令牌中的数据判断令牌是否己经过期，如果没有过期，则根据令牌中的用户名查询出用户信息:接着再计算出 一个签名和令牌中的签名进行对比，如果一致，表示令牌是合法令牌，自动登录成功，否则自动登录失败。</li></ol><img src="/2022/01/26/SpringSecurity/image-20220319124115432.png" alt="image-20220319124115432" style="zoom: 200%;"><h3 id="7-3-6-PersistentTokenBasedRememberMeServices"><a href="#7-3-6-PersistentTokenBasedRememberMeServices" class="headerlink" title="7.3.6 PersistentTokenBasedRememberMeServices"></a>7.3.6 PersistentTokenBasedRememberMeServices</h3><p><img src="/2022/01/26/SpringSecurity/image-20220319104657210.png" alt="image-20220319104657210"></p><ol><li>不同于 <strong>TokonBasedRemornberMeServices</strong> 中的 <strong>processAutologinCookie</strong> 方法，这里<strong>cookieTokens</strong> 数组的长度为2，第一项是<strong>series</strong>，第二项是 <strong>token</strong>。</li><li>从<strong>cookieTokens</strong>数组中分到提取出 <strong>series</strong> 和 <strong>token</strong>． 然后根据 <strong>series</strong> 去内存中查询出一个 <strong>PersistentRememberMeToken</strong>对象。如果查询出来的对象为null，表示内存中并没有<strong>series</strong>对应的值，本次自动登录失败。如果查询出来的 <strong>token</strong> 和从 <strong>cookieTokens</strong> 中解析出来的<strong>token</strong>不相同，说明自动登录会牌已经泄漏（恶意用户利用令牌登录后，内存中的<strong>token</strong>变了)，此时移除当前用户的所有自动登录记录并抛出异常。</li><li>根据数据库中查询出来的结果判断令牌是否过期，如果过期就抛出异常。</li><li>生成一个新的 <strong>PersistentRememberMeToken</strong> 对象，用户名和<strong>series</strong> 不变，<strong>token</strong> 重新<br>生成，<strong>date</strong> 也使用当前时间。<strong>newToken</strong> 生成后，根据 <strong>series</strong> 去修改内存中的 <strong>token</strong> 和 <strong>date</strong>(即每次自动登录后都会产生新的 <strong>token</strong> 和 <strong>date</strong>）</li><li>调用 <strong>addCookie</strong> 方法添加 <strong>Cookie</strong>， 在<strong>addCookie</strong> 方法中，会调用到我们前面所说的<br><strong>setCookie</strong> 方法，但是要注意第一个数组参数中只有两项：<strong>series</strong> 和 <strong>token</strong>（即返回到前端的令牌是通过对 <strong>series</strong> 和 <strong>token</strong> 进行 <strong>Base64</strong> 编码得到的）</li><li>最后将根据用户名查询用户对象并返回。</li></ol><h2 id="7-4-使用内存中令牌实现"><a href="#7-4-使用内存中令牌实现" class="headerlink" title="7.4 使用内存中令牌实现"></a>7.4 使用内存中令牌实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123; <br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe() <span class="hljs-comment">//开启记住我功能</span><br>                .rememberMeServices(rememberMeServices())<br>                .and()<br>                .csrf().disable();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RememberMeServices <span class="hljs-title function_">rememberMeServices</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistentTokenBasedRememberMeServices</span>(<br>             <span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-comment">//参数 1: 自定义一个生成令牌 key 默认 UUID  </span><br>               userDetailsService(), <span class="hljs-comment">//参数 2:认证数据源  </span><br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryTokenRepositoryImpl</span>());<span class="hljs-comment">//参数 3:令牌存储方式</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-5-持久化令牌"><a href="#7-5-持久化令牌" class="headerlink" title="7.5 持久化令牌"></a>7.5 持久化令牌</h2><h3 id="7-5-1-引入依赖"><a href="#7-5-1-引入依赖" class="headerlink" title="7.5.1 引入依赖"></a>7.5.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-5-2-配置数据源"><a href="#7-5-2-配置数据源" class="headerlink" title="7.5.2 配置数据源"></a>7.5.2 配置数据源</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.entity</span><br></code></pre></td></tr></table></figure><h3 id="7-5-3-配置持久化令牌"><a href="#7-5-3-配置持久化令牌" class="headerlink" title="7.5.3 配置持久化令牌"></a>7.5.3 配置持久化令牌</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">persistentTokenRepository</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">jdbcTokenRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();<br>        jdbcTokenRepository.setCreateTableOnStartup(<span class="hljs-literal">false</span>);<span class="hljs-comment">//只需要没有表时设置为 true</span><br>        jdbcTokenRepository.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTokenRepository;<br>    &#125;<br>  <span class="hljs-comment">//..</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        http.authorizeRequests()<br>                .mvcMatchers(<span class="hljs-string">&quot;/login.html&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br> <span class="hljs-comment">//...</span><br>                .logout()<br>                .and()<br>                .rememberMe() <span class="hljs-comment">//开启记住我功能</span><br>                .tokenRepository(persistentTokenRepository())<br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-4-启动项目并查看数据库"><a href="#7-5-4-启动项目并查看数据库" class="headerlink" title="7.5.4 启动项目并查看数据库"></a>7.5.4 启动项目并查看数据库</h3><p><strong><code>注意:启动项目会自动创建一个表,用来保存记住我的 token 信息 </code></strong></p><p><img src="/2022/01/26/SpringSecurity/image-20220224142025628.png" alt="image-20220224142025628"></p><h3 id="7-5-5-再次测试记住我"><a href="#7-5-5-再次测试记住我" class="headerlink" title="7.5.5 再次测试记住我"></a>7.5.5 再次测试记住我</h3><p>在测试发现即使服务器重新启动，依然可以自动登录。</p><h2 id="7-6-传统-web-开发记住我实现"><a href="#7-6-传统-web-开发记住我实现" class="headerlink" title="7.6 传统 web 开发记住我实现"></a>7.6 传统 web 开发记住我实现</h2><p>通过源码分析得知必须在认证请求中加入参数remember-me值为”true,on,yes,1”其中任意一个才可以完成记住我功能,这个时候修改认证界面:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  记住我: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;on|yes|true|1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置中开启记住我</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .....<br>                .and()<br>                .rememberMe() <span class="hljs-comment">//开启记住我</span><br>                <span class="hljs-comment">//.alwaysRemember(true) 总是记住我</span><br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-7-前后端分离开发记住我实现"><a href="#7-7-前后端分离开发记住我实现" class="headerlink" title="7.7 前后端分离开发记住我实现"></a>7.7 前后端分离开发记住我实现</h2><h3 id="7-7-1-自定义认证类-LoginFilter"><a href="#7-7-1-自定义认证类-LoginFilter" class="headerlink" title="7.7.1 自定义认证类 LoginFilter"></a>7.7.1 自定义认证类 LoginFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义前后端分离认证 Filter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br>        <span class="hljs-comment">//1.判断是否是 post 方式请求</span><br>        <span class="hljs-keyword">if</span> (!request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationServiceException</span>(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());<br>        &#125;<br>        <span class="hljs-comment">//2.判断是否是 json 格式请求类型</span><br>        <span class="hljs-keyword">if</span> (request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) &#123;<br>            <span class="hljs-comment">//3.从 json 数据中获取用户输入用户名和密码进行认证 &#123;&quot;uname&quot;:&quot;xxx&quot;,&quot;password&quot;:&quot;xxx&quot;,&quot;remember-me&quot;:true&#125;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Map&lt;String, String&gt; userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().readValue(request.getInputStream(), Map.class);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> userInfo.get(getUsernameParameter());<br>                <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> userInfo.get(getPasswordParameter());<br>                <span class="hljs-type">String</span> <span class="hljs-variable">rememberValue</span> <span class="hljs-operator">=</span> userInfo.get(AbstractRememberMeServices.DEFAULT_PARAMETER);<br>                <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(rememberValue)) &#123;<br>                    request.setAttribute(AbstractRememberMeServices.DEFAULT_PARAMETER, rememberValue);<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;用户名: &quot;</span> + username + <span class="hljs-string">&quot; 密码: &quot;</span> + password + <span class="hljs-string">&quot; 是否记住我: &quot;</span> + rememberValue);<br>                <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(username, password);<br>                setDetails(request, authRequest);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAuthenticationManager().authenticate(authRequest);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.attemptAuthentication(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-2-自定义-RememberMeService"><a href="#7-7-2-自定义-RememberMeService" class="headerlink" title="7.7.2 自定义 RememberMeService"></a>7.7.2 自定义 RememberMeService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义记住我 services 实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPersistentTokenBasedRememberMeServices</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PersistentTokenBasedRememberMeServices</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPersistentTokenBasedRememberMeServices</span><span class="hljs-params">(String key, UserDetailsService userDetailsService, PersistentTokenRepository tokenRepository)</span> &#123;<br>        <span class="hljs-built_in">super</span>(key, userDetailsService, tokenRepository);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义前后端分离获取 remember-me 方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">rememberMeRequested</span><span class="hljs-params">(HttpServletRequest request, String parameter)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> request.getAttribute(parameter).toString();<br>        <span class="hljs-keyword">if</span> (paramValue != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;true&quot;</span>) || paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;on&quot;</span>)<br>                    || paramValue.equalsIgnoreCase(<span class="hljs-string">&quot;yes&quot;</span>) || paramValue.equals(<span class="hljs-string">&quot;1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-3-配置记住我"><a href="#7-7-3-配置记住我" class="headerlink" title="7.7.3 配置记住我"></a>7.7.3 配置记住我</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//.....</span><br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>    <span class="hljs-comment">//自定义 filter 交给工厂管理</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginFilter <span class="hljs-title function_">loginFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">LoginFilter</span> <span class="hljs-variable">loginFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginFilter</span>();<br>        loginFilter.setFilterProcessesUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>);<span class="hljs-comment">//指定认证 url</span><br>        loginFilter.setUsernameParameter(<span class="hljs-string">&quot;uname&quot;</span>);<span class="hljs-comment">//指定接收json 用户名 key</span><br>        loginFilter.setPasswordParameter(<span class="hljs-string">&quot;passwd&quot;</span>);<span class="hljs-comment">//指定接收 json 密码 key</span><br>        loginFilter.setAuthenticationManager(authenticationManagerBean());<br>        loginFilter.setRememberMeServices(rememberMeServices()); <span class="hljs-comment">//设置认证成功时使用自定义rememberMeService</span><br>        <span class="hljs-comment">//认证成功处理</span><br>        loginFilter.setAuthenticationSuccessHandler((req, resp, authentication) -&gt; &#123;<br>            Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>            result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;用户信息&quot;</span>, authentication.getPrincipal());<br>            resp.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>            resp.setStatus(HttpStatus.OK.value());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>            resp.getWriter().println(s);<br>        &#125;);<br>        <span class="hljs-comment">//认证失败处理</span><br>        loginFilter.setAuthenticationFailureHandler((req, resp, ex) -&gt; &#123;<br>            Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>            result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录失败: &quot;</span> + ex.getMessage());<br>            resp.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());<br>            resp.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>            resp.getWriter().println(s);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> loginFilter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests()<br>                .anyRequest().authenticated()<span class="hljs-comment">//所有请求必须认证</span><br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe() <span class="hljs-comment">//开启记住我功能  cookie 进行实现  1.认证成功保存记住我 cookie 到客户端   2.只有 cookie 写入客户端成功才能实现自动登录功能</span><br>                .rememberMeServices(rememberMeServices())  <span class="hljs-comment">//设置自动登录使用哪个 rememberMeServices</span><br>                .and()<br>                .exceptionHandling()<br>                .authenticationEntryPoint((req, resp, ex) -&gt; &#123;<br>                    resp.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);<br>                    resp.setStatus(HttpStatus.UNAUTHORIZED.value());<br>                    resp.getWriter().println(<span class="hljs-string">&quot;请认证之后再去处理!&quot;</span>);<br>                &#125;)<br>                .and()<br>                .logout()<br>                .logoutRequestMatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrRequestMatcher</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>, HttpMethod.DELETE.name()),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathRequestMatcher</span>(<span class="hljs-string">&quot;/logout&quot;</span>, HttpMethod.GET.name())<br>                ))<br>                .logoutSuccessHandler((req, resp, auth) -&gt; &#123;<br>                    Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>                    result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;注销成功&quot;</span>);<br>                    result.put(<span class="hljs-string">&quot;用户信息&quot;</span>, auth.getPrincipal());<br>                    resp.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                    resp.setStatus(HttpStatus.OK.value());<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>                    resp.getWriter().println(s);<br>                &#125;)<br>                .and()<br>                .csrf().disable();<br><br><br>        <span class="hljs-comment">// at: 用来某个 filter 替换过滤器链中哪个 filter</span><br>        <span class="hljs-comment">// before: 放在过滤器链中哪个 filter 之前</span><br>        <span class="hljs-comment">// after: 放在过滤器链中那个 filter 之后</span><br>        http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RememberMeServices <span class="hljs-title function_">rememberMeServices</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPersistentTokenBasedRememberMeServices</span>(UUID.randomUUID().toString(), userDetailsService(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryTokenRepositoryImpl</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第八章-会话管理"><a href="#第八章-会话管理" class="headerlink" title="第八章 会话管理"></a>第八章 会话管理</h1><h2 id="8-1-会话简介"><a href="#8-1-会话简介" class="headerlink" title="8.1 会话简介"></a>8.1 会话简介</h2><p>当浏览器调用登录接口登录成功后，服务端会和浏览器之间建立一个会话 (<strong>Session</strong>) 浏览器在每次发送请求时都会携带一个 <strong>Sessionld</strong>，服务端则根据这个 <strong>Sessionld</strong> 来判断用户身份。当浏览器关闭后，服务端的 <strong>Session</strong> 并不会自动销毁，需要开发者手动在服务端调用 <strong>Session</strong>销毁方法，或者等 <strong>Session</strong> 过期时间到了自动销毁。在<strong>Spring Security</strong> 中，与<strong>HttpSession</strong>相关的功能由 <strong>SessionManagementFilter</strong> 和<strong>SessionAuthenticationStrategy</strong> 接口来处理，<strong>SessionManagementFilter</strong> 过滤器将 <strong>Session</strong> 相关操作委托给 <strong>SessionAuthenticationStrategy</strong> 接口去完成。</p><h2 id="8-2-会话并发管理"><a href="#8-2-会话并发管理" class="headerlink" title="8.2 会话并发管理"></a>8.2 会话并发管理</h2><h3 id="8-2-1-简介"><a href="#8-2-1-简介" class="headerlink" title="8.2.1 简介"></a>8.2.1 简介</h3><p>会话并发管理就是指在当前系统中，同一个用户可以同时创建多少个会话，如果一个设备对应一个会话，那么也可以简单理解为同一个用户可以同时在多少台设备上进行登录。默认情况下，同一用户在多少台设备上登录并没有限制，不过开发者可以在 Spring Security 中对此进行配置</p><h3 id="8-2-2-开启会话管理"><a href="#8-2-2-开启会话管理" class="headerlink" title="8.2.2 开启会话管理"></a>8.2.2 开启会话管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>  <span class="hljs-comment">//...</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement()  <span class="hljs-comment">//开启会话管理</span><br>                .maximumSessions(<span class="hljs-number">1</span>);  <span class="hljs-comment">//设置会话并发数为 1</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HttpSessionEventPublisher <span class="hljs-title function_">httpSessionEventPublisher</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSessionEventPublisher</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>sessionManagement()</strong> 用来开启会话管理、<strong>maximumSessions</strong> 指定会话的并发数为 1。</li><li><strong>HttpSessionEventPublisher</strong> 提供一一个<strong>HttpSessionEventPublisher</strong>实例。Spring Security中通过一个 <strong>Map</strong> 集合来集护当前的 <strong>HttpSession</strong> 记录，进而实现会话的并发管理。当用户登录成功时，就向集合中添加一条<strong>HttpSession</strong> 记录；当会话销毁时，就从集合中移除一条 <strong>HttpSession</strong> 记录。<strong>HttpSessionEventPublisher</strong> 实现了 <strong>HttpSessionListener</strong> 接口，可以监听到 <strong>HttpSession</strong> 的创建和销毀事件，并将 <strong>HttpSession</strong> 的创建&#x2F;销毁事件发布出去，这样，当有 <strong>HttpSession</strong> 销毀时，Spring Security 就可以感知到该事件了。</li></ol><h3 id="8-2-3-测试会话管理"><a href="#8-2-3-测试会话管理" class="headerlink" title="8.2.3 测试会话管理"></a>8.2.3 测试会话管理</h3><p>配置完成后，启动项目。这次测试我们需要两个浏览器，如果使用了 Chrome 浏览器，可以使用 Chrome 浏览器中的多用户方式（相当于两个浏览器）先在第一个浏览器中输入 <a href="http://localhost:8080，此时会自动跳转到登录页面，完成登录操作，就可以访问到数据了；接下来在第二个浏览器中也输入">http://localhost:8080，此时会自动跳转到登录页面，完成登录操作，就可以访问到数据了；接下来在第二个浏览器中也输入</a> <a href="http://localhost:8080，也需要登录，">http://localhost:8080，也需要登录，</a><br>完成登录操作；当第二个浏览器登录成功后，再回到第一个浏览器，刷新页面。结果出现下图：<img src="/2022/01/26/SpringSecurity/image-20220308195448860.png" alt="image-20220308195448860"></p><h2 id="8-3-会话失效处理"><a href="#8-3-会话失效处理" class="headerlink" title="8.3 会话失效处理"></a>8.3 会话失效处理</h2><h3 id="8-3-1-传统-web-开发处理"><a href="#8-3-1-传统-web-开发处理" class="headerlink" title="8.3.1 传统 web 开发处理"></a>8.3.1 传统 web 开发处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  http.authorizeRequests()<br>    .anyRequest().authenticated()<br>    .and()<br>    ....<br>    .sessionManagement()  <span class="hljs-comment">//开启会话管理</span><br>    .maximumSessions(<span class="hljs-number">1</span>)  <span class="hljs-comment">//允许同一个用户只允许创建一个会话</span><br>    .expiredUrl(<span class="hljs-string">&quot;/login&quot;</span>);<span class="hljs-comment">//会话过期处理: 直接重定向到/login</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-2-前后端分离开发处理"><a href="#8-3-2-前后端分离开发处理" class="headerlink" title="8.3.2 前后端分离开发处理"></a>8.3.2 前后端分离开发处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  http.authorizeRequests()<br>    .anyRequest().authenticated()<br>    .....<br>    .sessionManagement()  <span class="hljs-comment">//开启会话管理</span><br>    .maximumSessions(<span class="hljs-number">1</span>)  <span class="hljs-comment">//允许同一个用户只允许创建一个会话</span><br>    <span class="hljs-comment">//.expiredUrl(&quot;/login&quot;)//会话过期处理  传统 web 开发</span><br>    .expiredSessionStrategy(event -&gt; &#123;<br>      <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> event.getResponse();<br>      response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>      Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">500</span>);<br>      result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;当前会话已经失效,请重新登录!&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>      response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>      response.getWriter().println(s);<br>      response.flushBuffer();<br>    &#125;);<span class="hljs-comment">//前后端分离开发处理</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-4-禁止再次登录"><a href="#8-4-禁止再次登录" class="headerlink" title="8.4 禁止再次登录"></a>8.4 禁止再次登录</h2><p>默认的效果是一种被 “挤下线”的效果，后面登录的用户会把前面登录的用户 “挤下线”。还有一种是禁止后来者登录，即一旦当前用户登录成功，后来者无法再次使用相同的用户登录，直到当前用户主动注销登录，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  http.authorizeRequests()<br>    .anyRequest().authenticated()<br>    .and()<br>    ....<br>    .sessionManagement()  <span class="hljs-comment">//开启会话管理</span><br>    .maximumSessions(<span class="hljs-number">1</span>)  <span class="hljs-comment">//允许同一个用户只允许创建一个会话</span><br>    <span class="hljs-comment">//.expiredUrl(&quot;/login&quot;)//会话过期处理  传统 web 开发</span><br>    .expiredSessionStrategy(event -&gt; &#123;<br>      <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> event.getResponse();<br>      response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>      Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">500</span>);<br>      result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;当前会话已经失效,请重新登录!&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>      response.getWriter().println(s);<br>      response.flushBuffer();<br>    &#125;)<span class="hljs-comment">//前后端分离开发处理</span><br>    .maxSessionsPreventsLogin(<span class="hljs-literal">true</span>);<span class="hljs-comment">//登录之后禁止再次登录</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-5-会话共享"><a href="#8-5-会话共享" class="headerlink" title="8.5 会话共享"></a>8.5 会话共享</h2><p>前面所讲的会话管理都是单机上的会话管理，如果当前是集群环境，前面所讲的会话管理方案就会失效。此时可以利用 spring-session 结合 redis 实现 session 共享。</p><blockquote><p>引入依赖 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>编写配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br></code></pre></td></tr></table></figure><blockquote><p>配置Security</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.blr.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;<br><span class="hljs-keyword">import</span> org.springframework.session.FindByIndexNameSessionRepository;<br><span class="hljs-keyword">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FindByIndexNameSessionRepository sessionRepository;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityConfig</span><span class="hljs-params">(FindByIndexNameSessionRepository sessionRepository)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sessionRepository = sessionRepository;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        ....<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .rememberMe()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement()  <span class="hljs-comment">//开启会话管理</span><br>                .maximumSessions(<span class="hljs-number">1</span>)  <span class="hljs-comment">//允许同一个用户只允许创建一个会话*/</span><br>                .expiredUrl(<span class="hljs-string">&quot;/login&quot;</span>)<span class="hljs-comment">//会话过期处理  传统 web 开发</span><br>                .expiredSessionStrategy(event -&gt; &#123;<br>                    <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> event.getResponse();<br>                    response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                    Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                    result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">500</span>);<br>                    result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;当前会话已经失效,请重新登录!&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(result);<br>                    response.getWriter().println(s);<br>                    response.flushBuffer();<br>                &#125;).sessionRegistry(sessionRegistry());<span class="hljs-comment">//前后端分离开发处理</span><br>        <span class="hljs-comment">//.maxSessionsPreventsLogin(true);//登录之后禁止再次登录*/</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringSessionBackedSessionRegistry <span class="hljs-title function_">sessionRegistry</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringSessionBackedSessionRegistry</span>(sessionRepository);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-6-原理分析"><a href="#8-6-原理分析" class="headerlink" title="8.6 原理分析"></a>8.6 原理分析</h2><p>​接下来我们来分析上面的效果是怎么实现的. 这里涉及了比较多的类, 我们逐个来看一下:</p><h3 id="8-6-1-SessionInformation"><a href="#8-6-1-SessionInformation" class="headerlink" title="8.6.1 SessionInformation"></a>8.6.1 SessionInformation</h3><p>​<strong>SessionInformation</strong>主要用作SpringSecurity框架内的会话记录, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionInformation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">private</span> Date lastRequest;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object principal;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String sessionId;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">expired</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里定义了四个属性:</p><ol><li><strong>lastRequest</strong>: 最近一次请求的时间</li><li><strong>principal</strong>: 会话对应的主体(对象)</li><li><strong>sessionId</strong>: 会话Id</li><li><strong>expired</strong>: 会话是否过期</li><li><strong>refreshLastRequest()</strong>: 该方法用来更新最近一次请求的时间</li></ol><h3 id="8-6-2-SessionRegistry"><a href="#8-6-2-SessionRegistry" class="headerlink" title="8.6.2 SessionRegistry"></a>8.6.2 SessionRegistry</h3><p>​<strong>SessionRegistry</strong>是一个接口, 主要用来维护<strong>SessionInformation</strong>实例, 该接口只有一个实现类<strong>SessionRegistryImpl</strong>, 所有这里我们就不看接口了, 直接来看实现类<strong>SessionRegistryImpl</strong>, <strong>SessionRegistryImpl</strong>类的定义比较长, 我们来拆开看下, 先看下属性的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionRegistryImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SessionRegistry</span>, ApplicationListener&lt;AbstractSessionEvent&gt; &#123;<br><span class="hljs-comment">// &lt;principal:Object,SessionIdSet&gt;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals;<br><br><span class="hljs-comment">// &lt;sessionId:Object,SessionInformation&gt;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, SessionInformation&gt; sessionIds;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SessionRegistryImpl</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.principals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><span class="hljs-built_in">this</span>.sessionIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>&#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SessionRegistryImpl</span><span class="hljs-params">(ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals,</span><br><span class="hljs-params">Map&lt;String, SessionInformation&gt; sessionIds)</span> &#123;<br><span class="hljs-built_in">this</span>.principals = principals;<br><span class="hljs-built_in">this</span>.sessionIds = sessionIds;<br>&#125;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(AbstractSessionEvent event)</span> &#123;<br><span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> SessionDestroyedEvent) &#123;<br><span class="hljs-type">SessionDestroyedEvent</span> <span class="hljs-variable">sessionDestroyedEvent</span> <span class="hljs-operator">=</span> (SessionDestroyedEvent) event;<br><span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> sessionDestroyedEvent.getId();<br>removeSessionInformation(sessionId);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> SessionIdChangedEvent) &#123;<br><span class="hljs-type">SessionIdChangedEvent</span> <span class="hljs-variable">sessionIdChangedEvent</span> <span class="hljs-operator">=</span> (SessionIdChangedEvent) event;<br><span class="hljs-type">String</span> <span class="hljs-variable">oldSessionId</span> <span class="hljs-operator">=</span> sessionIdChangedEvent.getOldSessionId();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sessionIds.containsKey(oldSessionId)) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sessionIds.get(oldSessionId).getPrincipal();<br>removeSessionInformation(oldSessionId);<br>registerNewSession(sessionIdChangedEvent.getNewSessionId(), principal);<br>&#125;<br>&#125;<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>SessionRegistryImpl</strong>实现了<strong>SessionRegistry</strong>和<strong>ApplicationListener</strong>两个接口, 实现了<strong>ApplicationListener</strong>接口, 并通过重写其<strong>onApplicationEvent</strong>方法, 就可以接收到<strong>HttpSession</strong>的销毁事件, 进而移除掉<strong>HttpSession</strong>的记录.</p><p>​<strong>SessionRegistryImpl</strong>中一共定义了两个属性:</p><p>​1. <strong>principals</strong>: 该变量用来保持当前登录主体(用户)和<strong>SessionId</strong>之间的关系, <strong>key</strong>就是当前登录主体, <strong>value</strong>则是当前登录主体所对应的会话id的集合.</p><p>​2. <strong>sessionIds</strong>: 该变量是用来保存<strong>sessionId</strong>和<strong>SessionInformation</strong>之间的映射关系, <strong>key</strong>是<strong>sessionId</strong>, <strong>value</strong>则是<strong>SessionInformation</strong>.</p><p>​</p><p>​<span style="color:red;">注意: 由于<strong>principals</strong> 集合中采用当前登录用户对象做<strong>key</strong>，将对象作为集合中的<strong>key</strong>，需要重写其<strong>equals</strong>方法 和<strong>hashCode</strong>方法 。 在前面的案例中 ，由于我 们使用了<strong>SpringSecurity</strong>系统默认定义的<strong>User</strong>类 ，该类已经重写了<strong>equals</strong> 方法和<strong>hashCode</strong> 方法。如果开发者自定义用户类，记得重写其<strong>equals</strong> 方法和<strong>hashCode</strong>方法，否则会话并发管理会失效。</span></p><p>​继续来看<strong>SessionRegistryImpl</strong>中的其他方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getAllPrincipals</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.principals.keySet());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;SessionInformation&gt; <span class="hljs-title function_">getAllSessions</span><span class="hljs-params">(Object principal, <span class="hljs-type">boolean</span> includeExpiredSessions)</span> &#123;<br>Set&lt;String&gt; sessionsUsedByPrincipal = <span class="hljs-built_in">this</span>.principals.get(principal);<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br>List&lt;SessionInformation&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(sessionsUsedByPrincipal.size());<br><span class="hljs-keyword">for</span> (String sessionId : sessionsUsedByPrincipal) &#123;<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">sessionInformation</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (sessionInformation == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (includeExpiredSessions || !sessionInformation.isExpired()) &#123;<br>list.add(sessionInformation);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SessionInformation <span class="hljs-title function_">getSessionInformation</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sessionIds.get(sessionId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshLastRequest</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (info != <span class="hljs-literal">null</span>) &#123;<br>info.refreshLastRequest();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>getAllPrincipals</strong>: 该方法返回所有的登录用户对象.</li><li><strong>getAllSessions</strong>: 该方法返回某一个用户所对应的所有<strong>SessionInfomation</strong>. 方法第一个参数就是用户对象, 第二个参数表示是否包含已经过期的Session. 具体的操作就是从<strong>principals</strong>变量中获取该用户对应的所有<strong>sessionId</strong>, 然后调用<strong>getSessionInfomation</strong>方法从<strong>sessionIds</strong>变量中获取每一个<strong>sessionId</strong>对应的<strong>SessionInformation</strong>, 最终将获取到的<strong>SessionInformation</strong>存入集合中返回.</li><li><strong>getSessionInformation</strong>: 该方法主要是根据<strong>sessionId</strong>从<strong>sessionIds</strong>集合中获取到对应的<strong>SessionInformation</strong></li><li><strong>refreshLastRequest</strong>: 根据传入的<strong>sessionId</strong>找到对应的<strong>SessionInformation</strong>, 并调用其<strong>refreshLastRequest</strong>方法并刷新最后一次请求的时间</li></ol><p>​再来看下会话的保存操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerNewSession</span><span class="hljs-params">(String sessionId, Object principal)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br>Assert.notNull(principal, <span class="hljs-string">&quot;Principal required as per interface contract&quot;</span>);<br><span class="hljs-keyword">if</span> (getSessionInformation(sessionId) != <span class="hljs-literal">null</span>) &#123;<br>removeSessionInformation(sessionId);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Registering session %s, for principal %s&quot;</span>, sessionId, principal));<br>&#125;<br><span class="hljs-built_in">this</span>.sessionIds.put(sessionId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionInformation</span>(principal, sessionId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><span class="hljs-built_in">this</span>.principals.compute(principal, (key, sessionsUsedByPrincipal) -&gt; &#123;<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal == <span class="hljs-literal">null</span>) &#123;<br>sessionsUsedByPrincipal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>&#125;<br>sessionsUsedByPrincipal.add(sessionId);<br><span class="hljs-built_in">this</span>.logger.trace(LogMessage.format(<span class="hljs-string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, principal, sessionsUsedByPrincipal));<br><span class="hljs-keyword">return</span> sessionsUsedByPrincipal;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​当用户登录成功后, 会执行会话保存操作, 传入当前请求的<strong>sessionId</strong>和当前登录主体<strong>principal</strong>对象. 如果<strong>sessionId</strong>已经存在, 则先将其移除, 然后先往<strong>sessionIds</strong>中保存, <strong>key</strong>是<strong>sessionId</strong>, <strong>value</strong>则是一个新创建的<strong>SessionInformation</strong>对象.</p><p>​在向<strong>principals</strong>集合中保存时使用了<strong>compute</strong>方法, 第一个参数就是当前登录主体, 第二个参数则进行了计算. 如果当前登录主体在<strong>principals</strong>中已经有对应的value, 则在value的基础上继续添加一个<strong>sessionId</strong>. 如果当前登录主体在<strong>principals</strong>中没有对应的<strong>value</strong>, 则新建一个<strong>sessionUsedByPrincipal</strong>对象, 然后再将<strong>sessiomId</strong>添加进去.</p><p>​最后我们来看一下会话移除操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeSessionInformation</span><span class="hljs-params">(String sessionId)</span> &#123;<br>Assert.hasText(sessionId, <span class="hljs-string">&quot;SessionId required as per interface contract&quot;</span>);<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> getSessionInformation(sessionId);<br><span class="hljs-keyword">if</span> (info == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Removing session &quot;</span> + sessionId + <span class="hljs-string">&quot; from set of registered sessions&quot;</span>);<br>&#125;<br><span class="hljs-built_in">this</span>.sessionIds.remove(sessionId);<br><span class="hljs-built_in">this</span>.principals.computeIfPresent(info.getPrincipal(), (key, sessionsUsedByPrincipal) -&gt; &#123;<br><span class="hljs-built_in">this</span>.logger.debug(<br>LogMessage.format(<span class="hljs-string">&quot;Removing session %s from principal&#x27;s set of registered sessions&quot;</span>, sessionId));<br>sessionsUsedByPrincipal.remove(sessionId);<br><span class="hljs-keyword">if</span> (sessionsUsedByPrincipal.isEmpty()) &#123;<br><span class="hljs-comment">// No need to keep object in principals Map anymore</span><br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Removing principal %s from registry&quot;</span>, info.getPrincipal()));<br>sessionsUsedByPrincipal = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.logger.trace(<br>LogMessage.format(<span class="hljs-string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, info.getPrincipal(), sessionsUsedByPrincipal));<br><span class="hljs-keyword">return</span> sessionsUsedByPrincipal;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​移除也是两方面的工作, 一方面就是从<strong>sessionIds</strong>变量中移除, 这个直接调用<strong>remove</strong>方法即可;另一方面就是从<strong>principals</strong>变量中移除, <strong>principals</strong>中<strong>key</strong>是当前登录的用户对象, <strong>value</strong>是一个集合, 里面保存着当前用户对应的所有<strong>sessionId</strong>, 这里主要是移除<strong>value</strong>中对应的<strong>sessionId</strong></p><h3 id="8-6-3-SessionAuthenticationStrategy"><a href="#8-6-3-SessionAuthenticationStrategy" class="headerlink" title="8.6.3 SessionAuthenticationStrategy"></a>8.6.3 SessionAuthenticationStrategy</h3><p>​<strong>SessionAuthenticationStrategy</strong>是一个接口, 主要在用户登录成功后, 对<strong>HttpSession</strong>进行处理. 它里面只有一个<strong>onAuthentication</strong>方法, 用来处理和<strong>HttpSession</strong>相关的事情:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SessionAuthenticationStrategy</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Performs Http session-related functionality when a new authentication occurs.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> SessionAuthenticationException if it is decided that the authentication is</span><br><span class="hljs-comment"> * not allowed for the session. This will typically be because the user has too many</span><br><span class="hljs-comment"> * sessions open at once.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> SessionAuthenticationException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>SessionAuthenticationStrategy</strong>有如下一些实现类:</p><ul><li><strong>CsrfAuthenticationStrategy</strong>: <strong>CsrfAuthenticationStrategy</strong>和<strong>CSRF</strong>攻击有关, 该类主要负责在身份验证后删除旧的<strong>CsrfToken</strong>并生成一个新的<strong>CsrfToken</strong></li><li><strong>ConcurrentSessionControlAuthenticationStrategy</strong>: 该类主要用来处理<strong>Session并发</strong>问题.</li><li><strong>RegisterSessionAuthenticationStrategy</strong>: 该类用来在认证成功后将<strong>HttpSession</strong>信息记录到<strong>SessionRegistry</strong>中 </li><li><strong>CompositeSessionAuthenticationStrategy</strong>: 这是一个复合策略, 它里面维护了一个集合, 集合中保存了多个不同的<strong>SessionAuthenticationStrategy</strong>对象, 相当于该类代理了多个<strong>SessionAuthenticationStrategy</strong>对象, 大部分情况下, 在SpringSecurity框架中直接使用的也是该类的实例.</li><li><strong>NullAuthenticatedSessionStrategy</strong>: 这是一个空的实现, 没做任何处理</li><li><strong>AbstractSessionFixationProtectionStrategy</strong>: 通过修改<strong>sessionId</strong>来防止会话固定攻击</li><li><strong>ChangeSessionIdAuthenticationStrategy</strong>: 通过修改<strong>sessionId</strong>来防止会话固定攻击.</li><li><strong>SessionFixationProtectionStrategy</strong>: 通过创建一个新的会话来防止会话固定攻击</li></ul><h4 id="ConcurrentSessionControlAuthenticationStrategy"><a href="#ConcurrentSessionControlAuthenticationStrategy" class="headerlink" title="ConcurrentSessionControlAuthenticationStrategy"></a>ConcurrentSessionControlAuthenticationStrategy</h4><p>​在前面的案例中, 起主要作用的是<strong>ConcurrentSessionControlAuthenticationStrategy</strong>, 因此这里先对该类进行重点分析, 先来看它里面的<strong>onAuthentication</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> &#123;<br>   <span class="hljs-comment">//获取当前用户允许的最大session数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">allowedSessions</span> <span class="hljs-operator">=</span> getMaximumSessionsForThisUser(authentication);<br><span class="hljs-keyword">if</span> (allowedSessions == -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 没有限制</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>   <span class="hljs-comment">//获取当前用户的Session</span><br>List&lt;SessionInformation&gt; sessions = <span class="hljs-built_in">this</span>.sessionRegistry.getAllSessions(authentication.getPrincipal(), <span class="hljs-literal">false</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">sessionCount</span> <span class="hljs-operator">=</span> sessions.size();<br><span class="hljs-keyword">if</span> (sessionCount &lt; allowedSessions) &#123;<br>     <span class="hljs-comment">//如果没得到最大允许数量直接放行</span><br><span class="hljs-comment">// They haven&#x27;t got too many login sessions running at present</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (sessionCount == allowedSessions) &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Only permit it though if this request is associated with one of the</span><br><span class="hljs-comment">// already registered sessions</span><br><span class="hljs-keyword">for</span> (SessionInformation si : sessions) &#123;<br><span class="hljs-keyword">if</span> (si.getSessionId().equals(session.getId())) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// If the session is null, a new one will be created by the parent class,</span><br><span class="hljs-comment">// exceeding the allowed number</span><br>&#125;<br>allowableSessionsExceeded(sessions, allowedSessions, <span class="hljs-built_in">this</span>.sessionRegistry);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先从<strong>sessionRegistry</strong>中获取当前用户的所有未失效的<strong>SessionInformation</strong>实例, 然后获取到当前项目允许的最大<strong>session</strong>数. </p><ol><li>如果获取的<strong>SessionInformation</strong>实例数小于当前项目允许的最大<strong>session</strong>数, 说明当前登录没问题, 直接return即可.</li><li>如果允许的最大<strong>session</strong>数量为-1, 则表示应用并不限制登录并发数, 当前登录也没有问题, 直接返回即可. 如果获取到<strong>SessionInformation</strong>实例等于当前项目允许的最大<strong>session</strong>数, 则去判断当前登录的<strong>sessionId</strong>是否存在于获取到的<strong>SessionInformation</strong>实例中, 如果存在, 说明登录也没有问题, 直接返回即可.</li></ol><p>如果在前面的判断中没有return ，说明当前用户登录的并发数己经超过允许的并发数了， 进入到<strong>allowableSessionsExceeded</strong> 方法中进行处理，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allowableSessionsExceeded</span><span class="hljs-params">(List&lt;SessionInformation&gt; sessions, <span class="hljs-type">int</span> allowableSessions,</span><br><span class="hljs-params">SessionRegistry registry)</span> <span class="hljs-keyword">throws</span> SessionAuthenticationException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.exceptionIfMaximumExceeded || (sessions == <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionAuthenticationException</span>(<br><span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;ConcurrentSessionControlAuthenticationStrategy.exceededAllowed&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; allowableSessions &#125;, <span class="hljs-string">&quot;Maximum sessions of &#123;0&#125; for this principal exceeded&quot;</span>));<br>&#125;<br><span class="hljs-comment">// Determine least recently used sessions, and mark them for invalidation</span><br>sessions.sort(Comparator.comparing(SessionInformation::getLastRequest));<br><span class="hljs-type">int</span> <span class="hljs-variable">maximumSessionsExceededBy</span> <span class="hljs-operator">=</span> sessions.size() - allowableSessions + <span class="hljs-number">1</span>;<br>List&lt;SessionInformation&gt; sessionsToBeExpired = sessions.subList(<span class="hljs-number">0</span>, maximumSessionsExceededBy);<br><span class="hljs-keyword">for</span> (SessionInformation session : sessionsToBeExpired) &#123;<br>session.expireNow();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果<strong>exceptionIfMaximumExceeded</strong>属性为<strong>true</strong>, 则直接抛出一次, 该属性的值也就是我们在<strong>SecurityConfig</strong>中通过<strong>maxSessionsPreventsLogin</strong>方法配置的值, 即禁止后来者登录, 抛出异常之后, 本次登录失败. </p><p>​否则说明不禁止后来者登录, 此时对查询出来的当前用户所有登录会话按照最后一次请求时间进行排序, 然后计算出需要过期的<strong>session</strong>数量, 从<strong>sessions</strong>集合中取出来进行遍历, 依次调用其<strong>expireNow</strong>方法使之过期.</p><p>​这就是<strong>ConcurrentSessionControlAuthenticationStrategy</strong>类的实现逻辑.</p><h4 id="RegisterSessionAuthnticationStrategy"><a href="#RegisterSessionAuthnticationStrategy" class="headerlink" title="RegisterSessionAuthnticationStrategy"></a>RegisterSessionAuthnticationStrategy</h4><p>​在前面的案例中, 默认也用到了<strong>RegisterSessionAuthenticationStrategy</strong>, 该类的作用主要是向<strong>SessionRegistry</strong>中记录<strong>HttpSession</strong>信息, 我们来看一下<strong>onAuthentication</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> &#123;<br><span class="hljs-built_in">this</span>.sessionRegistry.registerNewSession(request.getSession().getId(), authentication.getPrincipal());<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到,这里的<strong>onAuthentication</strong>方法非常简单, 就是调用<strong>registerNewSession</strong>方法向<strong>sessionRegistry</strong>中添加一条登录会话信息</p><p>​</p><h4 id="CompositeSessionAuthenticationStrategy"><a href="#CompositeSessionAuthenticationStrategy" class="headerlink" title="CompositeSessionAuthenticationStrategy"></a>CompositeSessionAuthenticationStrategy</h4><p>​<strong>CompositeSessionAuthenticationStrategy</strong>类相对于一个代理类, 默认使用的其实就是该类的实例, 我们来看一该类的<strong>onAuthentication</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthentication</span><span class="hljs-params">(Authentication authentication, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> SessionAuthenticationException &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">currentPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.delegateStrategies.size();<br><span class="hljs-keyword">for</span> (SessionAuthenticationStrategy delegate : <span class="hljs-built_in">this</span>.delegateStrategies) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.trace(LogMessage.format(<span class="hljs-string">&quot;Preparing session with %s (%d/%d)&quot;</span>,<br>delegate.getClass().getSimpleName(), ++currentPosition, size));<br>&#125;<br>delegate.onAuthentication(authentication, request, response);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到,这里就是遍历它所维护的<strong>SessionAuthenticationStrategy</strong>集合, 然后分别调用其<strong>onAuthentication</strong>方法.</p><p>​在前面的案例中, 主要涉及到这些<strong>SessionAuthenticationStrategy</strong>实例, 还有其他一些<strong>SessionAuthenticationStrategy</strong>实例, 我们接下来的小节中详细介绍, 这里不再说明</p><h3 id="8-6-4-SessionManagementConfigurer初始化及配置"><a href="#8-6-4-SessionManagementConfigurer初始化及配置" class="headerlink" title="8.6.4 SessionManagementConfigurer初始化及配置"></a>8.6.4 SessionManagementConfigurer初始化及配置</h3><p>当我们使用<strong>HttpSecurity#sessionManagement</strong>, 就会添加<strong>SessionManagementConfigurer</strong>配置, 作为一个配置类，我们主要看<strong>SessionmanagementConfigurer</strong>的<strong>init</strong> 方法和<strong>configure</strong>方法， 先来看<strong>init</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">SecurityContextRepository</span> <span class="hljs-variable">securityContextRepository</span> <span class="hljs-operator">=</span> http.getSharedObject(SecurityContextRepository.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">stateless</span> <span class="hljs-operator">=</span> isStateless();<br><span class="hljs-keyword">if</span> (securityContextRepository == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (stateless) &#123;<br>http.setSharedObject(SecurityContextRepository.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullSecurityContextRepository</span>());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">HttpSessionSecurityContextRepository</span> <span class="hljs-variable">httpSecurityRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpSessionSecurityContextRepository</span>();<br>httpSecurityRepository.setDisableUrlRewriting(!<span class="hljs-built_in">this</span>.enableSessionUrlRewriting);<br>httpSecurityRepository.setAllowSessionCreation(isAllowSessionCreation());<br><span class="hljs-type">AuthenticationTrustResolver</span> <span class="hljs-variable">trustResolver</span> <span class="hljs-operator">=</span> http.getSharedObject(AuthenticationTrustResolver.class);<br><span class="hljs-keyword">if</span> (trustResolver != <span class="hljs-literal">null</span>) &#123;<br>httpSecurityRepository.setTrustResolver(trustResolver);<br>&#125;<br>http.setSharedObject(SecurityContextRepository.class, httpSecurityRepository);<br>&#125;<br>&#125;<br><span class="hljs-type">RequestCache</span> <span class="hljs-variable">requestCache</span> <span class="hljs-operator">=</span> http.getSharedObject(RequestCache.class);<br><span class="hljs-keyword">if</span> (requestCache == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (stateless) &#123;<br>http.setSharedObject(RequestCache.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullRequestCache</span>());<br>&#125;<br>&#125;<br>http.setSharedObject(SessionAuthenticationStrategy.class, getSessionAuthenticationStrategy(http));<br>http.setSharedObject(InvalidSessionStrategy.class, getInvalidSessionStrategy());<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 1. 首先从**HttpSecurity** 中获取**SecurityContextRepository** 实例，如果没有获取到，则进行创建。创建的时候分两种情况，如果SpringSecurity 中的**HttpSession** 创建策略是**STATELESS**，则使用**NullSecurityContextRepository** 来保存**SecurityContext** (相当于不保存 ): 如 果SpringSecurity 中 的**HttpSession** 创建策略不是**STATELESS** ， 则构建 **HttpSessionSecurityContextRepository** 对象，并最终存入**HttpSecurity** 的共享对象中以备使用。 2. 如果**HttpSession** 创建策略是**STATELESS**，还需要将保存在**HtpSecurity**共享对象中的请求缓存对象替换为**NullRequestCache** 的实例。 3. 最后则是分别构建**SessionAuthenticationStrategy** 实例和**InvalidSessionStrategy** 实例存入**HttpSecurity** 共 享对象中，其中**SessionAuthenticationStrategy** 实例是通过 **getSessionAuthenticationStrategy** 方法来获取的，在该方法中， 一共构建了三个SessionAuthentication Strategy 实例，分别是 **ConcurentSessionControlAuthenticationStrategy** 、**ChangeSessionldAuthenticationStrategy** 以及**RegisterSession** **AuthenticationStrategy**，并将这 三个实例由**CompositeSessionAuthenticationStrategy** 进行代理，所以**getSessionAuthenticationStrategy** 方法最终返回的是**CompositeSessionAuthenticationStrategy** 类的实例。</code></pre><p>再来看<strong>configure</strong> 方法的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">SecurityContextRepository</span> <span class="hljs-variable">securityContextRepository</span> <span class="hljs-operator">=</span> http.getSharedObject(SecurityContextRepository.class);<br><span class="hljs-type">SessionManagementFilter</span> <span class="hljs-variable">sessionManagementFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionManagementFilter</span>(securityContextRepository,<br>getSessionAuthenticationStrategy(http));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sessionAuthenticationErrorUrl != <span class="hljs-literal">null</span>) &#123;<br>sessionManagementFilter.setAuthenticationFailureHandler(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleUrlAuthenticationFailureHandler</span>(<span class="hljs-built_in">this</span>.sessionAuthenticationErrorUrl));<br>&#125;<br><span class="hljs-type">InvalidSessionStrategy</span> <span class="hljs-variable">strategy</span> <span class="hljs-operator">=</span> getInvalidSessionStrategy();<br><span class="hljs-keyword">if</span> (strategy != <span class="hljs-literal">null</span>) &#123;<br>sessionManagementFilter.setInvalidSessionStrategy(strategy);<br>&#125;<br><span class="hljs-type">AuthenticationFailureHandler</span> <span class="hljs-variable">failureHandler</span> <span class="hljs-operator">=</span> getSessionAuthenticationFailureHandler();<br><span class="hljs-keyword">if</span> (failureHandler != <span class="hljs-literal">null</span>) &#123;<br>sessionManagementFilter.setAuthenticationFailureHandler(failureHandler);<br>&#125;<br><span class="hljs-type">AuthenticationTrustResolver</span> <span class="hljs-variable">trustResolver</span> <span class="hljs-operator">=</span> http.getSharedObject(AuthenticationTrustResolver.class);<br><span class="hljs-keyword">if</span> (trustResolver != <span class="hljs-literal">null</span>) &#123;<br>sessionManagementFilter.setTrustResolver(trustResolver);<br>&#125;<br>sessionManagementFilter = postProcess(sessionManagementFilter);<br>http.addFilter(sessionManagementFilter);<br><span class="hljs-keyword">if</span> (isConcurrentSessionControlEnabled()) &#123;<br><span class="hljs-type">ConcurrentSessionFilter</span> <span class="hljs-variable">concurrentSessionFilter</span> <span class="hljs-operator">=</span> createConcurrencyFilter(http);<br><br>concurrentSessionFilter = postProcess(concurrentSessionFilter);<br>http.addFilter(concurrentSessionFilter);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.enableSessionUrlRewriting) &#123;<br>http.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisableEncodeUrlFilter</span>());<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sessionPolicy == SessionCreationPolicy.ALWAYS) &#123;<br>http.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceEagerSessionCreationFilter</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>主要是构建 了两个过滤器 <strong>SessionManagementFilter</strong> 和 <strong>ConcurrentSessionFilter</strong>。</li><li><strong>SesionManagementFilter</strong> 过滤器在创建时，也是通过 <strong>getSessionAuthenticationStrategy</strong> 方法获取<strong>SessionAuthenticationStrategy</strong> 实例并传入<strong>sessionManagementFilter</strong> 实例中，然后为其 配置各种回调函数，最终将创建好的<strong>SessionManagementFilter</strong> 加入<strong>HttpSecurity</strong> 过滤器链中。 </li><li>如果配置了会话并发控制( 只要用户调用.<strong>maximumSesions0</strong> 方法配置了会话最大并发数， 就算开启了会话并发控制)，就再创建一个<strong>ConcurrentSessionFilter</strong> 过滤器链并加入<strong>HttpSecurity</strong> 中。</li></ol><p>这就是<strong>SesionManagementConfigurer</strong> 的主要功能。</p><h3 id="8-6-5-SessionManagementFilter"><a href="#8-6-5-SessionManagementFilter" class="headerlink" title="8.6.5 SessionManagementFilter"></a>8.6.5 SessionManagementFilter</h3><p>​和会话并发管理相关的过滤器主要有两个, 先来看第一个<strong>SessionManagementFilter</strong>.</p><p>​<strong>SessionManagementFilter</strong>主要用来处理<strong>RememberMe</strong>登录时的会话管理: 即如果用户使用了<strong>RememberMe</strong>的方式进行认证, 则认证成功后需要进行会话管理, 相关的管理操作通过<strong>SessionManagementFilter</strong>过滤器触发. 我们来看一下该过滤器的<strong>doFilter</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (request.getAttribute(FILTER_APPLIED) != <span class="hljs-literal">null</span>) &#123;<br>chain.doFilter(request, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>request.setAttribute(FILTER_APPLIED, Boolean.TRUE);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.securityContextRepository.containsContext(request)) &#123;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br><span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.trustResolver.isAnonymous(authentication)) &#123;<br><span class="hljs-comment">// The user has been authenticated during the current request, so call the</span><br><span class="hljs-comment">// session strategy</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.sessionAuthenticationStrategy.onAuthentication(authentication, request, response);<br>&#125;<br><span class="hljs-keyword">catch</span> (SessionAuthenticationException ex) &#123;<br><span class="hljs-comment">// The session strategy can reject the authentication</span><br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;SessionAuthenticationStrategy rejected the authentication object&quot;</span>, ex);<br>SecurityContextHolder.clearContext();<br><span class="hljs-built_in">this</span>.failureHandler.onAuthenticationFailure(request, response, ex);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// Eagerly save the security context to make it available for any possible</span><br><span class="hljs-comment">// re-entrant requests which may occur before the current request</span><br><span class="hljs-comment">// completes. SEC-1396.</span><br><span class="hljs-built_in">this</span>.securityContextRepository.saveContext(SecurityContextHolder.getContext(), request, response);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// No security context or authentication present. Check for a session</span><br><span class="hljs-comment">// timeout</span><br><span class="hljs-keyword">if</span> (request.getRequestedSessionId() != <span class="hljs-literal">null</span> &amp;&amp; !request.isRequestedSessionIdValid()) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Request requested invalid session id %s&quot;</span>,<br>request.getRequestedSessionId()));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.invalidSessionStrategy != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.invalidSessionStrategy.onInvalidSessionDetected(request, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>chain.doFilter(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>​在该过滤器中, 通过<strong>containsContext</strong>方法去判断当前会话中是否存在<strong>SPRING_SECURITY_CONTEXT</strong>变量. 如果是正常的认证流程, 则<strong>SPRING_SECURITY_CONTEXT</strong>变量是存在于当前会话中的. 那么什么时候不存在呢? 有两种情况:</p><ol><li>用户使用了<strong>RememberMe</strong>方法进行认证</li><li>用户匿名访问了某个接口.</li></ol><p>​对于第一种情况, <strong>SecurityContextHolder</strong>中获取到的当前用户实例是<strong>RememberMeAuthenticationToken</strong>; </p><p>​对于第二种情况, <strong>SecurityContextHolder</strong>中获取到的当前用户实例是<strong>AnonymousAuthenticationToken</strong>. 所以, 接下来就是对这两种情况进行区分, 如果是第一种情况, 则调用<strong>SessionAuthenticationStrategy</strong>中的<strong>onAuthentication</strong>方法进行会话管理; 如果是第二种情况, 则进行会话失效处理.</p><p><span style="color:red;">总的来说这个会过滤器的主要作用是: 将<strong>session</strong>注册到<strong>sessionRegistry</strong></span></p><h3 id="8-6-6-ConcurrentSessionFilter"><a href="#8-6-6-ConcurrentSessionFilter" class="headerlink" title="8.6.6 ConcurrentSessionFilter"></a>8.6.6 ConcurrentSessionFilter</h3><p>​<strong>concurrentSessionFilter</strong>过滤器是一个处理会话并发管理的过滤器, 我们来看一下它的<strong>doFilter</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">SessionInformation</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sessionRegistry.getSessionInformation(session.getId());<br><span class="hljs-keyword">if</span> (info != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (info.isExpired()) &#123;<br><span class="hljs-comment">// Expired - abort processing</span><br><span class="hljs-built_in">this</span>.logger.debug(LogMessage<br>.of(() -&gt; <span class="hljs-string">&quot;Requested session ID &quot;</span> + request.getRequestedSessionId() + <span class="hljs-string">&quot; has expired.&quot;</span>));<br>doLogout(request, response);<br><span class="hljs-built_in">this</span>.sessionInformationExpiredStrategy<br>.onExpiredSessionDetected(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionInformationExpiredEvent</span>(info, request, response));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// Non-expired - update last request date/time</span><br><span class="hljs-built_in">this</span>.sessionRegistry.refreshLastRequest(info.getSessionId());<br>&#125;<br>&#125;<br>chain.doFilter(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>​从<strong>doFilter</strong>方法中可以看到, 当请求通过时, 首先先获取当前会话, 如果当前会话不为null, 则进而获取当前会话所对应的<strong>SessionInformation</strong>实例; 如果<strong>SessionInformation</strong>实例已经过期, 则调用<strong>doLogout</strong>方法执行注销操作, 同时调用会话过期的回调; 如果<strong>SessionInformation</strong>实例没有过期, 则刷新当前会话的最后一次请求时间.</p><h3 id="8-6-7-session的创建时期"><a href="#8-6-7-session的创建时期" class="headerlink" title="8.6.7 session的创建时期"></a>8.6.7 session的创建时期</h3><p>​在讲解配置类之前, 需要先了解一下SpringSecurity中<strong>Session</strong>的创建时机问题. 在SpringSecurity中, <strong>HttpSession</strong>的创建策略一共分为四种:</p><ol><li><strong>ALWAYS</strong>: 如果<strong>HttpSession</strong>不存在, 就创建</li><li><strong>NEVER</strong>: 从不创建<strong>HttpSession</strong>, 但是如果<strong>HttpSession</strong>已经存在了, 则会使用它</li><li><strong>IF_REQUIRED</strong>: 当有需要时, 会创建<strong>HttpSession</strong>, 默认即此.</li><li><strong>STATELESS</strong>: 从不创建<strong>HttpSession</strong>, 从不使用<strong>HttpSession</strong></li></ol><p>​需要注意的是, 这四种策略仅仅是指<strong>SpringSecurity</strong>中<strong>HttpSession</strong>的创建策略, 而并非整个应用程序中<strong>HttpSession</strong>的创建策略. 前三种策略都很好理解.关于第四种, 有可能会有疑惑, 如果完全不使用<strong>HttpSession</strong>那么<strong>SpringSecurity</strong>还能发挥作用吗?当然可以, 如果系统使用了无状态认证方式, 就可以使用<strong>STATELESS</strong>策略, 这就意味着服务端不会创建<strong>HttpSession</strong>, 客户端的每个请求都需要携带认证信息, 同时, 一些和<strong>HttpSession</strong>相关的过滤器也将失效, 如<strong>SessionManagementFilter</strong>、<strong>ConcurrentSessionFilter</strong>等.</p><p>​一般来说, 我们使用默认的<strong>IF_REQUIRED</strong>即可, 如果读者需要配置, 可以通过如下方式进行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="8-6-8-session并发管理时机"><a href="#8-6-8-session并发管理时机" class="headerlink" title="8.6.8 session并发管理时机"></a>8.6.8 session并发管理时机</h3><p>​看完前面的分析, 读者可能还是有疑惑, 登录成功后, <strong>Session</strong>并发管理到底是在哪里触发的? 虽然经过前面的分析, 大家知道了两个过滤器的存在: <strong>SessionManagementFilter</strong>和<strong>ConcurrentSessionFilter</strong>, 但是前者在用户使用<strong>RememberMe</strong>认证时, 才会触发<strong>Session</strong>并发管理, 后者则根本不会触发Session并发管理, 那么用户登录成功后, 到底是在哪里触发<strong>Session</strong>并发管理的呢?</p><p>​这里我们可以回到登录过滤器<strong>AbstractAuthenticationProcessingFilter</strong>的<strong>doFilter</strong>方法中去看一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (!requiresAuthentication(request, response)) &#123;<br>chain.doFilter(request, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticationResult</span> <span class="hljs-operator">=</span> attemptAuthentication(request, response);<br><span class="hljs-keyword">if</span> (authenticationResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// return immediately as subclass has indicated that it hasn&#x27;t completed</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>      <span class="hljs-comment">//触发Session并发管理</span><br><span class="hljs-built_in">this</span>.sessionStrategy.onAuthentication(authenticationResult, request, response);<br><span class="hljs-comment">// Authentication success</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;<br>chain.doFilter(request, response);<br>&#125;<br>successfulAuthentication(request, response, chain, authenticationResult);<br>&#125;<br><span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException failed) &#123;<br><span class="hljs-built_in">this</span>.logger.error(<span class="hljs-string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, failed);<br>unsuccessfulAuthentication(request, response, failed);<br>&#125;<br><span class="hljs-keyword">catch</span> (AuthenticationException ex) &#123;<br><span class="hljs-comment">// Authentication failed</span><br>unsuccessfulAuthentication(request, response, ex);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到, 在调用<strong>attemptAuthentication</strong>方法进行登录认证之后, 接下来就调用了<strong>sessionStrategy.onAuthentication</strong>方法触发<strong>Session</strong>并发管理.</p><p>​这里的<strong>sessionStrategy</strong>对象则是在<strong>AbstractAuthenticationFilterConfigurer</strong>类的<strong>configure</strong>方法进行配置的, 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAuthenticationFilterConfigurer</span>&lt;B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSecurityBuilder</span>&lt;B&gt;, T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAuthenticationFilterConfigurer</span>&lt;B, T, F&gt;, F <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAuthenticationProcessingFilter</span>&gt;<br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHttpConfigurer</span>&lt;T, B&gt; &#123;<br>  <br>  <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(B http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">SessionAuthenticationStrategy</span> <span class="hljs-variable">sessionAuthenticationStrategy</span> <span class="hljs-operator">=</span> http<br>.getSharedObject(SessionAuthenticationStrategy.class);<br><span class="hljs-keyword">if</span> (sessionAuthenticationStrategy != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.authFilter.setSessionAuthenticationStrategy(sessionAuthenticationStrategy);<br>&#125;<br>    .....<br>  &#125;<br></code></pre></td></tr></table></figure><p>​可以看到, 这里从<strong>HttpSecurity</strong>的共享对象中获取到<strong>SessionAuthenticationStrategy</strong>实例( 在<strong>SessionManagementConfigurer</strong>#<strong>init</strong>方法中存入<strong>HttpSecurity</strong>共享对象), 并设置到<strong>authFilter</strong>过滤器中.</p><p>​</p><h3 id="8-6-9-总结"><a href="#8-6-9-总结" class="headerlink" title="8.6.9 总结"></a>8.6.9 总结</h3><p>​我们再来梳理一下:</p><pre><code class="hljs">1. 用户通过用户名/密码发起一个认证请求, 当认证成功后, 在**AbstractAuthenticationProcessingFilter**#**doFilter**方法中触发了**Session**并发管理.1. 默认的**sessionStrategy**是**CompositeSessionAuthenticationStrategy**, 它一共代理了三个**SessionAuthenticationStrategy**, 分别是**ConcurrentSessionControlAuthenticationStrategy**、**ChangeSessionIdAuthenticationStrategy**、**RegisterSessionAuthenticationStrategy**. 1. 当前请求在这三个**SessionAuthenticationStrategy**这分别走一圈, 第一个用来判断当前登录用户的**Session**数量是否已经超过了限制, 如果超出了限制就根据配置好的的规则进行处理, 第二个用来修改**sessionId**(防止会话固定攻击); 第三个用来将当前**Session**注册到**SessionRegistry**中. 使用用户名/密码的方式完成认证, 将不会涉及到**ConcurrentSessionFilter**和**SessionManagementFilter**两个过滤器. 如果用户使用了**RememberMe**的方式进行身份认证, 则会通过**SessionManagementFilter**#**doFilter**方法触发**Session**并发管理. 当用户认证成功后, 以后的每一次请求都会经过**ConcurrentSessionFilter**, 在该过滤器中, 判断当前会话是否已经过期, 如果过期则会执行注销登录流程; 如果没有过期, 则更新最近一次请求时间.</code></pre><h1 id="第九章-CSRF-漏洞保护"><a href="#第九章-CSRF-漏洞保护" class="headerlink" title="第九章 CSRF 漏洞保护"></a>第九章 CSRF 漏洞保护</h1><ul><li><p>CSRF 简介</p></li><li><p>CSRF 防御&amp;基本配置</p></li><li><p>实战</p></li></ul><h3 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h3><p><strong>CSRF</strong> (Cross-Site Request Forgery <strong>跨站请求伪造</strong>)，也可称为一键式攻击 (one-click-attack），通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>。</p><p><code>CSRF</code> 攻击是一种挟持用户在当前已登录的浏览器上发送恶意请求的攻击方法。相对于XSS利用用户对指定网站的信任，CSRF则是利用网站对用户网页浏览器的信任。简单来说，CSRF是致击者通过一些技术手段欺骗用户的浏览器，去访问一个用户曾经认证过的网站并执行恶意请求，例如发送邮件、发消息、甚至财产操作 (如转账和购买商品）。由于客户端(浏览器)已经在该网站上认证过，所以该网站会认为是真正用户在操作而执行请求（实际上这个并非用户的本意）。</p><p><strong>举个简单的例子：</strong></p><p>假设 blr 现在登录了某银行的网站准备完成一项转账操作，转账的链接如下：</p><p><strong>https: &#x2F;&#x2F;bank .xxx .com&#x2F;withdraw?account&#x3D;blr&amp;amount&#x3D;1000&amp;for&#x3D;zhangsan</strong></p><p>可以看到，这个链接是想从 blr 这个账户下转账 1000 元到 zhangsan 账户下，假设blr 没有注销登录该银行的网站，就在同一个浏览器新的选项卡中打开了一个危险网站，这个危险网站中有一幅图片，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://bank.xxx.com/withdraw?account=javaboy&amp;amount=1000</span></span><br><span class="hljs-string"><span class="hljs-tag">&amp;for=1isi&quot;</span> /</span><br></code></pre></td></tr></table></figure><p>一旦用户打开了这个网站，这个图片链接中的请求就会自动发送出去。由于是同一个浏览器并且用户尚未注销登录，所以该请求会自动携带上对应的有效的 Cookie 信息，进而完成一次转账操作。这就是跨站请求伪造。</p><h3 id="9-2-CSRF攻击演示"><a href="#9-2-CSRF攻击演示" class="headerlink" title="9.2 CSRF攻击演示"></a>9.2 CSRF攻击演示</h3><h4 id="9-2-1-创建银行应用"><a href="#9-2-1-创建银行应用" class="headerlink" title="9.2.1 创建银行应用"></a>9.2.1 创建银行应用</h4><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests().anyRequest().authenticated()<br>                .and().formLogin().and().csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 controller 并启动启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/withdraw&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">withdraw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行一次转账操作&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;执行一次转账操作&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-2-2-创建恶意应用"><a href="#9-2-2-创建恶意应用" class="headerlink" title="9.2.2 创建恶意应用"></a>9.2.2 创建恶意应用</h4><ul><li><p>创建简单 springboot 应用</p></li><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure></li><li><p>准备攻击页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1:8080/withdraw&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;blr&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;money&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="9-3-CSRF-防御"><a href="#9-3-CSRF-防御" class="headerlink" title="9.3 CSRF 防御"></a>9.3 CSRF 防御</h3><p><strong>CSRF</strong>攻击的根源在于浏览器默认的身份验证机制(自动携带当前网站的Cookie信息)，这种机制虽然可以保证请求是来自用户的某个浏览器，但是无法确保这请求是用户授权发送。攻击者和用户发送的请求一模一样，这意味着我们没有办法去直接拒绝这里的某一个请求。如果能在合法清求中额外携带一个攻击者无法获取的参数，就可以成功区分出两种不同的请求，进而直接拒绝掉恶意请求。在 SpringSecurity 中就提供了这种机制来防御 CSRF 攻击，这种机制我们称之为<code>令牌同步模式</code>。</p><h4 id="9-3-1-令牌同步模式"><a href="#9-3-1-令牌同步模式" class="headerlink" title="9.3.1 令牌同步模式"></a>9.3.1 令牌同步模式</h4><p>这是目前主流的 CSRF 攻击防御方案。具体的操作方式就是在每一个 HTTP 请求中，除了默认自动携带的 Cookie 参数之外，再提供一个安全的、随机生成的宇符串，我们称之为 CSRF 令牌。这个 CSRF 令牌由服务端生成，生成后在 HtpSession 中保存一份。当前端请求到达后，将请求携带的 CSRF 令牌信息和服务端中保存的令牌进行对比，如果两者不相等，则拒绝掉该 HITTP 请求。</p><blockquote><p><strong>注意:</strong> 考虑到会有一些外部站点链接到我们的网站，所以我们要求请求是幂等的，这样对子HEAD、OPTIONS、TRACE 等方法就没有必要使用 CSRF 令牌了，强行使用可能会导致令牌泄露！</p></blockquote><h4 id="9-3-2-开启-CSRF-防御"><a href="#9-3-2-开启-CSRF-防御" class="headerlink" title="9.3.2 开启 CSRF 防御"></a>9.3.2 开启 CSRF 防御</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.<br>          ...<br>          formLogin()<br>          .and()<br>          .csrf(); <span class="hljs-comment">//开启 csrf</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-3-3-查看登录页面源码"><a href="#9-3-3-查看登录页面源码" class="headerlink" title="9.3.3 查看登录页面源码"></a>9.3.3 查看登录页面源码</h4><p><img src="/2022/01/26/SpringSecurity/image-20220418191456109.png" alt="image-20220418191456109"></p><h3 id="9-4-传统web开发使用CSRF"><a href="#9-4-传统web开发使用CSRF" class="headerlink" title="9.4 传统web开发使用CSRF"></a>9.4 传统web开发使用CSRF</h3><p>开启CSRF防御后会自动在提交的表单中加入如下代码，如果不能自动加入，需要在开启之后手动加入如下代码，并随着请求提交。获取服务端令牌方式如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-4-1-开发测试-controller"><a href="#9-4-1-开发测试-controller" class="headerlink" title="9.4.1 开发测试 controller"></a>9.4.1 开发测试 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello success&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-4-2-创建-html"><a href="#9-4-2-创建-html" class="headerlink" title="9.4.2 创建 html"></a>9.4.2 创建 html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试 CSRF 防御<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-4-3-测试查看index-html源码"><a href="#9-4-3-测试查看index-html源码" class="headerlink" title="9.4.3 测试查看index.html源码"></a>9.4.3 测试查看index.html源码</h4><p><img src="/2022/01/26/SpringSecurity/image-20220418193519717.png" alt="image-20220418193519717"></p><h3 id="9-5-前后端分离使用-CSRF"><a href="#9-5-前后端分离使用-CSRF" class="headerlink" title="9.5 前后端分离使用 CSRF"></a>9.5 前后端分离使用 CSRF</h3><p>前后端分离开发时，只需要将生成 csrf 放入到cookie 中，并在请求时获取 cookie 中令牌信息进行提交即可。</p><h4 id="9-5-1-修改-CSRF-存入-Cookie"><a href="#9-5-1-修改-CSRF-存入-Cookie" class="headerlink" title="9.5.1 修改 CSRF 存入 Cookie"></a>9.5.1 修改 CSRF 存入 Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests().anyRequest().authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .csrf()<br>                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-5-2-访问登录界面查看-cookie"><a href="#9-5-2-访问登录界面查看-cookie" class="headerlink" title="9.5.2 访问登录界面查看 cookie"></a>9.5.2 访问登录界面查看 cookie</h4><p><img src="/2022/01/26/SpringSecurity/image-20220418194059737.png" alt="image-20220418194059737"></p><h4 id="9-5-3-发送请求携带令牌即可"><a href="#9-5-3-发送请求携带令牌即可" class="headerlink" title="9.5.3 发送请求携带令牌即可"></a>9.5.3 发送请求携带令牌即可</h4><ul><li>请求参数中携带令牌</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">key:</span> <span class="hljs-string">_csrf</span>  <br><span class="hljs-string">value:&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><ul><li>请求头中携带令牌</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">X-XSRF-TOKEN:value<br></code></pre></td></tr></table></figure><h1 id="第十章-跨域"><a href="#第十章-跨域" class="headerlink" title="第十章 跨域"></a>第十章 跨域</h1><ul><li>Spring 处理方案。</li><li>Spring Security 处理方案。</li></ul><h2 id="10-1-简介"><a href="#10-1-简介" class="headerlink" title="10.1 简介"></a>10.1 简介</h2><p>跨域问题是实际应用开发中一个非常常见的需求，在 Spring 框架中对于跨域问题的处理方案有好几种，引 了 Spring Security 之后，跨域问题的处理方案又增加了。</p><h2 id="10-2-什么是-CORS"><a href="#10-2-什么是-CORS" class="headerlink" title="10.2 什么是 CORS"></a>10.2 什么是 CORS</h2><p><strong>CORS</strong> (Cross-Origin Resource Sharing ）是由 W3C制定的一种跨域资源共享技术标准，其目的就是为了解决前端的跨域请求。在JavaEE 开发中，最常见的前端跨域请求解决方案是早期的JSONP，但是 JSONP 只支持 GET 请求，这是一个很大的缺陷，而 <strong>CORS</strong> 则支特多种 HTTTP请求方法，也是目前主流的跨域解决方案。</p><p><strong>CORS</strong> 中新增了一组HTTP 请求头字段，通过这些字段，服务器告诉浏览器，那些网站通过浏览器有权限访问哪些资源。同时规定，对那些可能修改服务器数据的HTTP请求方法 （如GET以外的HTTP 请求等)，浏览器必须首先使用 <strong>OPTIONS</strong> 方法发起一个预检请求(prenightst），预检请求的目的是查看服务端是否支持即将发起的跨域请求，如果服务端允许，才发送实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（如 Cookies、HTTP 认证信息等）。</p><blockquote><p> CORS: 同源&#x2F;同域 &#x3D; 协议+主机+端口</p></blockquote><h3 id="10-2-1-简单请求"><a href="#10-2-1-简单请求" class="headerlink" title="10.2.1 简单请求"></a>10.2.1 简单请求</h3><p>GET 请求为例，如果需要发起一个跨域请求，则请求头如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8081<br>Referer:http://localhost:8081/index.html<br></code></pre></td></tr></table></figure><p>如果服务端支持该跨域请求，那么返回的响应头中将包含如下字段：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">Access-Control-Allow-Origin:http://localhost: 8081<br></code></pre></td></tr></table></figure><p><strong>Access-Control-Allow-Origin</strong> 字段用来告诉浏览器可以访问该资源的域，当浏览器收到这样的响应头信息之后，提取出 <strong>Access-Control-Allow-Origin</strong> 字段中的值， 发现该值包含当前页面所在的域，就知道这个跨域是被允许的，因此就不再对前端的跨域请求进行限制。这属于简单请求，即不需要进行预检请求的跨域。</p><h3 id="10-2-2-非简单请求"><a href="#10-2-2-非简单请求" class="headerlink" title="10.2.2 非简单请求"></a>10.2.2 非简单请求</h3><p>对于一些非简单请求，会首先发送一个预检请求。预检请求类似下面这样：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">OPTIONS</span> <span class="hljs-string">/put</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br>Access-Control-Request-Method:PUT<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost: 8081<br>Referer:http://localhost:8081/index.html<br></code></pre></td></tr></table></figure><p>请求方法是 <strong>OPTIONS</strong>，请求头<strong>Origin</strong> 就告诉服务端当前页面所在域，请求头 <strong>Access-Control-Request-Methods</strong> 告诉服务器端即将发起的跨域请求所使用的万法。服务端对此进行判断，如果允许即将发起的跨域请求，则会给出如下响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span><br>Access-Control-Allow-Origin:http://localhost: 8081<br><span class="hljs-attribute">Access-Control-Request-Methods</span><span class="hljs-punctuation">: </span>PUT<br><span class="hljs-attribute">Access-Control-Max-Age</span><span class="hljs-punctuation">: </span>3600<br></code></pre></td></tr></table></figure><p>Access-Control-Allow-Metbods 字段表示允许的跨域方法：Access-Control-Max-Age 字段表示预检请求的有效期，单位为秒，在有效期内如果发起该跨域请求，则不用再次发起预检请求。预检请求结朿后，接下来就会发起一个真正的跨域请求，跨域请求和前面的简单请求跨域步骤类似。</p><h2 id="10-3-Spring-跨域解决方案"><a href="#10-3-Spring-跨域解决方案" class="headerlink" title="10.3 Spring 跨域解决方案"></a>10.3 Spring 跨域解决方案</h2><h3 id="10-3-1-CrossOrigin"><a href="#10-3-1-CrossOrigin" class="headerlink" title="10.3.1 @CrossOrigin"></a>10.3.1 @CrossOrigin</h3><p>Spring 中第一种处理跨域的方式是通过@CrossOrigin 注解来标记支持跨域，该注解可以添加在方法上，也可以添加在 Controller 上。当添加在 Controller 上时，表示 Controller 中的所</p><p>有接口都支持跨域，具体配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> Class HelloController&#123;<br><span class="hljs-meta">@CrossOrigin</span> (origins =<span class="hljs-string">&quot;http://localhost:8081&quot;</span>)<br><span class="hljs-meta">@PostMapping</span> (<span class="hljs-string">&quot;/post&quot;</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello post&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@CrossOrigin 注解各属性含义如下：</p><ul><li><p>alowCredentials：浏览器是否应当发送凭证信息，如 Cookie。</p></li><li><p>allowedHeaders： 请求被允许的请求头字段，<code>*</code>表示所有字段。</p></li><li><p>exposedHeaders：哪些响应头可以作为响应的一部分暴露出来。</p><p><code>注意，这里只可以一一列举，通配符 * 在这里是无效的。</code></p></li><li><p>maxAge：预检请求的有效期，有效期内不必再次发送预检请求，默认是<code>1800 </code>秒。</p></li><li><p>methods：允许的请求方法，<code>*</code> 表示允许所有方法。</p></li><li><p>origins：允许的域，<code>*</code>表示允许所有域。</p></li></ul><h3 id="10-3-2-addCrosMapping"><a href="#10-3-2-addCrosMapping" class="headerlink" title="10.3.2 addCrosMapping"></a>10.3.2 addCrosMapping</h3><p><strong>@CrossOrigin</strong> 注解需要添加在不同的 Controller 上。所以还有一种全局配置方法，就是通过重写 WebMvcConfigurerComposite#addCorsMappings方法来实现，具体配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Configuration<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br>  Override<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span> <span class="hljs-params">(CorsRegistry registry)</span>&#123;<br>    registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">//处理的请求地址</span><br>    .allowedMethods (<span class="hljs-string">&quot;*&quot;</span>)<br>    •allowedorigins(<span class="hljs-string">&quot;*&quot;</span>)<br>    .allowedHeaders (<span class="hljs-string">&quot;*&quot;</span>)<br>    .allowCredentials (<span class="hljs-literal">false</span>)<br>    •exposedHeaders (<span class="hljs-string">&quot;&quot;</span>)<br>    .maxAge (<span class="hljs-number">3600</span>) ;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3-3-CrosFilter"><a href="#10-3-3-CrosFilter" class="headerlink" title="10.3.3 CrosFilter"></a>10.3.3 CrosFilter</h3><p><strong>CorsFilter</strong> 是Spring Web 中提供的一个处理跨域的过滤器，开发者也可以通过该过该过滤器处理跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    FilterRegistrationBean&lt;CorsFilter&gt; <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>        FilterRegistrationBean&lt;CorsFilter&gt; registrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>        corsConfiguration.setAllowedHeaders(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setAllowedMethods(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setAllowedOrigins(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setMaxAge(<span class="hljs-number">3600L</span>);<br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration);<br>        registrationBean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(source));<br>        registrationBean.setOrder(-<span class="hljs-number">1</span>);<span class="hljs-comment">//filter 0 1</span><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里提供一个跨域测试, 直接在浏览器可以直接测试:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> token= <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleV86IjoiMGY4YTlmYzgtODZmMi00NjM3LWFlNGUtYTdmYTQyMzIzMmYwIn0.9NR3VRvgOg2USyCMyUaBEpZKETj3tn9eIdnQo7vXQH_0hwqWOKAkSxCYNtYOnPoRLEOaJQTVdq22grvvqYU4Fw&quot;</span>;<br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:9200/bar/hello&#x27;</span>);<br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;x-access-token&quot;</span>,token);<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);<br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> xhr = e.<span class="hljs-property">target</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10-4-Spring-Security-跨域解决方案"><a href="#10-4-Spring-Security-跨域解决方案" class="headerlink" title="10.4 Spring Security 跨域解决方案"></a>10.4 Spring Security 跨域解决方案</h2><h3 id="10-4-1-原理分析"><a href="#10-4-1-原理分析" class="headerlink" title="10.4.1 原理分析"></a>10.4.1 原理分析</h3><p>当我们为项目添加了 Spring Security 依赖之后，发现上面三种跨域方式有的失效了，有则可以继续使用，这是怎么回事？</p><p>通过**@CrossOrigin** 注解或者重写 <strong>addCorsMappings</strong> 方法配置跨域，统统失效了，通过<strong>CorsFilter</strong> 配置的跨域，有没有失效则要看过滤器的优先级，如果过滤器优先级高于 <strong>SpringSecurity</strong> 过滤器，即先于 Spring Security 过滤器执行，则 <strong>CorsFiter</strong> 所配置的跨域处理依然有效；如果过滤器优先级低于 Spring Security 过滤器，则 <strong>CorsFilter</strong> 所配置的跨域处理就会失效。</p><p>为了理清楚这个问题，我们先简略了解一下 <strong>Filter</strong>、<strong>DispatchserServlet</strong> 以及<strong>Interceptor</strong> 执行顺序。</p><p><img src="/2022/01/26/SpringSecurity/image-20220521074711128.png" alt="image-20220521074711128"></p><p>理清楚了执行顺序，我们再来看跨域请求过程。由于非简单请求都要首先发送一个预检请求<br>request），而预检请求并不会携带认证信息，所以预检请求就有被 Spring Security 拦截的可能。因此通过@CrossOrigin 注解或者重写 addCorsMappings 方法配置跨域就会失效。如果使用 CorsFilter 配置的跨域，只要过滤器优先级高于 SpringSecurity 过滤器就不会有问题。反之同样会出现问题。</p><h3 id="10-4-2-解决方案"><a href="#10-4-2-解决方案" class="headerlink" title="10.4.2 解决方案"></a>10.4.2 解决方案</h3><p>Spring Security 中也提供了更专业的方式来解决预检请求所面临的问题。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests().anyRequest()<br>                .authenticated()<br>                .and()<br>                .formLogin()<br>                .and()<br>                .cors() <span class="hljs-comment">//跨域处理方案</span><br>                .configurationSource(configurationSource())<br>                .and()<br>                .csrf().disable();<br>    &#125;<br><br>    CorsConfigurationSource <span class="hljs-title function_">configurationSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>        corsConfiguration.setAllowedHeaders(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setAllowedMethods(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setAllowedOrigins(Arrays.asList(<span class="hljs-string">&quot;*&quot;</span>));<br>        corsConfiguration.setMaxAge(<span class="hljs-number">3600L</span>);<br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration);<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第十一章-异常处理"><a href="#第十一章-异常处理" class="headerlink" title="第十一章 异常处理"></a>第十一章 异常处理</h1><ul><li>Spring Security 异常体系</li><li>自定义异常配置</li></ul><h3 id="11-1-异常体系"><a href="#11-1-异常体系" class="headerlink" title="11.1 异常体系"></a>11.1 异常体系</h3><p>Spring Security 中异常主要分为两大类:</p><ul><li><strong>AuthenticationException</strong>:  认证异常</li><li><strong>AccessDeniedException</strong>:    授权异常</li></ul><blockquote><p>认证异常</p></blockquote><img src="/2022/01/26/SpringSecurity/image-20230402223226568.png" alt="image-20230402223226568" style="zoom:67%;"><p>其中认证所涉及异常类型比较多，默认提供的异常类型如下：</p><p><img src="/2022/01/26/SpringSecurity/image-20220430213210778.png" alt="image-20220430213210778"></p><blockquote><p>权限异常</p></blockquote><p>相比于认证异常，权限异常类就要少了很多，默认提供的权限异常如下：</p><p><img src="/2022/01/26/SpringSecurity/image-20230402223444247-0446086.png" alt="image-20230402223444247"></p><p><img src="/2022/01/26/SpringSecurity/image-20220430213344621.png" alt="image-20220430213344621"></p><p>在实际项目开发中，如果默认提供异常无法满足需求时，就需要根据实际需要来自定义异常类。</p><h3 id="11-2-ExceptionTranslationFilter原理分析"><a href="#11-2-ExceptionTranslationFilter原理分析" class="headerlink" title="11.2 ExceptionTranslationFilter原理分析"></a>11.2 ExceptionTranslationFilter原理分析</h3><p>​SpringSecurity中的异常处理主要是在<strong>ExceptionTranslationFilter</strong> 过滤器中完成的，该过滤器主要处理<strong>AuthenticationException</strong> 和<strong>AccesDeniedException</strong> 类型的异常，其他异常则会继续抛出 ， 交给上一层容器去处理 。</p><p>​接下来我们来分析<strong>ExceptionTranslationFilter</strong> 的工作原理。</p><p>​在<strong>SecurityFilterChain</strong>中进行<strong>HttpSecurity</strong> 初始化的时候，就调用了<strong>exceptionHandling()</strong> 方法去配置<strong>ExceptionTranslationFilter</strong> 过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">http<br>.csrf(withDefaults())<br>.addFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAsyncManagerIntegrationFilter</span>())<br>.exceptionHandling(withDefaults())<br>.headers(withDefaults())<br>.sessionManagement(withDefaults())<br>.securityContext(withDefaults())<br>.requestCache(withDefaults())<br>.anonymous(withDefaults())<br>.servletApi(withDefaults())<br>.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultLoginPageConfigurer</span>&lt;&gt;());<br></code></pre></td></tr></table></figure><p>​<strong>exceptionHandling()<strong>方法就是调用</strong>ExceptionHandlingConfigurer</strong> 去配置<strong>ExceptionTranslationFiter</strong>。对<strong>ExceptionHandlingConfigurer</strong>配置类而言，最重要的当然就是它里边的<strong>configure</strong> 方法了，我们来看 一下该方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">AuthenticationEntryPoint</span> <span class="hljs-variable">entryPoint</span> <span class="hljs-operator">=</span> getAuthenticationEntryPoint(http);<br><span class="hljs-type">ExceptionTranslationFilter</span> <span class="hljs-variable">exceptionTranslationFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionTranslationFilter</span>(entryPoint,<br>getRequestCache(http));<br><span class="hljs-type">AccessDeniedHandler</span> <span class="hljs-variable">deniedHandler</span> <span class="hljs-operator">=</span> getAccessDeniedHandler(http);<br>exceptionTranslationFilter.setAccessDeniedHandler(deniedHandler);<br>exceptionTranslationFilter = postProcess(exceptionTranslationFilter);<br>http.addFilter(exceptionTranslationFilter);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">1. 这里首先获取到 一个**entryPoint** 对象，这个就是认证失败时的处理器，然后创建**ExceptionTranslationFilter** 过滤器并传入**entryPoint**。1. 接下来还会获取到一个**deniedHandler** 对象设置给**ExceptionTranslationFilter** 过滤器，这个**deniedHandler** 就是权限异常处理器。最后调用**postProcess** 方法将 **ExceptionTranslationFilter** 过滤器注册到Spring 容器中，然后调用 **addFilter** 方法再将其添加到SpringSecurity过滤器链中。</code></pre><h4 id="11-2-1-AuthenticationEntryPoint"><a href="#11-2-1-AuthenticationEntryPoint" class="headerlink" title="11.2.1 AuthenticationEntryPoint"></a>11.2.1 AuthenticationEntryPoint</h4><p><strong>AuthenticationEntryPoint</strong> 实例是通过<strong>getAuthenticationEntryPoint</strong> 方法获取到的，我们来具体看一 下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">AuthenticationEntryPoint <span class="hljs-title function_">getAuthenticationEntryPoint</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">AuthenticationEntryPoint</span> <span class="hljs-variable">entryPoint</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authenticationEntryPoint;<br><span class="hljs-keyword">if</span> (entryPoint == <span class="hljs-literal">null</span>) &#123;<br>entryPoint = createDefaultEntryPoint(http);<br>&#125;<br><span class="hljs-keyword">return</span> entryPoint;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> AuthenticationEntryPoint <span class="hljs-title function_">createDefaultEntryPoint</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultEntryPointMappings.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Http403ForbiddenEntryPoint</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultEntryPointMappings.size() == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultEntryPointMappings.values().iterator().next();<br>&#125;<br><span class="hljs-type">DelegatingAuthenticationEntryPoint</span> <span class="hljs-variable">entryPoint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingAuthenticationEntryPoint</span>(<br><span class="hljs-built_in">this</span>.defaultEntryPointMappings);<br>entryPoint.setDefaultEntryPoint(<span class="hljs-built_in">this</span>.defaultEntryPointMappings.values().iterator().next());<br><span class="hljs-keyword">return</span> entryPoint;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认情况下，系统的<strong>authenticationEntryPoint</strong> 属性值为<strong>null</strong>，所以最终还是通过<strong>createDefaultEntryPoint</strong> 方法来获取<strong>AuthenticationEntryPoint</strong> 实例。在<strong>createDefaultEntryPoint</strong> 方法中有 一个 <strong>defaultEntryPointMappings</strong>变量，它是一个**LinkedHashMap&lt;RequestMatcher,AuthenticationEntryPoint&gt;**类型。</li><li>可以看到,  这个<strong>LinkedHashMap</strong>的<strong>key</strong>是一个 <strong>RequestMatcher</strong> ， 即一个请求匹配器 ， 而<strong>value</strong>则是一个<strong>AuthenticationEntryPoint</strong> 认证失败处理器，即一个请求匹配器对应一个认证失败处理器 。 换句话说 ，针对不同的请求 ，可以给出不同的认证失败处理器 。 如果<strong>defaultEntryPointMappings</strong>变量为空，则返回 一个<strong>Htp403ForbiddenEntryPoint</strong> 类型的处理器:如果<strong>defaultEntryPointMappings</strong>变量中只有一项 ， 则将这一项取出来返回即可; 如果<strong>defaultEntryPointMappings</strong>变量中有多项，则使用 <strong>DelegatingAuthenticationEntryPoint</strong> 代理类，在代理类中，会遍历 <strong>defaultEntryPointMappings</strong> 变量中的每一项，查看当前请求是否满足其<strong>RequestMatcher</strong>，如果满足，则使用对应的认证失败处理器来处理。</li><li>当我们新建 一个Spring Security项目，不做任何配置时，在<strong>WebSecurityConfigurerAdapter#configure(HttpSecurity)<strong>方法中默认会配置表单登录和HTTP 基本认证，表单登录和HTTP基本认证在配置的过程中，会分别向</strong>defaultEntryPointMappings</strong> 变量中添加认证失败处理器:<ul><li>表单登录在<strong>AbstractAuthenticationFilterConfigurer#registerAuthenticationEntryPoint</strong> 方法中向<strong>defaultEntyPointMappings</strong> 变量添加的处理器，对应的<strong>AuthenticationEntryPoint</strong> 实例就是<strong>LoginUrlAuthenticationEntryPoint</strong> ，默认情况下访问需要认证才能访问的页面时，会自动跳转到登录页面，就是通过<strong>LoginUrlAuthenticationEntyPoint</strong> 实现的。</li><li>HTTP基本认证在<strong>HttpBasicConfigurer#registerDefaultEntryPoint</strong> 方法中向 <strong>defaultEntryPointMappings</strong> 变量添加处理器，对应的 <strong>AuthenticationEntryPoint</strong> 实例则是 <strong>BasicAuthenticationEntryPoint</strong></li></ul></li></ul><p>所以默认情况下，<strong>defaultEntryPointMappings</strong> 变量中将存在两个认证失败处理器。</p><h4 id="11-2-2-AccessDeniedHandler"><a href="#11-2-2-AccessDeniedHandler" class="headerlink" title="11.2.2 AccessDeniedHandler"></a>11.2.2 AccessDeniedHandler</h4><p>我们再来看<strong>AccessDeniedHandler</strong> 实例的获取，<strong>AccessDeniedHandler</strong> 实例是通过<strong>getAccessDeniedHandler</strong>方法获取到的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">AccessDeniedHandler <span class="hljs-title function_">getAccessDeniedHandler</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">AccessDeniedHandler</span> <span class="hljs-variable">deniedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.accessDeniedHandler;<br><span class="hljs-keyword">if</span> (deniedHandler == <span class="hljs-literal">null</span>) &#123;<br>deniedHandler = createDefaultDeniedHandler(http);<br>&#125;<br><span class="hljs-keyword">return</span> deniedHandler;<br>&#125;<br><br><span class="hljs-keyword">private</span> AccessDeniedHandler <span class="hljs-title function_">createDefaultDeniedHandler</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultDeniedHandlerMappings.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultDeniedHandlerMappings.size() == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultDeniedHandlerMappings.values().iterator().next();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMatcherDelegatingAccessDeniedHandler</span>(<span class="hljs-built_in">this</span>.defaultDeniedHandlerMappings,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>可以看到,<strong>AccessDeniedHandler</strong> 实例的获取流程和<strong>AuthenticationEntryPoint</strong> 的获取流程基本上一模一样 ， 这里也有一个类似的<strong>defaultDeniedHandlerMappings</strong>变量 ， 也可以为不同的路径配置不同的鉴权失败处理器;如果存在多个鉴权失败处理器，则可以通过代理类统一处理。</p></li><li><p>不同的是，默认情况下这里的<strong>defaultDeniedHandlerMappings</strong> 变量是空的，所以最终获取到的实例是<strong>AccessDeniedHandlerImpl</strong> 。在<strong>AccessDeniedHandlerImpl#handle</strong>方法中处理鉴权失败的情况，如果存在错误页面，就跳转到到错误页面，并设置响应码为403;如果没有错误页 面，则直接给出错误响应即可。</p></li><li><p><strong>AuthenticationEntryPoint</strong> 和 <strong>AccessDeniedHandler</strong> 都有了之后，接下来就是 <strong>ExceptionTranslationFilter</strong> 中的处理逻辑 了。</p></li></ul><h4 id="11-2-3-ExceptionTranslationFilter"><a href="#11-2-3-ExceptionTranslationFilter" class="headerlink" title="11.2.3 ExceptionTranslationFilter"></a>11.2.3 ExceptionTranslationFilter</h4><p>默认情況下，<strong>ExceptionTranslationFilter</strong> 过滤器在整个SpringSecurity过滤器链中排名倒数第二，倒数第一是<strong>FilterSecurityInterceptor</strong>。在<strong>FilterSecurityInterceptor</strong>中将会对用户的身份进行校验，如果用户身份不合法，就会抛出异常，抛出来的异常，刚好就在<strong>ExceptionTranslationFilter</strong> 过滤 器中进行处理了 。 我们一起来看一下<strong>ExceptionTranslationFilter</strong>中 的 <strong>doFilter</strong> 方 法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">try</span> &#123;<br>chain.doFilter(request, response);<br>&#125;<br><span class="hljs-keyword">catch</span> (IOException ex) &#123;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-comment">// Try to extract a SpringSecurityException from the stacktrace</span><br>Throwable[] causeChain = <span class="hljs-built_in">this</span>.throwableAnalyzer.determineCauseChain(ex);<br><span class="hljs-type">RuntimeException</span> <span class="hljs-variable">securityException</span> <span class="hljs-operator">=</span> (AuthenticationException) <span class="hljs-built_in">this</span>.throwableAnalyzer<br>.getFirstThrowableOfType(AuthenticationException.class, causeChain);<br><span class="hljs-keyword">if</span> (securityException == <span class="hljs-literal">null</span>) &#123;<br>securityException = (AccessDeniedException) <span class="hljs-built_in">this</span>.throwableAnalyzer<br>.getFirstThrowableOfType(AccessDeniedException.class, causeChain);<br>&#125;<br><span class="hljs-keyword">if</span> (securityException == <span class="hljs-literal">null</span>) &#123;<br>rethrow(ex);<br>&#125;<br><span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Unable to handle the Spring Security Exception &quot;</span><br>+ <span class="hljs-string">&quot;because the response is already committed.&quot;</span>, ex);<br>&#125;<br>handleSpringSecurityException(request, response, chain, securityException);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到，在该过滤器中，直接执行了<strong>chain.doFilter</strong> 方法，让当前请求继续执行剩下的过滤器(即<strong>FiltersecurityInterceptor</strong> )，然后用一个try{….}catch(){….} 了代码块将<strong>chain.doFilter</strong> 包裹起来，如果后面有异常抛出，就直接在这里捕获到了。</p><p>​<strong>throwableAnalyzer</strong>对象是一个异常分析器 ， 由于异常在抛出的过程中可能被 “ 层 层 转 包 ” ， 我们需要还原最初的异常，通过<strong>throwableAnalyzer.derermineCauseChai</strong> 方法可以获得整个异常链 。</p><p>​在<strong>catch</strong>块中捕获到异常之后，首先获取异常链，然后调用<strong>getFirstThrowableOfType</strong> 方法查看异常链中是否有认证失败类型的异常 <strong>AuthenticationException</strong>，如果不存在，再去查看是否有鉴权失败类型的异常 <strong>AccessDeniedException</strong>。注意这个查找顺序，先找认证异常， 再找鉴权异常。如果存在这两种类型的异常，则调用<strong>handleSpringSecurityException</strong> 方法进行异常处理，否则将异常抛出交给上层容器去处理。</p><p>我们来看<strong>handleSpringSecuritvException</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleSpringSecurityException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">FilterChain chain, RuntimeException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> AuthenticationException) &#123;<br>sendStartAuthentication(request, response, chain, exception);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> AccessDeniedException) &#123;<br>      <br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isAnonymous</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authenticationTrustResolver.isAnonymous(authentication);<br><span class="hljs-keyword">if</span> (isAnonymous || <span class="hljs-built_in">this</span>.authenticationTrustResolver.isRememberMe(authentication)) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(LogMessage.format(<span class="hljs-string">&quot;Sending %s to authentication entry point since access is denied&quot;</span>,<br>authentication), exception);<br>&#125;<br>sendStartAuthentication(request, response, chain,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InsufficientAuthenticationException</span>(<br><span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;ExceptionTranslationFilter.insufficientAuthentication&quot;</span>,<br><span class="hljs-string">&quot;Full authentication is required to access this resource&quot;</span>)));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<br>LogMessage.format(<span class="hljs-string">&quot;Sending %s to access denied handler since access is denied&quot;</span>, authentication),<br>exception);<br>&#125;<br><span class="hljs-built_in">this</span>.accessDeniedHandler.handle(request, response, exception);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​在<strong>handleSpringSecurityException</strong>方法中:</p><ol><li>首先判断异常类型是不是 <strong>AuthenticationException认证异常</strong>，如果是，则进入<strong>sendStartAuthentication</strong> 方法中处理认证失败:</li><li>如果异常类型是 <strong>AccessDeniedException授权异常</strong> ，那么先从<strong>SecurityContextHolder</strong> 中取出当前认证主体;如果当前认证主体是 一个匿名用户，或者当前认证是通过<strong>RememberMe</strong> 完成的，那么也认为是认证异常， 需要重新创建一个<strong>InsufficientAuthenticationException</strong> 类型的异常对象，然后进入 <strong>sendStartAuthentication</strong> 方法进行处理，否则就认为是鉴权异常，调用<strong>accessDeniedHandler.handle</strong> 方法进行处理。</li></ol><p>最后我们再来看看<strong>sendStartAuthentication</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendStartAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain,</span><br><span class="hljs-params">AuthenticationException reason)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">// SEC-112: Clear the SecurityContextHolder&#x27;s Authentication, as the</span><br><span class="hljs-comment">// existing Authentication is no longer considered valid</span><br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.createEmptyContext();<br>SecurityContextHolder.setContext(context);<br><span class="hljs-built_in">this</span>.requestCache.saveRequest(request, response);<br><span class="hljs-built_in">this</span>.authenticationEntryPoint.commence(request, response, reason);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里做了三件事:</p><ol><li><p>清除<strong>SecurityContextHolder</strong>中保存的认证主体。</p></li><li><p>保存当前请求。</p></li><li><p>调用<strong>authenticationEntryPoint#commence</strong> 方法完成认证失败处理。</p></li></ol><p>至此，我们前面所说的<strong>AuthenticationEntryPoint</strong> 和<strong>AccesDeniedHandler</strong> 在这里就派上用场了。</p><h3 id="11-3-自定义异常处理配置"><a href="#11-3-自定义异常处理配置" class="headerlink" title="11.3 自定义异常处理配置"></a>11.3 自定义异常处理配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests().anyRequest()<br>                .authenticated()<br>          <span class="hljs-comment">//.....</span><br>                .and()<br>                .exceptionHandling()<span class="hljs-comment">//异常处理</span><br>                .authenticationEntryPoint((request, response, e) -&gt; &#123;<br>                  response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                  response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>                  response.getWriter().write(<span class="hljs-string">&quot;尚未认证，请进行认证操作！&quot;</span>);<br>                &#125;)<br>                .accessDeniedHandler((request, response, e) -&gt; &#123;<br>                  response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>                  response.setStatus(HttpStatus.FORBIDDEN.value());<br>                  response.getWriter().write(<span class="hljs-string">&quot;无权访问!&quot;</span>);<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第十二章-授权"><a href="#第十二章-授权" class="headerlink" title="第十二章 授权"></a>第十二章 授权</h1><h2 id="12-1-什么是权限管理"><a href="#12-1-什么是权限管理" class="headerlink" title="12.1 什么是权限管理?"></a>12.1 什么是权限管理?</h2><p>​和其他安全管理框架类似, SpringSecurity提供的功能主要包含两方面: 认证和授权. 在前面我们已经对于认证做了很多介绍了, SpringSecurity支持多种认证方式, 但是无论开发者使用哪种认证方式, 都不会影响授权的功能. SpringSecurity很好的实现了认证和授权两大功能的解耦, 这也是它受欢迎的原因之一.</p><p>​授权是根据系统提前设置好的规则, 给用户分配可以访问某一资源的权限, 用户根据自己所具有的权限, 去执行相应的操作. </p><h2 id="12-2-Spring-Security-权限管理策略"><a href="#12-2-Spring-Security-权限管理策略" class="headerlink" title="12.2 Spring Security 权限管理策略"></a>12.2 Spring Security 权限管理策略</h2><p>从技术上来说，Spring Security 中提供的权限管理功能主要有两种类型:</p><ul><li>基于过滤器的权限管理(<strong>FilterSecurityInterceptor</strong> ): 基于过滤器的权限管理主要用来拦截HTTP 请求，拦截下来之后，根据HTTP 请求地址进行权限校验。</li><li>基于AOP的权限管理(<strong>MethodSecuityInterceptor</strong>): 基于AOP 的权限管理则主要用来处理方法级别的权限问题。当需要调用某一个方法时， 通过 AOP 将操作拦截下来，然后判桥用户是否具备相 关的权限，如果具备，则允许方法调用， 否则禁止方法调用。</li></ul><p>本章接下来的介绍都是基于这两种权限管理方式展开的。</p><h2 id="12-3-核心概念"><a href="#12-3-核心概念" class="headerlink" title="12.3 核心概念"></a>12.3 核心概念</h2><p>为了方便大家理解后面的内容，我们先对SpringSecurity中 一些权限相关的核心概念做个简单介绍。</p><h4 id="12-3-1-角色与权限"><a href="#12-3-1-角色与权限" class="headerlink" title="12.3.1 角色与权限"></a>12.3.1 角色与权限</h4><p>​当用户登录成功后，当前登录用户信息将保存在<strong>Authentication</strong> 对象中，<strong>Authentication</strong> 对象中有一个<strong>getAuthorities</strong> 方法，用来返回当前对象所具备的权限信息，也就是己经授予当前登录用户的权限。 <strong>getAuthorities</strong> 方法返回值是 <strong>Collection&lt;? extends GrantedAuthority&gt;<strong>，即集合中存放的是</strong>GrantedAuthority</strong> 的子类 ， 当需要进行权限判断的时候 ， 就会调用该方法获取用户的权限 ，进而做出判断。</p><p>​无论用户的认证方式是<strong>用户名&#x2F;密码形式</strong>、<strong>RememberMe</strong> 形式，还是其他如<strong>CAS</strong>、<strong>OAuth2</strong> 等认证方式，最终用户的权限信息都可以通过<strong>getAuthorities</strong> 方法获取。这就是我们前面所讲的，无论用户采用何种认证方式，都不影响授权。</p><p>​那么对于<strong>Authentication#getAuthorities</strong> 方法的返回值，我们应该理解为用户的角色还是用 户的权限呢?</p><p>​从设计层面来讲，角色和权限是两个完全不同的东西:权限就是一些具体的操作，例如 针对员工数据的读权限 (READ_EMPLOYEE)和针对员工数据的写权限 (WRITE_EMPLOYEE):角色则是某些权限的集合，例如管理员角色ROLE_ADMIN、普通用户角色ROLE_USER。</p><p>​从代码层面来讲，角色和权限并没有太大的不同，特别是在SpringSecurity 中，角色和权限的处理的方式基本上是 一样的，唯 一的区别在于Spring Security 在多个地方会自动给角色添 加一个<strong>ROLE</strong>_前缀，而权限则不会自动添加任何前级。这里读者需要特别注意，我们在后面的讲解中，遇到自动添加ROLE前缀的地方也都会和大家重点说明</p><p>至于<strong>Authentication#getAuthorities</strong> 方法的返回值，则要分情况来对待:</p><ol><li>如果权限系统设计比较简单, 就是用户&lt;&#x3D;&gt;权限&lt;&#x3D;&gt;资源 三者之问的关系，那么 <strong>getAuthorities</strong> 方法的含义就很明确，就是返回用户的权限。</li><li>如果权限系统设计比较复杂, 同时存在角色和权限的概念, 如用户 &lt;&#x3D;&gt; 角 色 &lt;&#x3D;&gt; 权 限 &lt;&#x3D;&gt;资源 (用户关联角色、角色关联权限、权限关联资源)，此时我们可以将 <strong>getAuthorities</strong> 方法的返回值当作权限来理解。由于Spring Security 并未提供相关的角色类，因此这个时候需要我们自定义角色类。</li></ol><p>​对于第一种情况，大家都好理解，这里不再赞述。对于第二种情况，我们简单介绍一下。 如果系统同时存在角色和权限，我们可以使用<strong>GrantedAuthority</strong> 的实现类<strong>SimpleGrantedAuthority</strong>来表示一个权限，在<strong>SimpleGrantedAuthority</strong> 类中，我们可以将权限描述为一个字符串，如READ_EMPLOYEE、WRITE_EMPLOYEE。据此，我们定义角色类如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GrantedAuthority</span> &#123;<br><br>  <span class="hljs-keyword">private</span> String name;<br><br>  <span class="hljs-keyword">private</span> List&lt;SimpleGrantedAuthority&gt; allowedOperations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthority</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br><span class="hljs-comment">//省略getter、setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​角色继承自<strong>GrantedAuthority</strong>，一个角色对应多个权限。然后在定义用户类的时候，将角色转为权限即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>  <span class="hljs-keyword">private</span> List&lt;Role&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>    List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>      authorities.addAll(role.getAllowedOperations());<br>      <span class="hljs-keyword">return</span> authorities.stream().distinct().collect(Collectors.toList());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​整体上来说，设计层面上，角色和权限是两个东西:代码层面上，角色和权限其实差别不大，注意区分即可。</p><h4 id="12-3-2-角色继承"><a href="#12-3-2-角色继承" class="headerlink" title="12.3.2 角色继承"></a>12.3.2 角色继承</h4><p>​角色继承就是指角色存在一个上下级的关系，例如<strong>ROLE_ADMIN</strong>继承自<strong>ROLE_USER</strong>, 那么<strong>ROLE_ADMIN</strong> 就自动具备<strong>ROLE_USER</strong> 的所有权限。</p><p>​Spring Security 中通过<strong>RoleFierarchy</strong> 类对角色继承提供支持，我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoleHierarchy</span> &#123;<br><br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getReachableGrantedAuthorities(<br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>RoleFierarchy</strong>中只有一个<strong>getReachableGrantedAuthorities</strong> 方法，该方法返回用户真正“可触达” 的权限。举个简单例子:  假设用广定义了ROLE_ADMIN继承自ROLE_USER, ROLE USER 继承自ROLE_GUEST，现在当前用户角色是ROLE_ADMIN，但是它实际可访 问的资源也包含ROLE_USER 和ROLE_GUEST 能访问的资源。<strong>getReachableGrantedAuthorities</strong> 方法就是根据当前用户所具有的角色，从角色层级映射中解析出用户真正“ 可触达” 的权限。</p><p>​<strong>RoleHierarchy</strong> 只有一个实现类<strong>RoleHierarchyImpl</strong>，开发者一般通过<strong>RoleHierarchyImpl</strong>类来定义角色的层级关系 ，如下面代码表示ROLE_C继承ROLE_D,ROLE_B继承自 ROLE_C, ROLE_A继承自ROLE_B:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> RoleHierarchy <span class="hljs-title function_">roleHierarchy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">RoleHierarchyImpl</span> <span class="hljs-variable">roleHierarchy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleHierarchyImpl</span>();<br>    roleHierarchy.setHierarchy(<span class="hljs-string">&quot;ROLE_A &gt; ROLE_B &gt; ROLE_C &gt; ROLE_D&quot;</span>);<br>    <span class="hljs-keyword">return</span> roleHierarchy;<br>  &#125;<br></code></pre></td></tr></table></figure><p>​这样的角色层级，在<strong>RoleHierarchyImpl#setHierarchy</strong>中首先通过<strong>buildRolesReachableInOneStepMap</strong> 方法解析成 下面这样的Map集合(key ≥ value )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ROLE_A-&gt;ROLE_B<br>ROLE_B-&gt;ROLE_C <br>ROLE_C-&gt;ROLE_D<br></code></pre></td></tr></table></figure><p>​然后再通过<strong>buildRolesReachableInOneOrMoreStepsMap</strong> 方法对上面的集合再次解析，最终解析结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ROLE_A -&gt; [ROLE_B, ROLE_C, ROLE_D] <br>ROLE_B -&gt; [ROLE_C, ROLE_D]<br>ROLE_C -&gt; ROLE D<br></code></pre></td></tr></table></figure><p>​最后通过<strong>getReachableGrantedAuthorities</strong>方法从该Map集合中获取用户真正“可触达”的权限</p><h4 id="12-3-3-两种处理器"><a href="#12-3-3-两种处理器" class="headerlink" title="12.3.3 两种处理器"></a>12.3.3 两种处理器</h4><p>​前面我们讲了，SpringSecuriy 中提供的权限管理功能主要有两种类型:基于过滤器的权限管理 (<strong>FilterSecurityInterceptor</strong>)和基于AOP 的权限管理 (<strong>MethodSecurityInterceptor</strong>) 。</p><p>​无论是哪种 ， 都涉及一个前置处理器和后置处理器 。 下图分别表示基于过滤器的权限管理和基于AOP 的权限管理中的前置处理器和后置处理器。</p><p><img src="/2022/01/26/SpringSecurity/image-20230725144229868.png" alt="image-20230725144229868"></p><p>​在基于过滤器的权限管理中，请求首先到达过滤器 <strong>FilterSecurityInterceptor</strong> ，在其执行过程中，首先会由前置处理器去判断发起当前请求的用户是否具备相应的权限，如果具备，则请求继续向下走，到达目标方法并执行完毕。在响应时，又会经过<strong>FilterSecurityInterrceptor</strong> 过滤器，此时由后置处理器再去完成其他收尾工作。在基于过滤器的权限管理中，后置处理器一般是不工作的。这也很好理解，因为基于过滤器的权限管理，实际上就是拦截请求URI 地址， 这种权限管理方式粒度较粗，而且过滤器中拿到的是响应的<strong>HttpServletResponse</strong> 对象，对其所返回的数据做二次处理并不方便。</p><p>​在基于方法的权限管理中，目标方法的调用会被<strong>MethodSecurityInterceptor</strong> 拦截下来，实现原理当然就是大家所熟知的<strong>AOP机制</strong>。当目标方法的调用被<strong>MethodSecurityInterceptor</strong> 拦截下之后，在其<strong>invoke</strong> 方法中首先会由前置处理器去判断当前用户是否具备调用目标方法所需要的权限，如果具备，则继续执行目标方法。当目标方法执行完毕并给出返回结果后，在 <strong>MethodSecurityInterceptor#invoke</strong> 方法中，由后置处理器再去对目标方法的返回结果进行过滤或者鉴权，然后在<strong>invoke</strong>方法中将处理后的结果返回。</p><p>​可以看到， 无论是基于过滤器的权限管理还是基于方法的权限管理，前置处理器都是重中之重，两者都会用到。而后置处理器则只是在基 于方法的权限管理中会用到。</p><blockquote><p>前置处理器</p></blockquote><p>要理解前置处理器，需要先了解投票器。</p><h5 id="投票器"><a href="#投票器" class="headerlink" title="投票器"></a><strong>投票器</strong></h5><p>​投票器是SpringSecurity权限管理功能中的一个组件，顾名思义，投票器的作用就是针对是否允许某一个操作进行投票。当请求的URI 地址被拦截下来之后，或者当调用的方法被AOP 拦截下来之后，都会调用投票器对当前操作进行投票，以便决定是否允许当前操作。</p><p>​在SpringSecurity中，投票器由<strong>AccesDecisionVoter</strong> 来定义，我们来看一下这个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccessDecisionVoter</span>&lt;S&gt; &#123;<br><br>  <span class="hljs-comment">//投票通过</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ACCESS_GRANTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">//弃票</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ACCESS_ABSTAIN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">//反对</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ACCESS_DENIED</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vote</span><span class="hljs-params">(Authentication authentication, S object, Collection&lt;ConfigAttribute&gt; attributes)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>这个接口首先定义了三个常量:<strong>ACCESS_GRANTED</strong> 表示投票通过、<strong>ACCESS_ABSTAIN</strong> 表示弃权、<strong>ACCESS_DENIED</strong> 表示拒绝。</li><li><strong>supports(ConfigAttribute)<strong>方法:用来判断是否支持处理</strong>ConfigAttribute</strong> 对象。</li><li><strong>supports(Class)</strong> 方法:用来判断是否支持处理受保护的安全对象。</li><li><strong>vote</strong>方法: 则是具体的投票方法，根据用户所具有的权限以及当前请求需要的权限进行投票。<strong>vote</strong>方法有三个参数:第一个参数<strong>authentication</strong> 中可以提取出来当前用户所具备的权限。第二个参数<strong>object</strong>表示受保护的安全对象，如果受保护的是<strong>URI</strong>地址，则<strong>object</strong> 就是一个<strong>Filterlnvocation</strong> 对象;如果受保护的是一个方法，则<strong>object</strong>就是一个<strong>Methodinvocation</strong>对象。第三个参数<strong>attributes</strong> 表示访问受保护对象所需要的权限。<strong>vote</strong> 方法的返回值就是前面所定义的三个常量之一也就是投票结果。</li></ul><p>​Spring Security 中为 <strong>AccessDecisionVoter</strong> 提供了诸多不同的实现类，如图所示是 <strong>AccessDecisionVoter</strong> 的所有继承类。</p><p><img src="/2022/01/26/SpringSecurity/gaozhe/blog/source/_posts/SpringSecurity/image-20230725150210166.png" alt="image-20230725150210166"></p><ul><li><strong>RoleVoter</strong>:  <strong>RoleVoter</strong> 是根据登录主体的角色进行投票，即判断当前用户是否具备受保护对象所需要的角色。需要注意的是，默认情况下角色需以“ROLE“ 开始，否则supports 方法直接返回false，不进行后续的投票操作</li><li><strong>RoleHierarchyVoter</strong>: <strong>RoleHierarchyVoter</strong> 继承自<strong>RoleVoter</strong>，投票逻辑和<strong>RoleVoter</strong> 一致， 不同的是<strong>RoleHierarchyVoter</strong> 支持角色的继承，它通过<strong>RoleHierarchyImpl</strong> 对象对用户所具有的角色进行解析，获取用户真正“ 可触达” 的角色;而<strong>RoleVorer</strong> 则直接调用 <strong>authentication#getAuthorities()</strong> 方法获取用户的角色。</li><li><strong>WebExpressionVoter</strong>: 基于<strong>URL</strong> 地址进行权限控制时的投票器(支持SpEL )。<strong>这也是默认唯一添加的投票器</strong></li><li><strong>Jsr250Voter</strong>: 处理JSR-250 权限注解的投票器，如@PermitAll、@DenyAll 等</li><li><strong>AuthenticatedVoter</strong>: <strong>AuthenticatedVoter</strong>用于判断当前用户的认证形式，它有三种取值: <strong>IS_AUTHENTICATED_FULLY</strong> 、 <strong>IS_AUTHENTICATED _REMEMBERED</strong> 以及<strong>IS_AUTHENTICATED_ANONYMOUSIY</strong>。其中:<strong>IS_AUTHENTICATED_FULLY</strong> 要求 当前用广既不是匿名用户也不是通过 <strong>RernemberMe</strong> 进行认证;<strong>IS_AUTHENTICATED_REMEMBERED</strong>则在前者的基础上， 允许用户通过<strong>RemeberMe</strong>进行认证 ;<strong>IS_AUTHENTICATED_ANONYMOUSLY</strong>则允许当前用户通过<strong>RemeberMe</strong>认证，也允许当前用户是匿名用户。</li><li><strong>AbstractAclVoter</strong>: 基于<strong>ACL</strong>进行权限控制时的投票器。这是一个抽象类，没有绑定到具体的<strong>ACI</strong> 系统。</li><li><strong>AclEntryVoter</strong>: <strong>AclEntryVoter</strong>继承自<strong>AbstractAclVoter</strong>，基于SpringSecurity提供的<strong>ACI</strong> 权限系统的投票器。</li><li><strong>PrelnvocationAuthorizationAdviceVoter</strong>:处理@PreFilter 和@PreAuthorize 注解的投票器。</li></ul><p>​这就是Spring Security 中提供的所有投票器，在具体使用中，可以单独使用一个，也可以多个一起使用。如果上面这些投票器都无法满足需求，开发者也可以自定义投票器。需要注意的是，投票结果并非最终结果(通过或拒绝)，最终结果还要看决策器( <strong>AccessDecisionManager</strong> )</p><h5 id="决策器"><a href="#决策器" class="headerlink" title="决策器"></a><strong>决策器</strong></h5><p>​决策器由<strong>AccessDecisionManager</strong> 负责，<strong>AccessDecisionManager</strong> 会同时管理多个投票器， 由<strong>AccessDecisionManager</strong> 调用投票器进行投票，然后根据投票结果做出相应的決策，所以我 们将<strong>AccessDecisionManager</strong> 也称作是一个决策管理器。我们来看 一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccessDecisionManager</span> &#123;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">decide</span><span class="hljs-params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span><br><span class="hljs-keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里一共有三个方法:</p><ul><li><strong>decide</strong>方法: 是核心的决策方法，在这个方法中判断是否允许当前URI 或者方法的调用， 如果不允许，则会批出<strong>AccessDeniedException</strong> 异常。</li><li><strong>supports(ConfigAttribute)</strong> 方法: 用来判断是否支持处理<strong>ConfigAttribute</strong>对象。</li><li><strong>supports(Class)</strong> 方法: 用来判断是否支持当前安全对象。</li></ul><p>我们来看一幅官方提供的类图 ，如图所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230725151939830.png" alt="image-20230725151939830"></p><p>​从图中可以看出，<strong>AccessDecisionManager</strong> 有一个实现类<strong>AbstractAccessDecisionManager</strong>, 一个<strong>AbstractAccessDecisionManager</strong> 对应多个<strong>投票器</strong>。多个投票器针对同一个请求可能会给出不同的结果，那么听谁的呢?这就要看<strong>决策器</strong>了。</p><ul><li><strong>AffirmativeBased</strong>: 一票通过机制, 即只要有一个投票器通过就可以访问 ( 默认即此 )。</li><li><strong>UnanimousBased</strong>: 一票否决机制，即只要有一个投票器反对就不可以访问。</li><li><strong>ConsensusBased</strong>: 少数服从多数机制。如果是平局并且至少有一张赞同票，则根据 <strong>allowIfEgualGrantedDeniedDecisions</strong> 参数的取值来决定，如果该参数取值为true，则可以 访问，否则不可以访问。</li></ul><p>​这是SpringSecurity中提供的三个決策器，如果这三个决策器无法满足需求，开发者也可以自定义类继承自<strong>AbstractAccessDecisionManager</strong> 实现自己的决策器。</p><p>​这就是前置处理器中的大致逻辑， 无论是基于URL 地址的权限管理，还是基于方法的权 限管理，都是在前置处理器中通过 <strong>AccesDecisionManager</strong> 调用<strong>AccessDecisionVoter</strong> 进行投票， 进而做出相应的决策。</p><blockquote><p>后置处理</p></blockquote><p>​后置处理器一般只在基于方法的权限控制中会用到，当目标方法执行完毕后，通过后置处理器可以对目标方法的返回值进行权限校验或者过滤。</p><p>​后置处理器由<strong>AfterInvocationManager</strong> 负责，我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AfterInvocationManager</span> &#123;<br><br>Object <span class="hljs-title function_">decide</span><span class="hljs-params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; attributes,</span><br><span class="hljs-params">Object returnedObject)</span> <span class="hljs-keyword">throws</span> AccessDeniedException;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>AfterInvocationManager</strong> 和<strong>AccessDecisionManager</strong> 的源码高度相似，主要的区别在于 <strong>decide</strong> 方法的参数和返回值。当后置处理器执行时，被权限保护的方法已经执行完毕，后置处理器主要是对执行的结果进行过滤 ， 所以 <strong>decide</strong> 方法中有一个<strong>returnedObject</strong> 参数 ， 这就是目标方法的执行结果，<strong>decide</strong> 方法的返回值就是对<strong>returnedObject</strong> 对象进行过滤&#x2F;鉴权后的结果。</p><p>​我们来看官方提供的一幅<strong>AfterInvocationManager</strong> 类图: </p><p><img src="/2022/01/26/SpringSecurity/image-20230725153330093.png" alt="image-20230725153330093"></p><p>​有没有感觉眼熟?这就是<strong>AuthenticationManager</strong>、<strong>ProviderManager</strong> 以及<strong>AuthenticationProvider</strong>的翻版。</p><p>​<strong>AfferlnvocationManager</strong> 只有一个实现类 <strong>AfferInvocationProviderManager</strong> ，一个 <strong>AfterInvocationProviderManager</strong> 关联多个<strong>AfterInvocationProvider</strong>。在 <strong>AfterInvocationManager</strong> 的<strong>decide</strong> 以及<strong>supports</strong> 方法执行时，都是遍历<strong>AfterInvocationProvider</strong> 并执行它里边对应的方法。</p><p>​<strong>AfterInvocationProvider</strong>有多个不同的实现类，常见到的是<strong>PostInvocationAdviceProvider</strong>,该类主要用来处理**@PostAuthorize** 和**@PostFilter** 注解配置的过滤器。另外还有<strong>AbstractAclProvider</strong> 主要用来处理<strong>ACI</strong> 中的验证逻辑，它有两个子类，<strong>AclEntryAfierInvocationProvider</strong> 用来进行权限校验，<strong>AclEntryAfterInvocationCollectionFilteringProvider</strong> 则用来做集合&#x2F;数组过滤 (官方未给出该类的类图，读者可以查看源码)</p><p>​这就是SpringSecurity 中提供的后置处理器。</p><h5 id="权限元数据"><a href="#权限元数据" class="headerlink" title="权限元数据"></a>权限元数据</h5><p>这一小节主要介绍<strong>ConfigAttribute</strong> 和<strong>SecurityMetadataSource</strong>。</p><blockquote><p>ConfigAttribute</p></blockquote><p>​在之前介绍投票器时，在具体的投票方法<strong>vote</strong> 中，受保护对象所需要的权限保存在 一个<strong>Collection<ConfigAttribute><strong>集合中，集合中的对象是</strong>ConfigAttribute</ConfigAttribute></strong>，而不是我们所熟知的<strong>GrantedAuthority</strong>，那么这里就需要和大家介绍 一下<strong>ConfigAturibute</strong>。</p><p>​<strong>ConfigAttibute</strong> 用来存储与安全系统相关的配置属性，也就是系统关于权限的配置，通过 <strong>ConfigAttribute</strong> 来存储，我们来看一下<strong>ConfigAttribute</strong>接口，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfigAttribute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>String <span class="hljs-title function_">getAttribute</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​该接口只有 一个<strong>getAttribute</strong> 方法返回<strong>具体的权限字符串</strong>，而<strong>GrantedAuthority</strong> 中则是通过 <strong>getAuthority</strong> 方法返回用户所具有的权限，两者返回值都是字符串。所以虽然是<strong>ConfigAttribute</strong> 和<strong>GrantedAuthority</strong> 两个不同的对象，但是最终是可以比较的。</p><p>​如图所示表示<strong>ConfigAttribute</strong> 的所有继承类。</p><p><img src="/2022/01/26/SpringSecurity/image-20230725154249061.png" alt="image-20230725154249061"></p><p>接口就不做过多介绍了，主要来说一下最终的五个比较关键的实现类(接下来涉及的 一些注解，会在本章后面做详细介绍):</p><ul><li><strong>WebExpressionConfigAttribute</strong>: 如果用户是基于URI 地址来控制权限并且支持SpEL， 那么默认配置的权限控制表达式最终会被封裝为<strong>WebExpresionConfigAttibute</strong> 对象</li><li><strong>SecurityConfig</strong>: 如果用户使用了**@Secured<strong>注解来控制权限，那么配置的权限就会被封装为</strong>SecurityConfig** 对象。</li><li><strong>Jsr250SecurityConfig</strong>: 如果用户使用了<strong>JSR-250</strong> 相关的注解来控制权限 (如**@PermitAll** 、 <strong>@DenyAll</strong> )，那么配置的权限就会被封装为<strong>Jsr250SecurityConfig</strong> 对象。</li><li><strong>PrelnvocationExpressionAttribute</strong>: 如果用户使用了**@PreAuthorize<strong>、</strong>@PreFilter** 注解来控制权限，那么相关的配置就会被封装为<strong>PrelnvocationExpressionAttribute</strong> 对象。</li><li><strong>PostinvocationExpressionAttibute</strong>:如果用户使用了**@PostAuthorize** 、**@PostFilter** 注解来控制权限，那么相关的配置就会被封装为<strong>Post nvocationExpressionAttibute</strong> 对象。</li></ul><p>可以看到 ， 针对不同的配置方式， 配置数据会以不同的 <strong>ConfigAttribute</strong> 对象存储 。</p><blockquote><p>SecurityMetadataSource</p></blockquote><p>​当投票器在投票时，需要两方面的权限:其一是当前用户具备哪些权限:其二是当前访问的URL或者方法需要哪些权限才能访问 。 投票器所做的事情就是对这两种 权限进行比较 。</p><p>​ 用户具备的权限保存在<strong>authentication</strong> 中 ， 那么当前访问的URI或者方法所需要的权限如何获取呢?这就和<strong>SecurityMetadataSource</strong> 有关了。</p><p>​从字面上来理解，<strong>SecurityMetadataSource</strong> 就是安全元数据源，<strong>SecurityMetadataSource</strong> 所做的事情，就是提供受保护对象所需要的权限。例如，用户访问了一个URL 地址，该URI地址需要哪些权限才能访问?这个就由<strong>SecurityMetadataSource</strong> 来提供。</p><p>​<strong>SecurityMetadataSource</strong>本身只是一个接口，我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityMetadataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AopInfrastructureBean</span> &#123;<br><br>Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAttributes</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException;<br><br>Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAllConfigAttributes</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里只有三个方法:</p><ul><li><strong>getAttributes</strong>: 根据传入的安全对象参数返回其所需要的权限。如果受保护的对象是一个<strong>URI</strong> 地址，那么传入的参数<strong>object</strong>就是一个<strong>FilterInvocation</strong>对象;如果受保护的是一个方法，那么传入的参数<strong>object</strong> 就是一个<strong>Methodinvocation</strong> 对象</li><li><strong>getAllConfigAttributes</strong>:  <strong>getAllConfigAttributes</strong>方法返回所有的角色&#x2F;权限，以便验证是否支持。 不过这个方法并不是必需的，也可以直接返回null。</li><li><strong>supports</strong>: 返回当前的 <strong>SecurityMetadatasource</strong> 是否支持受保护的对象如<strong>FilterInvocation</strong>或者<strong>Methodinvocation</strong>。</li></ul><p>如图表示<strong>SecurityMetadataSource</strong> 的继承关系:</p><p><img src="/2022/01/26/SpringSecurity/gaozhe/blog/source/_posts/SpringSecurity/image-20230725155927717.png" alt="image-20230725155927717"></p><p>​由图中可以看到，直接继承自<strong>SecurityMetadataSource</strong> 的接口主要有两个:</p><p><strong>FilterInvocationSecurityMetadataSource</strong>和<strong>MethodSecurityMetadataSource</strong>.</p><ul><li><strong>FilterInvocationSecurityMetadataSource</strong>:  这是一个空接口 ， 更像是一个标记 。 如果被保护的对象是一个URI 地址，那么将由<strong>FilterlnvocationSecurityMetadataSource</strong>的实现类提供访问该<strong>URL</strong> 地址所需要的权限。</li><li><strong>MethodSecurityMetadataSource</strong>: 这也是一个接口 ， 如果受保护的对象是一 个方法, 那么将通过<strong>MethodSecurityMetadataSource</strong> 的实现类来获取受保护对象所需要的权限</li></ul><p>​<strong>FilterInvocationSecurityMetadataSource</strong> 有一个子类<strong>DefaultFilterInvocationSecurityMetadataSource</strong>, 该类中定义了一个如下格式的Map集合 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;RequestMatcher, Collection&lt;ConfigAttribute&gt;&gt; requestMap;<br></code></pre></td></tr></table></figure><p>​可以看到, 在这个<strong>Map</strong>集合中 ， <strong>key</strong>是一个请求匹配器. <strong>value</strong>则是一个权限集合 ， 也就是说<strong>requestMap</strong> 中保存了请求URL和其所需权限之间的映射关系。在SpringSecurity中，如 果直接在<strong>configure(HttpSecurity)</strong> 方法中配置<strong>URI</strong> 请求地址拦截，像下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>.antMatchers(<span class="hljs-string">&quot; /admin/**&quot;</span>).hasRole (<span class="hljs-string">&quot;admin&quot;</span>)<br>.antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).access(<span class="hljs-string">&quot;hasRole(&#x27;user&#x27;)&quot;</span>)<br>.anyRequest().access(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)<br></code></pre></td></tr></table></figure><p>​这段配置表示访问&#x2F;admin&#x2F;**格式的URL 地址需要admin 角色，访问&#x2F;user&#x2F;**格式的URI 地址需要user 角色，其余地址认证后即可访问 。这段请求和权限之间的映射关系，会经过 DefaultFilterInvocationSecurityMetadataSource 的 子类 ExpressionBasedFilterInvocationSecurityMetadatasource进行处理，并最终将映射关系保存到requestMap 变量中，以备后续使用。</p><p>​在实际开发中，URI 地址以及访问它所需要的权限可能保存在数据库中，此时我们可以自定义类实现<strong>FilterInvocationSecurityMetadataSource</strong> 接口，然后重写里边的<strong>getAttributes</strong> 方法， 在<strong>getAttributes</strong> 方法中，根据当前请求的URI 地址去数据库中查询其所需要的权限，然后将查询结果封装为相应的<strong>ConfigAtri bute</strong> 集合返回即可。</p><p>​如果是基于方法的权限管理，那么对应的<strong>MethodSecurityMetadataSource</strong> 实现类就比较多:</p><ul><li><p><strong>PrePostAnnotationSecurityMetadataSource</strong>: @PreAuthorize. @PreFilter, @PostAuthorize @PostFilter 四个注解所标记的权限规则，将由 <strong>PrePostAnnotationSecurityMetadataSource</strong> 负责提供。</p></li><li><p><strong>SecuredAnnotationSecurityMetadataSource</strong>:  @Secured 注解所标记的权限规则，将由 <strong>SecuredAnnotationSecurityMetadataSource</strong> 负责提供。</p></li><li><p><strong>MapBasedMethodSecurityMetadataSource</strong>: 基于XML 文件配置的方法权限拦截规则(基 于sec:protect 节点)，将由<strong>MapBasedMethodSecurityMetadataSource</strong> 负责提供。</p></li><li><p><strong>Jsr250MethodSecurityMetadataSource</strong>: JSR - 250 相 关 的 注 解 (如 @PermitAll 、@DenyAll ) 所标记的权限规则，将由<strong>JsI250MethodSecurityMetadataSource</strong> 负责提供。</p></li></ul><p>​这就是<strong>SecurityMetadatasource</strong> 的作用。总之，不同的权限拦截方式都对应了一个 <strong>SecurityMetadataSource</strong> 实现类，请求的URL 或者方法需要什么权限，调用<strong>SecurityMetadataSource#getAttributes</strong> 方法就可以获取到 。</p><h5 id="权限表达式"><a href="#权限表达式" class="headerlink" title="权限表达式"></a>权限表达式</h5><p>Spring Security 3.0引入了SpEL表达式进行权限配置，我们可以在请求的URI 或者访问 的方法上，通过SpEL 来配置需要的权限。</p><p>Spring Security 中通过<strong>SecurityExpressionOperations</strong>接口定义了基本的权限表达式，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecurityExpressionOperations</span> &#123;<br><br><br>Authentication <span class="hljs-title function_">getAuthentication</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAuthority</span><span class="hljs-params">(String authority)</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAnyAuthority</span><span class="hljs-params">(String... authorities)</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasRole</span><span class="hljs-params">(String role)</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAnyRole</span><span class="hljs-params">(String... roles)</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">permitAll</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">denyAll</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnonymous</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isAuthenticated</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isRememberMe</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isFullyAuthenticated</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPermission</span><span class="hljs-params">(Object target, Object permission)</span>;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPermission</span><span class="hljs-params">(Object targetId, String targetType, Object permission)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​返回值为boolean 类型的就是权限表达式，如果返回true，则表示权限校验通过，否则表示权限校验失败。</p><p>通过上面的介绍，相信大家对SpringSecurity中权限相关概念有 一个基本认知了，接下来我们就来看看基于URL 地址的权限管理和基于方法的权限管理。</p><h2 id="12-4-基于URL地址的权限管理"><a href="#12-4-基于URL地址的权限管理" class="headerlink" title="12.4 基于URL地址的权限管理"></a>12.4 基于URL地址的权限管理</h2><p>​基于URL地址的权限管理主要是通过过滤器<strong>FilterSecurityInterceptor</strong> 来实现的。如果开发者配置了基于URI 地址的权限管理，那么<strong>FilterSecurityInterceptor</strong> 就会被自动添加到SpringSecurity过滤器链中， 在过滤器链中拦截下请求 ， 然后分析当前用户是否具备请求所需要的权限，如果不具备，则抛出异常。</p><p>​<strong>FilterSecurityInterceptor</strong> 将请求拦截下来之后，会交给<strong>AccessDecisionManager</strong> 进行处理， <strong>AccessDecisionManager</strong> 则会调用投票器进行投票，然后对投票结果进行决策，最终决定请求是否通过。</p><h4 id="12-4-1-基本用法"><a href="#12-4-1-基本用法" class="headerlink" title="12.4.1 基本用法"></a>12.4.1 基本用法</h4><p>​首先创建 一个SpringBoot项目，引入web依赖和SpringSecuity依赖，然后项目中添加如下配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>   daoAuthenticationProvider1.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(User.builder().username(<span class="hljs-string">&quot;javaboy&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;ADMIN&quot;</span>).build()));<br>   <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>   daoAuthenticationProvider2.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(User.builder().username(<span class="hljs-string">&quot;江南一点雨&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="hljs-string">&quot;USER&quot;</span>).build()));<br>   <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>   daoAuthenticationProvider3.setUserDetailsService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(User.builder().username(<span class="hljs-string">&quot;itboyhub&quot;</span>).password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>).authorities(<span class="hljs-string">&quot;READ_INFO&quot;</span>).build()));<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderManager</span>(daoAuthenticationProvider1, daoAuthenticationProvider2, daoAuthenticationProvider3);<br> &#125;<br><br><br><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   http.authorizeHttpRequests()<br>       .anyRequest().authenticated()<br>       .and().formLogin()<br>       .and().exceptionHandling()<br>       .authenticationEntryPoint((req, resp, authException) -&gt; &#123;<br>         resp.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>         resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>         <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>         out.write(<span class="hljs-string">&quot;authenticationEntryPoint: 您未授权，请联系管理员&quot;</span>);<br>       &#125;)<br>       .accessDeniedHandler((req, resp, authException) -&gt; &#123;<br>         resp.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>         resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>         <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>         out.write(<span class="hljs-string">&quot;accessDeniedHandler: 您未授权，请联系管理员&quot;</span>);<br>       &#125;)<br>       .and().cors().configurationSource(configurationSource())<br>       .and().authenticationManager(authenticationManager())<br>       .csrf().disable();<br> &#125;<br></code></pre></td></tr></table></figure><p>在这段配置中, 我们定义了三个用户:</p><ul><li>javaboy:具有ADMIN角色。</li><li>江南一点雨: 具有USER 角色</li><li>itboybub :具有READ_INFO权限。</li></ul><p>​对于复杂的权限管理系统，用户和角色关联，角色和权限关联，权限和资源关联;对于简单的权限管理系统，用户和权限关联，权限和资源关联。无论是哪种，用户都不会和角色以及权限同时直接关联。反映到代码上就是<strong>roles</strong>方法和<strong>authorities</strong>方法不能同时调用，如果同时调用，后者会覆盖前者。我们来看一下它的源码(<strong>org.springframework.security.core.userdetails.User</strong>):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> UserBuilder <span class="hljs-title function_">roles</span><span class="hljs-params">(String... roles)</span> &#123;<br>List&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(roles.length);<br><span class="hljs-keyword">for</span> (String role : roles) &#123;<br>Assert.isTrue(!role.startsWith(<span class="hljs-string">&quot;ROLE_&quot;</span>),<br>() -&gt; role + <span class="hljs-string">&quot; cannot start with ROLE_ (it is automatically added)&quot;</span>);<br>authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(<span class="hljs-string">&quot;ROLE_&quot;</span> + role));<br>&#125;<br><span class="hljs-keyword">return</span> authorities(authorities);<br>&#125;<br><br><span class="hljs-keyword">public</span> UserBuilder <span class="hljs-title function_">authorities</span><span class="hljs-params">(GrantedAuthority... authorities)</span> &#123;<br><span class="hljs-keyword">return</span> authorities(Arrays.asList(authorities));<br>&#125;<br><br><span class="hljs-keyword">public</span> UserBuilder <span class="hljs-title function_">authorities</span><span class="hljs-params">(Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;<br><span class="hljs-built_in">this</span>.authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(authorities);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​可以看到, 无论是给用户设置角色还是设置权限,  最终都会来到<strong>authorities(Collection &lt;? extends GrantedAuthority&gt;)<strong>方法，在该方法中直接给用户的 <strong>authorities</strong> 属性重新赋值，所以如果同时调用了</strong>roles</strong> 方法和<strong>authorities</strong> 方法，那么后者就会覆盖前者。 同时大家要注意，<strong>SpringSecurity 会自动给用户角色添加ROLE_前缀。</strong></p><p>接下来我们配置权限拦截规则:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/admin/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).access(<span class="hljs-string">&quot;hasAnyRole(&#x27;USER&#x27;, &#x27;ADMIN&#x27;)&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/getInfo&quot;</span>).hasAuthority(<span class="hljs-string">&quot;READ_INFO&quot;</span>)<br>        .anyRequest().access(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)<br>        .and().formLogin();<br></code></pre></td></tr></table></figure><p>这段请求拦截规则的含义如下:</p><ul><li>用户必须具备ADMIN角色才可以访问&#x2F;admin&#x2F;* 格式的地址。</li><li>用户必须具备USER 和ADMIN任意一个角色，才可以访问&#x2F;user&#x2F;**格式的地址。</li><li>用户必须具备READ_INFO权限，才可以访问&#x2F;getinfo 接口。</li><li>剩余的请求只要是认证后的用户就可以访问</li></ul><p>这段配置其实很好理解，但是有一些需要注意的地方:</p><ol><li>大部分的表达式都有对应的方法可以直接调用，例如我们上面调用的hasRole 方法对应的就是hasRole 表达式。开发者为了方便可以直接调用hasRole 方法，但是hasRole 方法 最终还是会被转为表达式，当表达式执行结果为true ，这个请求就可以通过，否则请求不通过</li><li>Spring Security 会为hasRole 表达式自动添加上ROLE前缀，例如上面的 hasRole(“ADMIN” 方法转为表达式之后，就是hasRole( ROLE_ADMIN)，所以用广的角色也必须有 ROLE_前缀，而我们上面案例中的用户是基于内存创建的，会自动给用户角色加 上 ROIE_前缀; hasAuthority方法并不会添加任何前缀，而在用户定义时设置的用户权限也不会添加任何前缀。一言以蔽之，基于内存定义的用户，会自动给角色添加ROLE_前缀，而hasRole也会自动添加ROLE_前缀:基于内存定义的用户，不会给权限添加任何前缀，而bas Authority 也不会添加任何前缀。<strong>如果大家的用户信息是从数据库中读取的，则需要注意ROLE_前缀的问题 。</strong></li><li>可以通过<strong>access</strong>方法来使用权限表达式，<strong>access</strong>方法的参数就是权限表达式 。</li><li>代码的顺序很关键，当请求到达后，按照从上往下的顺序依次进行匹配。</li></ol><p>​最后启动项目，进行测试。如果使用javaboy&#x2F; 123进行登录，则前三个接口都可以访问; 如果使用江南一点雨&#x2F;123 进行登录，则只能访问&#x2F;hello和&#x2F;user&#x2F;hello两个接口;如果使用 iboyhub&#x2F;123进行登录，则可以访问&#x2F;getinfo接口。</p><h4 id="12-4-2-角色继承"><a href="#12-4-2-角色继承" class="headerlink" title="12.4.2 角色继承"></a>12.4.2 角色继承</h4><p>如果需要配置角色继承，则只需要提供 一个<strong>RoleHierarchy</strong> 实例即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> RoleHierarchy <span class="hljs-title function_">roleHierarchy</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">RoleHierarchyImpl</span> <span class="hljs-variable">roleHierarchy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleHierarchyImpl</span>();<br>   roleHierarchy.setHierarchy(<span class="hljs-string">&quot;ROLE ADMIN &gt; ROLE USER&quot;</span>);<br>   <span class="hljs-keyword">return</span> roleHierarchy;<br> &#125;<br></code></pre></td></tr></table></figure><p>​&#x2F;user&#x2F;** 需要USER 角色才能访问，但是由于ROLE_ADMIN 继承自ROLE_USER ，所以自动具备ROLE _ USER的权限 ， 因此如果用户具有ROLE_ADMIN角色也可以访问&#x2F;user&#x2F;** 格式的地址</p><h4 id="12-4-3-自定义表达式"><a href="#12-4-3-自定义表达式" class="headerlink" title="12.4.3 自定义表达式"></a>12.4.3 自定义表达式</h4><p>如果内置的表达式无法满足需求，开发者也可以自定义表达式。 假设现在有两个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello/&#123;userId&#125;&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer userId)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span> + userId;<br> &#125;<br><br> <span class="hljs-meta">@GetMapping(&quot;/hi&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2User</span><span class="hljs-params">(String username)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span> + username;<br> &#125;<br></code></pre></td></tr></table></figure><p>第一个接口，参数userld 必须是偶数方可请求成功;第二个借口，参数username 必须是 javaboy 方可请求成功，同时两个接又都必须认证后才能访问(这里主要是展示用法，所以大家不必纠结于业务) 。如果我们想通过自定义表达式实现这 一功能，只需要按照如下方式定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PermissionExpression</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkId</span><span class="hljs-params">(Authentication authentication, Integer userId)</span> &#123;<br>    <span class="hljs-keyword">if</span> (authentication.isAuthenticated()) &#123;<br>      <span class="hljs-keyword">return</span> userId % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;javaboy&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>自定义PermisionExpression 类并注册到Spring 容器中，然后在里边定义相应的方法。</p><ul><li>checkld方法:用来检查参数userld，同时传入了authentication 对象，通过authentication 对象可以判断出当前用户是否已经登录。如果方法返回true，则表示校验通过，否则表示校验未通过 </li><li>check方法:用来检验请求request，只要拿到了request，就能拿到所有请求相关的参数， 也就可以做任何校验</li></ul><p>最后在SecurityConfig 中添加如下路径匹配规则:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeHttpRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/hello/&#123;userId&#125;&quot;</span>).access(<span class="hljs-string">&quot;@permissionExpression.checkId(authentication, #userId)&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/hi&quot;</span>).access(<span class="hljs-string">&quot;@permissionExpression.check(request)&quot;</span>)<br>        .anyRequest().authenticated()<br></code></pre></td></tr></table></figure><p>在access 方法中，我们可以通过@符号引用 一个Bean 并调用其中的方法。在checkid 方 法调用时，#userld 就表示前面的userld 参数; 在check 方法中，我们用了两个表达式，需要 同时满足isAuthenticated 和check()方法都为true，该请求才会通过。</p><h4 id="12-4-4-原理剖析"><a href="#12-4-4-原理剖析" class="headerlink" title="12.4.4 原理剖析"></a>12.4.4 原理剖析</h4><p>​有的读者可能觉得权限管理系统很复杂，其实复杂的是系统设计， 单纯从技术上来说， 还是比较容易的。接下来我们就来简单梳理一下SpringSecurity中基于URI 地址进行权限管理的一个大致原理。</p><h5 id="AbstractSecurityInterceptor"><a href="#AbstractSecurityInterceptor" class="headerlink" title="AbstractSecurityInterceptor"></a>AbstractSecurityInterceptor</h5><p>​首先处于“ 上帝视角” 的类是<strong>AbstractSecurityInterceptor</strong>，该类统筹着关于权限处理的一切。该类中的方法很多，这里只需要关注其中的三个方法: <strong>beforeInvocation</strong> 、<strong>afterInvocation</strong> 和 <strong>finallyInvocation</strong>。</p><p>​在这三个方法中，<strong>beforeInvocation</strong> 中会调用前置处理器完成权限校验，<strong>afterInvocation</strong> 中调用后置处理器完成权限校验，<strong>finallyinvocation</strong> 则主要做一些校验后的清理工作。</p><p>​我们先来看<strong>beforeInvocation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> InterceptorStatusToken <span class="hljs-title function_">beforeInvocation</span><span class="hljs-params">(Object object)</span> &#123;<br>Assert.notNull(object, <span class="hljs-string">&quot;Object was null&quot;</span>);<br><span class="hljs-keyword">if</span> (!getSecureObjectClass().isAssignableFrom(object.getClass())) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Security invocation attempted for object &quot;</span> + object.getClass().getName()<br>+ <span class="hljs-string">&quot; but AbstractSecurityInterceptor only configured to support secure objects of type: &quot;</span><br>+ getSecureObjectClass());<br>&#125;<br>Collection&lt;ConfigAttribute&gt; attributes = <span class="hljs-built_in">this</span>.obtainSecurityMetadataSource().getAttributes(object);<br><span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(attributes)) &#123;<br>Assert.isTrue(!<span class="hljs-built_in">this</span>.rejectPublicInvocations,<br>() -&gt; <span class="hljs-string">&quot;Secure object invocation &quot;</span> + object<br>+ <span class="hljs-string">&quot; was denied as public invocations are not allowed via this interceptor. &quot;</span><br>+ <span class="hljs-string">&quot;This indicates a configuration error because the &quot;</span><br>+ <span class="hljs-string">&quot;rejectPublicInvocations property is set to &#x27;true&#x27;&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Authorized public object %s&quot;</span>, object));<br>&#125;<br>publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PublicInvocationEvent</span>(object));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// no further work post-invocation</span><br>&#125;<br><span class="hljs-keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="hljs-literal">null</span>) &#123;<br>credentialsNotFound(<span class="hljs-built_in">this</span>.messages.getMessage(<span class="hljs-string">&quot;AbstractSecurityInterceptor.authenticationNotFound&quot;</span>,<br><span class="hljs-string">&quot;An Authentication object was not found in the SecurityContext&quot;</span>), object, attributes);<br>&#125;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticated</span> <span class="hljs-operator">=</span> authenticateIfRequired();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isTraceEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.trace(LogMessage.format(<span class="hljs-string">&quot;Authorizing %s with attributes %s&quot;</span>, object, attributes));<br>&#125;<br><span class="hljs-comment">// Attempt authorization</span><br>attemptAuthorization(object, attributes, authenticated);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Authorized %s with attributes %s&quot;</span>, object, attributes));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishAuthorizationSuccess) &#123;<br>publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizedEvent</span>(object, attributes, authenticated));<br>&#125;<br><br><span class="hljs-comment">// Attempt to run as a different user</span><br><span class="hljs-type">Authentication</span> <span class="hljs-variable">runAs</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.runAsManager.buildRunAs(authenticated, object, attributes);<br><span class="hljs-keyword">if</span> (runAs != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">origCtx</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();<br><span class="hljs-type">SecurityContext</span> <span class="hljs-variable">newCtx</span> <span class="hljs-operator">=</span> SecurityContextHolder.createEmptyContext();<br>newCtx.setAuthentication(runAs);<br>SecurityContextHolder.setContext(newCtx);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.format(<span class="hljs-string">&quot;Switched to RunAs authentication %s&quot;</span>, runAs));<br>&#125;<br><span class="hljs-comment">// need to revert to token.Authenticated post-invocation</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterceptorStatusToken</span>(origCtx, <span class="hljs-literal">true</span>, attributes, object);<br>&#125;<br><span class="hljs-built_in">this</span>.logger.trace(<span class="hljs-string">&quot;Did not switch RunAs authentication since RunAsManager returned null&quot;</span>);<br><span class="hljs-comment">// no further work post-invocation</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterceptorStatusToken</span>(SecurityContextHolder.getContext(), <span class="hljs-literal">false</span>, attributes, object);<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>首先调用<strong>obtainSecurityMetadataSource</strong> 方法获取<strong>SecurityMetadataSource</strong> 对象，然后调用其 <strong>getAttributes</strong> 方法获取受保护对象所需要的权限。如果获取到的值为空，此时:</p><ul><li>如果 <strong>rejectPublicInvocations</strong> 变量为<strong>true</strong>，表示受保护的对象拒绝公开调用，则直接抛出异常;</li><li>如果<strong>rejectPublicInvocations</strong> 变量为<strong>false</strong>，表示受保护对象允许公开访问，此时直接返回<strong>null</strong> 即可。</li></ul></li><li><p>接下来到<strong>SecurityContextHolder</strong>中查看当前用户的认证信息是否存在</p></li><li><p>调用<strong>authenticateIfRequired</strong> 方法检查当前用户是否己经登录, 没有登录则认证。</p></li><li><p>调用<strong>accesDecisionManager#decide</strong> 方法进行决策，该方法中会调用投票器进行投票， 如果该方法执行抛出异常，则说明权限不足。</p></li><li><p>接下来调用<strong>runAsManager#buildRunAs</strong> 方法去临时替换用户身份，不过默认情況下， <strong>runAsManager</strong> 的实例是<strong>NullRunAsManager</strong>，即不做任何替换，所以返回的<strong>runAs</strong>对象为<strong>null</strong>。 </p><ul><li>如果<strong>runAs</strong>对象为<strong>null</strong> ，则直接创建一个 <strong>InterceptorStatusToken</strong> 对象返回即可;</li><li>否则将<strong>SecurityContextHolder</strong> 中保存的用户信息修改为替换的用户对象，然后返回一个 <strong>InterceptorStatusToken</strong> 对象。</li><li><strong>InterceptorStatusToken</strong> 对象中保存了当前用户的<strong>SecurityContext</strong> 对象，假如进行了临时用户替换，在替换完成后，最终还是要恢复成当前用户身份的，恢复的依据就是<strong>InterceptorStatusToken</strong>中保存的原始<strong>SecurityContext</strong> 对象。</li></ul></li></ol><p>这就是 <strong>beforeInvocation</strong> 的大致工作流程，<span style="color:red;">其实核心功能就是调用<strong>accessDecisionManager#decide</strong> 方法进行权限验证。</span></p><p>我们再来看<strong>finallyInvocation</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finallyInvocation</span><span class="hljs-params">(InterceptorStatusToken token)</span> &#123;<br><span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span> &amp;&amp; token.isContextHolderRefreshRequired()) &#123;<br>SecurityContextHolder.setContext(token.getSecurityContext());<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logger.isDebugEnabled()) &#123;<br><span class="hljs-built_in">this</span>.logger.debug(LogMessage.of(<br>() -&gt; <span class="hljs-string">&quot;Reverted to original authentication &quot;</span> + token.getSecurityContext().getAuthentication()));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果临时替换了用户身份，那么最终要将用户身份恢复，<strong>finallyInvocation</strong> 方法所做的事情就是恢复用户身份。这里的参数<strong>token</strong> 就是<strong>beforelnvocation</strong> 方法的返回值，用户原始的身份信息都保存在<strong>token</strong> 中，从<strong>token</strong>中取出用户身份信息，并设置到<strong>SecurityContextHolder</strong> 中去即可。</p><p>​</p><p>​最后我们再来看看<strong>afterInvocation</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">afterInvocation</span><span class="hljs-params">(InterceptorStatusToken token, Object returnedObject)</span> &#123;<br><span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// public object</span><br><span class="hljs-keyword">return</span> returnedObject;<br>&#125;<br>finallyInvocation(token); <span class="hljs-comment">// continue to clean in this method for passivity</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.afterInvocationManager != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Attempt after invocation handling</span><br><span class="hljs-keyword">try</span> &#123;<br>returnedObject = <span class="hljs-built_in">this</span>.afterInvocationManager.decide(token.getSecurityContext().getAuthentication(),<br>token.getSecureObject(), token.getAttributes(), returnedObject);<br>&#125;<br><span class="hljs-keyword">catch</span> (AccessDeniedException ex) &#123;<br>publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationFailureEvent</span>(token.getSecureObject(), token.getAttributes(),<br>token.getSecurityContext().getAuthentication(), ex));<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> returnedObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>afterInvocation</strong>方法接收两个参数，第一个参数<strong>token</strong>就是<strong>beforeInvocation</strong> 方法的返回值， 第二个参数<strong>returnObject</strong> 则是受保护对象的返回值。<strong>afterInvocation</strong> 方法的核心工作就是调用 <strong>afterInvocationManager#decide</strong> 方法对<strong>returnObject</strong> 进行过滤，然后将过滤后的结果返回。</p><p>​这就是<strong>AbstractSecurityInterceptor</strong> 类中三大方法的作用。</p><h5 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h5><p>​我们使用了基于 <strong>URL</strong> 地址的权限管理，此时最终使用的是 <strong>AbstractSecurityInterceptor</strong> 的子类 <strong>FilterSecurityInterceptor</strong> ，这是一个过滤器。</p><blockquote><p>初始化配置</p></blockquote><p><span style="color:red;">当我们在 <strong>configure(HttpSecurity)</strong> 方法中调用<strong>http.authorizeRequests()<strong>开启URL路径拦截规则配置时，就会通过 <strong>AbstractInterceptUrIConfigurer#configure</strong> 方法将</strong>FilterSecurityInterceptor</strong>添加到SpringSecurity 过滤器链中。</span></p><p>​我们接下来看下<strong>FilterSecurityInteceptor</strong>的配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(H http)</span> <span class="hljs-keyword">throws</span> Exception <br><span class="hljs-type">FilterInvocationSecurityMetadataSource</span> <span class="hljs-variable">metadataSource</span> <span class="hljs-operator">=</span> createMetadataSource(http);<br><span class="hljs-keyword">if</span> (metadataSource == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">FilterSecurityInterceptor</span> <span class="hljs-variable">securityInterceptor</span> <span class="hljs-operator">=</span> createFilterSecurityInterceptor(http, metadataSource,<br>http.getSharedObject(AuthenticationManager.class));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.filterSecurityInterceptorOncePerRequest != <span class="hljs-literal">null</span>) &#123;<br>securityInterceptor.setObserveOncePerRequest(<span class="hljs-built_in">this</span>.filterSecurityInterceptorOncePerRequest);<br>&#125;<br>securityInterceptor = postProcess(securityInterceptor);<br>http.addFilter(securityInterceptor);<br>http.setSharedObject(FilterSecurityInterceptor.class, securityInterceptor);<br>&#125;<br><br><br><span class="hljs-keyword">private</span> FilterSecurityInterceptor <span class="hljs-title function_">createFilterSecurityInterceptor</span><span class="hljs-params">(H http,</span><br><span class="hljs-params">FilterInvocationSecurityMetadataSource metadataSource, AuthenticationManager authenticationManager)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">FilterSecurityInterceptor</span> <span class="hljs-variable">securityInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterSecurityInterceptor</span>();<br>securityInterceptor.setSecurityMetadataSource(metadataSource);<br>securityInterceptor.setAccessDecisionManager(getAccessDecisionManager(http));<br>securityInterceptor.setAuthenticationManager(authenticationManager);<br>securityInterceptor.afterPropertiesSet();<br><span class="hljs-keyword">return</span> securityInterceptor;<br>&#125;<br><br><span class="hljs-keyword">private</span> AccessDecisionManager <span class="hljs-title function_">getAccessDecisionManager</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.accessDecisionManager == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.accessDecisionManager = createDefaultAccessDecisionManager(http);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.accessDecisionManager;<br>&#125;<br><br><span class="hljs-keyword">private</span> AccessDecisionManager <span class="hljs-title function_">createDefaultAccessDecisionManager</span><span class="hljs-params">(H http)</span> &#123;<br><span class="hljs-type">AffirmativeBased</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AffirmativeBased</span>(getDecisionVoters(http));<br><span class="hljs-keyword">return</span> postProcess(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里我们通过<strong>createMetadataSource</strong>创建权限元数据对象方法发现, <strong>AbstractInterceptUrlConfigurer</strong> 有两个不同的子类，两个子类创建出来的<strong>FilterSecurityInterceptor</strong>略有差异:</p><ul><li><strong>ExpressionUrlAuthorizationConfigurer</strong>: ,创建出的<strong>FilterSecurityInterceptor</strong>的投票器使用的<strong>WebExpressionVoter</strong> ,权限元数据对象是<strong>ExpressionBasedFilterInvocationSecurityMetadataSource</strong>， <span style="color:red;">所以它支持权限表达式。</span></li><li><strong>UrlAuthorizationConfigurer</strong>: 创建出的<strong>FilterSecurityInterceptor</strong>的<strong>RoleVoter</strong> 和 <strong>Authenticatedvoter</strong>, 权限元数据对象是<strong>DefaultFilterInvocationSecurityMetadataSource</strong>，所以它不支持权限表达式。</li></ul><p><span style="color:red;"><strong>http.authorizeRequests()</strong> 方法实际 上就是通过 <strong>ExpressionUrlAuthorizationConfigurer</strong> 来配置基于URI 地址的权限管理，所以在配置时<strong>可以使用权限表达式。</strong></span></p><p>​我们再重点关注下这个<strong>createFilterSecurityInterceptor</strong>方法, 我们看下**getAccessDecisionManager(http)**获取决策器的方法, <span style="color:red;">默认如果我们没配决策器则会创建一个默认的决策器: <strong>AffirmativeBased一票通过</strong></span></p><p>​那我们怎么来配置一个决策器呢, 我们通过<strong>AbstractInterceptUrIConfigurer#accessDecisionManager</strong>, 可以知道我们可以这样来配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>       .accessDecisionManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsensusBased</span>(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebExpressionVoter</span>())))<br>  ......<br></code></pre></td></tr></table></figure><blockquote><p>doFilter主逻辑</p></blockquote><p>对过滤器而言，最重要的当然就是 <strong>doFilter</strong> 方法了，我们来看看 <strong>FilterSecurityInterceptor#doFilter</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>   <span class="hljs-comment">//构建了受保护对象FilterInvocation，然后调用invoke</span><br>invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterInvocation</span>(request, response, chain));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(FilterInvocation filterInvocation)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (isApplied(filterInvocation) &amp;&amp; <span class="hljs-built_in">this</span>.observeOncePerRequest) &#123;<br><span class="hljs-comment">// filter already applied to this request and user wants us to observe</span><br><span class="hljs-comment">// once-per-request handling, so don&#x27;t re-do security checking</span><br>filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// first time this request being called, so perform security checking</span><br><span class="hljs-keyword">if</span> (filterInvocation.getRequest() != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.observeOncePerRequest) &#123;<br>filterInvocation.getRequest().setAttribute(FILTER_APPLIED, Boolean.TRUE);<br>&#125;<br>   <span class="hljs-comment">//调用AbstractSecurityInterceptor#beforeInvocation</span><br><span class="hljs-type">InterceptorStatusToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.beforeInvocation(filterInvocation);<br><span class="hljs-keyword">try</span> &#123;<br>filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>     <span class="hljs-comment">//调用AbstractSecurityInterceptor#finallyInvocation</span><br><span class="hljs-built_in">super</span>.finallyInvocation(token);<br>&#125;<br>     <span class="hljs-comment">//调用AbstractSecurityInterceptor#afterInvocation</span><br><span class="hljs-built_in">super</span>.afterInvocation(token, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在<strong>doFilter</strong>方法中，首先构建了受保护对象<strong>FilterInvocation</strong>，然后调用<strong>invoke</strong> 方法。</li><li>在<strong>invoke</strong> 方法中，如果当前过滤器己经执行过了，则继续执行剩下的过滤器，否则就调用父类的<strong>beforeInvocation</strong> 方法进行权限校验，校验通过后继续执行剩余的过滤器，然后在<strong>finally</strong> 代码块中调用父类的<strong>finallyInvocation</strong> 方法，最后调用父类的<strong>afterInvocation</strong> 方法。可以看到，前置处理器和后置处理器都是在<strong>invoke</strong>方法中触发的。</li></ol><h4 id="12-4-5-实战"><a href="#12-4-5-实战" class="headerlink" title="12.4.5 实战"></a>12.4.5 实战</h4><p>在前面的案例中，我们配置的 URL 拦截规则和请求 URL 所需要的权限都是通过代码来配置的，这样就比较死板，如果想要调整访问某一个 URL 所需要的权限，就需要修改代码。</p><p>动态管理权限规则就是我们将 URL 拦截规则和访问 URI 所需要的权限都保存在数据库中，这样，在不修改源代码的情况下，只需要修改数据库中的数据，就可以对权限进行调整。</p><p><code>用户&lt;--中间表--&gt; 角色 &lt;--中间表--&gt; 菜单</code></p><p><img src="/2022/01/26/SpringSecurity/image-20230726120325751.png" alt="image-20230726120325751"></p><blockquote><p>库表设计</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `menu`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `menu` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `<span class="hljs-keyword">pattern</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of menu</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/admin/**&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;/user/**&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;/guest/**&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for menu_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `menu_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `menu_role` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `mid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `rid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `mid` (`mid`),<br>  KEY `rid` (`rid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `menu_role_ibfk_1` <span class="hljs-keyword">FOREIGN</span> KEY (`mid`) <span class="hljs-keyword">REFERENCES</span> `menu` (`id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `menu_role_ibfk_2` <span class="hljs-keyword">FOREIGN</span> KEY (`rid`) <span class="hljs-keyword">REFERENCES</span> `role` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of menu_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `menu_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `nameZh` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>, <span class="hljs-string">&#x27;系统管理员&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ROLE_USER&#x27;</span>, <span class="hljs-string">&#x27;普通用户&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ROLE_GUEST&#x27;</span>, <span class="hljs-string">&#x27;游客&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `enabled` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `locked` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;blr&#x27;</span>, <span class="hljs-string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `uid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `rid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `uid` (`uid`),<br>  KEY `rid` (`rid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `user_role_ibfk_1` <span class="hljs-keyword">FOREIGN</span> KEY (`uid`) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">user</span>` (`id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `user_role_ibfk_2` <span class="hljs-keyword">FOREIGN</span> KEY (`rid`) <span class="hljs-keyword">REFERENCES</span> `role` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>创建 springboot 应用</p></blockquote><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:com/blr/mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.blr.entity</span><br></code></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enabled;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> locked;<br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> roles.stream().map(r -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(r.getName())).collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> !locked;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> enabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEnabled</span><span class="hljs-params">(<span class="hljs-type">boolean</span> enabled)</span> &#123;<br>        <span class="hljs-built_in">this</span>.enabled = enabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocked</span><span class="hljs-params">(<span class="hljs-type">boolean</span> locked)</span> &#123;<br>        <span class="hljs-built_in">this</span>.locked = locked;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoles</span><span class="hljs-params">(List&lt;Role&gt; roles)</span> &#123;<br>        <span class="hljs-built_in">this</span>.roles = roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoles</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> roles;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String nameZh;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameZh</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nameZh;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNameZh</span><span class="hljs-params">(String nameZh)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nameZh = nameZh;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String pattern;<br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br><br>    <span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoles</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoles</span><span class="hljs-params">(List&lt;Role&gt; roles)</span> &#123;<br>        <span class="hljs-built_in">this</span>.roles = roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPattern</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pattern;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPattern</span><span class="hljs-params">(String pattern)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pattern = pattern;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;Role&gt; <span class="hljs-title function_">getUserRoleByUid</span><span class="hljs-params">(Integer uid)</span>;<br>    User <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuMapper</span> &#123;<br>    List&lt;Menu&gt; <span class="hljs-title function_">getAllMenu</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 mapper 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.blr.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.blr.entity.User&quot;</span>&gt;</span><br>        select *<br>        from user<br>        where username = #&#123;username&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserRoleByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.blr.entity.Role&quot;</span>&gt;</span><br>        select r.*<br>        from role r,<br>             user_role ur<br>        where ur.uid = #&#123;uid&#125;<br>          and ur.rid = r.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.blr.mapper.MenuMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MenuResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.blr.entity.Menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roles&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.blr.entity.Role&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rnameZh&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nameZh&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllMenu&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MenuResultMap&quot;</span>&gt;</span><br>        select m.*, r.id as rid, r.name as rname, r.nameZh as rnameZh<br>        from menu m<br>                 left join menu_role mr on m.`id` = mr.`mid`<br>                 left join role r on r.`id` = mr.`rid`<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 service 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(UserMapper userMapper)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userMapper = userMapper;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        user.setRoles(userMapper.getUserRoleByUid(user.getId()));<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MenuService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MenuMapper menuMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MenuService</span><span class="hljs-params">(MenuMapper menuMapper)</span> &#123;<br>        <span class="hljs-built_in">this</span>.menuMapper = menuMapper;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Menu&gt; <span class="hljs-title function_">getAllMenu</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> menuMapper.getAllMenu();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建测试 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/admin/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">admin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello admin&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello user&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/guest/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">guest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello guest&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 CustomSecurityMetadataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomSecurityMetadataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilterInvocationSecurityMetadataSource</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MenuService menuService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomSecurityMetadataSource</span><span class="hljs-params">(MenuService menuService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.menuService = menuService;<br>    &#125;<br><br>    <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAttributes</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> ((FilterInvocation) object).getRequest().getRequestURI();<br>        List&lt;Menu&gt; allMenu = menuService.getAllMenu();<br>        <span class="hljs-keyword">for</span> (Menu menu : allMenu) &#123;<br>            <span class="hljs-keyword">if</span> (antPathMatcher.match(menu.getPattern(), requestURI)) &#123;<br>                String[] roles = menu.getRoles().stream().map(r -&gt; r.getName()).toArray(String[]::<span class="hljs-keyword">new</span>);<br>                <span class="hljs-keyword">return</span> SecurityConfig.createList(roles);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAllConfigAttributes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol><li><strong>getAttibutes</strong>:该方法的参数是受保护对象，在基于URI 地址的权限控制中，受保护对象就是<strong>Filterinvocation</strong>，该方法的返回值则是访问受保护对象所需要的权限。在该方法里边，我们首先从受保护对象<strong>Filterlnvocation</strong> 中提取出当前请求的<strong>URI</strong> 地址，例如 &#x2F;admin&#x2F;hello，然后通过menuService 对象查询出所有的菜单数据(每条数据中都包含访问该条记录所需要的权限)，遍历查询出来的菜单数据，如果当前请求的URL 地址和菜单中某一条记录的patten 属性匹配 上了(例如&#x2F;admin&#x2F;hello 匹配 上&#x2F;admin&#x2F; ** )，那么我们就可以获取当前请求所需要的权限 。 从 menu 对象中获取roles 属 性 ， 并将其转为一个数组，然后通过<strong>SecurityConfig#createList</strong> 方法创建一个<strong>Collection<ConfigAttribute><strong>对象并返回。如果当前请求的URL 地址和数据库中menu 表的所有项都匹配不上，那么最终返null, 那么受保护对象到底能不能访问呢?这就要看</strong>AbstractSecurityInterceptor</ConfigAttribute></strong> 对象中的<strong>rejectPublicInvocations</strong> 属性 了，该属性默认为<strong>false</strong> ,表示当<strong>getAttributes</strong>方法返回null时，允许访问受保护对象(详情可看<strong>AbstractSecurityInterceptor#beforeInvocation</strong>)</li><li><strong>getAlIContigAttributes</strong>: 该方法可以用来返回所有的权限属性，以便在项目启动阶段做校验，如果不需要校验，则直接返回null 即可。</li><li><strong>supports</strong>: 该方法表示当前对象支持处理的受保护对象是<strong>FilterInvocation</strong></li></ol><ul><li><p>配置 Security 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CustomSecurityMetadataSource customSecurityMetadataSource;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityConfig</span><span class="hljs-params">(CustomSecurityMetadataSource customSecurityMetadataSource, UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.customSecurityMetadataSource = customSecurityMetadataSource;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userService);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> http.getSharedObject(ApplicationContext.class);<br>        http.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlAuthorizationConfigurer</span>&lt;&gt;(applicationContext))<br>                .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FilterSecurityInterceptor</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>                        object.setSecurityMetadataSource(customSecurityMetadataSource);<br>                        <span class="hljs-comment">//是否拒绝公共资源(默认也是false)</span><br>                        object.setRejectPublicInvocations(<span class="hljs-literal">false</span>);<br>                        <span class="hljs-keyword">return</span> object;<br>                    &#125;<br>                &#125;);<br>        http.formLogin()<br>                .and()<br>                .csrf().disable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动入口类进行测试</p></li></ul><h2 id="12-5-基于方法的权限管理"><a href="#12-5-基于方法的权限管理" class="headerlink" title="12.5 基于方法的权限管理"></a>12.5 基于方法的权限管理</h2><p>​基于方法的权限管理主要是通过<strong>AOP</strong>来实现的, SpringSecurity中通过<strong>MethodSecurityInterceptor</strong>来提供相关的实现. 不同在于<strong>FilterSecurityInterceptor</strong>只是在请求之前进行前置处理, <strong>MethodSecurityInterceptor</strong>除了前置处理之外还可以进行后置处理. 前置处理就是在请求之前判断是否具备相关的权限, 后置处理则是对方法的执行结果进行二次过滤. 前置处理和后置处理分别对应了不同的实现类, 我们分别来看:</p><h3 id="12-5-1-注解介绍"><a href="#12-5-1-注解介绍" class="headerlink" title="12.5.1 注解介绍"></a>12.5.1 注解介绍</h3><p>​目前在SpringBoot中基于方法的权限管理主要是通过注解来实现的, 我们需要通过**@EnableGlobalMethodSecurity**注解来开启权限注解的使用, 用法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个注解中我们设置了三个属性:</p><ul><li><strong>prePostEnabled</strong>: 开启SpringSecurity提供的四个权限注解, <strong>@PostAuthorize</strong>、**@PostFilter<strong>、</strong>@PreAuthorize<strong>以及</strong>@PreFilter**, 这四个注解支持权限表达式, 功能比较丰富</li><li><strong>securedEnabled</strong>: 开启SpringSecurity提供的**@Secured**注解, 该注解不支持权限表达式</li><li><strong>jsr250Enabled</strong>: 开启<strong>JSR-250</strong>提供的注解, 主要包括**@DenyAll<strong>、</strong>@PermitAll<strong>以及</strong>@RolesAllowed**三个注解, 这些注解不支持权限表达式</li></ul><p>这些注解的作用:</p><ul><li><strong>@PostAuthorize</strong>: 在目标方法执行之后进行权限校验</li><li><strong>@PostFilter</strong>: 在目标方法执行之后对方法的返回结果进行过滤</li><li><strong>@PreAuthorize</strong>: 在目标方法执行之前进行权限校验</li><li><strong>@PreFilter</strong>: 在目标方法执行之前对方法参数进行过滤</li><li><strong>@Secured</strong>: 在访问目标方法必须具备相应的角色</li><li><strong>@DenyAll</strong>: 拒绝所有访问</li><li><strong>@PermitAll</strong>: 允许所有访问</li><li><strong>@RolesAllowed</strong>: 访问目标方法必须具备相应的角色</li></ul><p>这些基于方法的权限管理相关的注解， 一般米说只要设置<strong>prePostEnabled&#x3D;true</strong> 就够用了。</p><h3 id="12-5-2-基本用法"><a href="#12-5-2-基本用法" class="headerlink" title="12.5.2 基本用法"></a>12.5.2 基本用法</h3><p>接下来我们通过几个简单的案例来学习上面几种不同注解的用法。</p><p>首先创建一个SpringBoot 项目，引入Web 和SpringSecurity依赖，项目创建完成后，添 加如下配置文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便起见，我们将使用单元测试进行验证，所以这里就不进行额外的配置了，通过 <strong>@EnableGlobalMethodSecurity</strong> 注解开启其他权限注解的使用即可。</p><p>接下来创建一个User 类以备后续使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123; <br>  <span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-comment">//省略getter/setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>准备工作完成后，我们来逐个讲解 一下前面注解的用法。</p><h4 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h4><p><strong>@PreAuthorize</strong> 可以在目标方法执行之前对其进行安全校验，在安全校验时，可以直接使用我们在之前介绍的权限表达式。例如可以定义如下方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/bar/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHandler</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>  <span class="hljs-keyword">return</span> authentication.getDetails().toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这里除 了<strong>hasRole</strong> 表达式之外，也可以使用其他权限表达式，包括自定义的表达式也可以使用。也可以同时使用多个权限表达式，如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) and authentication.name==&#x27;javaboy&#x27;&quot;)</span><br> <span class="hljs-meta">@GetMapping(&quot;/bar/hello&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHandler</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>   <span class="hljs-keyword">return</span> authentication.getDetails().toString();<br> &#125;<br></code></pre></td></tr></table></figure><p>表示访问者名称必须是javaboy，而且还需要同时具备ADMIN 角色，才可以访问该方法。</p><p>在**@PreAuthorize** 注解中，还可以通过#引用方法的参数，并对其进行校验，例如如下方法表示请求者的用户名必须等于方法参数name 的值，方法才可以被执行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;authentication.name==#name&quot;)</span><br> <span class="hljs-meta">@GetMapping(&quot;/bar/hello&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHandler</span><span class="hljs-params">(String name)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello:&quot;</span> + name;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h4><p>​<strong>@PreFiter</strong> 主要是对方法的请求参数进行过滤，它里边包含了一个内置对象<strong>filterObject</strong> 表示要过滤的参数，如果方法只有 一个参数，则内置的<strong>filterObject</strong> 对象就代表该参数:如果方法有多个参数，则需要通过<strong>filterTarget</strong> 来指定<strong>filterObject</strong> 到底代表哪个对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreFilter(value= &quot;filterObiect.id!=0,filterTarget= musers&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUsers</span> <span class="hljs-params">(List&lt;User&gt; users, Integer other)</span> &#123;<br>  System.out.printIn (<span class="hljs-string">&quot;users = &quot;</span> + users);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码表示对方法参数users 进行过滤，将id 为奇数的user 保留。</p><h4 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h4><p>​<strong>@PostAuthorize</strong> 是在目标方法执行之后进行权限校验。可能有读者会觉得奇怪，目标方法 都执行完了才去做权限校验意义何在?其实这个主要是在ACL 权限模型中会用到，目标方法执行完毕后，通过**@PostAuthorize** 注解去校验目标方法的返回值是否满足相应的权限要求。</p><p>​从技术角度来讲 ，**@PostAuthorize** 注解中也可以使用权限表达式，但是在实际开发中权限表达式一般都是结合**@PreAuthorize** 注解一起使用的.<strong>@PostAuthorize</strong>包含一个内置对象<strong>returnObject</strong>，表示方法的返回值，开发者可以对返回值进行校验:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostAuthorize</span> (<span class="hljs-string">&quot;returnObject.id==1&quot;</span>) <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(Integer id)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span> (id, <span class="hljs-string">&quot;javaboy&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个表示方法返回的user 对象的id 必须为1，调用才会顺利通过，否则就会抛出异常。 </p><h4 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h4><p><strong>@PostFilter</strong> 注解在目标方法执行之后，对目标方法的返回结果进行过滤，该注解中包含了一个内置对象<strong>filterObject</strong>，表示目标方法返回的集合&#x2F; 数组中的具体元素:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostFilter</span> (<span class="hljs-string">&quot;filterObject.id%2==0&quot;</span>)<br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>  List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt; (); <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>users.add(newUser(i, <span class="hljs-string">&quot;javaboy:&quot;</span> +i)); <br>    <span class="hljs-keyword">return</span> users;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码表示getAll 方法的返回值users 集合中user 对象的id 必须为偶数。 </p><h4 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h4><p><strong>@Secured</strong> 注解也是Spring Security 提供的权限注解，不同于前面四个注解，该注解不支持权限表达式，只能做 一些简单的权限描述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Secured(&#123;&quot;ROLE_ADMIN&quot;, &quot;ROLE_USER&quot;&#125;)</span><br> <span class="hljs-meta">@GetMapping(&quot;/bar/hello&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHandler</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>这段代码表示用户需要具备ROLE_ADMIN 或者ROLE_USER 角色，才能访问方法。</p><h4 id="DenyAll"><a href="#DenyAll" class="headerlink" title="@DenyAll"></a>@DenyAll</h4><p><strong>@DenyAll</strong> 是 <strong>JSR- 250</strong> 提供的方法注解，看名字就知道这是拒绝所有访问:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DenyAll</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">denyAll</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DenVAIl&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PermitAll"><a href="#PermitAll" class="headerlink" title="@PermitAll"></a>@PermitAll</h4><p><strong>@PermitAll</strong> 也是<strong>JSR- 250</strong> 提供的方法注解，看名字就知道这是允许所有访问:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PermitAll</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">permitAll</span> <span class="hljs-params">()</span> &#123; <br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PermitAll&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RolesAllowed"><a href="#RolesAllowed" class="headerlink" title="@RolesAllowed"></a>@RolesAllowed</h4><p>​<strong>@RolesAllowed</strong> 也是<strong>JSR-250</strong>提供的注解，可以添加在方法上或者类上，当添加在类上时， 表示该注解对类中的所有方法生效:如果类上和方法上都有该注解，并且起冲突，则以方法上的注解为准。我们来看 一个简单的案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RolesAllowed</span> (&#123;<span class="hljs-string">&quot;ADMIN&quot;</span>, <span class="hljs-string">&quot;USER&quot;</span> &#125;) <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">rolesAllowed</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RolesAllowed&quot;</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-5-3-原理剖析"><a href="#12-5-3-原理剖析" class="headerlink" title="12.5.3 原理剖析"></a>12.5.3 原理剖析</h3><h4 id="MethodSecurityInterceptor"><a href="#MethodSecurityInterceptor" class="headerlink" title="MethodSecurityInterceptor"></a>MethodSecurityInterceptor</h4><p>​在之前小节中，我们介绍了<strong>AbstractSecurityInterrceptor</strong> 中的三大方法，当我们基于<strong>URL</strong> 请求地址进行权限控制时，使用的<strong>AbstractSecurityInterceptor</strong> 实现类是<strong>FilterSecurityInterceptor</strong>, 而当我们基于方法进行权限控制时，使用的 <strong>AbstractSecurityInterceptor</strong> 实现类是 <strong>MethodSecurityInterceptor</strong>.</p><p>​<strong>MethodSecurityInterceptor</strong> 提供了基于<strong>AOP</strong>的方法拦截，该拦截器中所使用的 <strong>SecurityMetadataSource</strong> 类型为 <strong>MethodSecurityMetadataSource</strong>。<strong>MethodSecurityInterceptor</strong> 中最重要的就是<strong>invoke</strong>方法，我们一起来看一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-type">InterceptorStatusToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.beforeInvocation(mi);<br>Object result;<br><span class="hljs-keyword">try</span> &#123;<br>result = mi.proceed();<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-built_in">super</span>.finallyInvocation(token);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.afterInvocation(token, result);<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>invoke</strong>方法的逻辑非常清晰明了。首先调用父类的<strong>beforeInvocation</strong> 方法进行权限校验，校验通过后，调用 <strong>mi.proceed()</strong> 方法继续执行目标方法，然后在 <strong>finally</strong>代码块中调用 <strong>finallyInvocation</strong> 方法完成一些清理工作，最后调用父类的<strong>afterInvocation</strong> 方法进行请求结果过滤</p><p>​之前我们介绍了<strong>FilterSecurityInterceptor</strong> 是通过<strong>ExpressionUrlAuthorizationConfigurer</strong> 或者<strong>UrlAuthorizationConfigurer</strong> 进行配置的，那么<strong>MethodSecurityInterceptor</strong> 又是通过谁配置的呢?在前面的配置中，我们使用到了**@EnableGlobalMethodsecurity** 注解，所以就以该注解为线索展开分析。</p><h4 id="EnableGlobalMethodSecurity"><a href="#EnableGlobalMethodSecurity" class="headerlink" title="@EnableGlobalMethodSecurity"></a>@EnableGlobalMethodSecurity</h4><p><strong>@EnableGlobalMethodSecurity</strong>用来开启方法的权限注解，我们来看一下该注解的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(&#123; GlobalMethodSecuritySelector.class &#125;)</span><br><span class="hljs-meta">@EnableGlobalAuthentication</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableGlobalMethodSecurity &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">prePostEnabled</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">securedEnabled</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">jsr250Enabled</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyTargetClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>AdviceMode <span class="hljs-title function_">mode</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> AdviceMode.PROXY;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">order</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Ordered.LOWEST_PRECEDENCE;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​从该类的定义上可以看到，它引入了一个配置<strong>GlobalMethodSecuritySelector</strong> ，该类的作用主要是用来导入外部配置类，我们来看 一下该类的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalMethodSecuritySelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>Class&lt;EnableGlobalMethodSecurity&gt; annoType = EnableGlobalMethodSecurity.class;<br>Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(annoType.getName(),<br><span class="hljs-literal">false</span>);<br><span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> AnnotationAttributes.fromMap(annotationAttributes);<br>Assert.notNull(attributes, () -&gt; String.format(<span class="hljs-string">&quot;@%s is not present on importing class &#x27;%s&#x27; as expected&quot;</span>,<br>annoType.getSimpleName(), importingClassMetadata.getClassName()));<br><span class="hljs-comment">// TODO would be nice if could use BeanClassLoaderAware (does not work)</span><br>Class&lt;?&gt; importingClass = ClassUtils.resolveClassName(importingClassMetadata.getClassName(),<br>ClassUtils.getDefaultClassLoader());<br><span class="hljs-type">boolean</span> <span class="hljs-variable">skipMethodSecurityConfiguration</span> <span class="hljs-operator">=</span> GlobalMethodSecurityConfiguration.class<br>.isAssignableFrom(importingClass);<br><span class="hljs-type">AdviceMode</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> attributes.getEnum(<span class="hljs-string">&quot;mode&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isProxy</span> <span class="hljs-operator">=</span> AdviceMode.PROXY == mode;<br><span class="hljs-type">String</span> <span class="hljs-variable">autoProxyClassName</span> <span class="hljs-operator">=</span> isProxy ? AutoProxyRegistrar.class.getName()<br>: GlobalMethodSecurityAspectJAutoProxyRegistrar.class.getName();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">jsr250Enabled</span> <span class="hljs-operator">=</span> attributes.getBoolean(<span class="hljs-string">&quot;jsr250Enabled&quot;</span>);<br>List&lt;String&gt; classNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-keyword">if</span> (isProxy) &#123;<br>classNames.add(MethodSecurityMetadataSourceAdvisorRegistrar.class.getName());<br>&#125;<br>classNames.add(autoProxyClassName);<br><span class="hljs-keyword">if</span> (!skipMethodSecurityConfiguration) &#123;<br>classNames.add(GlobalMethodSecurityConfiguration.class.getName());<br>&#125;<br><span class="hljs-keyword">if</span> (jsr250Enabled) &#123;<br>classNames.add(Jsr250MetadataSourceConfiguration.class.getName());<br>&#125;<br><span class="hljs-keyword">return</span> classNames.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​这里只有一个<strong>selectImports</strong>方法，该方法的参数<strong>importingClassMetadata</strong>中保存了**@EnableGilobalMethodsecurity** 注解的元数据，包括各个属性的值、注解是加在哪个配置类上等。</p><p>​<strong>selectImports</strong>方法的逻辑比较简单， 要导入的外部配置类有如下几种:</p><ul><li><strong>MethodSecurityMetadataSourceAdvisorRegistrar</strong>: 如果使用的是Spring自带的<strong>AOP</strong>，则该配置类会被导入。该类主要用来向Spring 容器中注册一个<strong>MethodSecurityMetadataSourceAdvisor</strong> 对象, 这个对象中定义了<strong>AOP</strong> 中的<strong>pointcut</strong>和<strong>advice</strong>。</li><li><strong>autoProxyClassName</strong> : 注册自动代理创建者，根据不同的代理模式而定。</li><li><strong>GlobalMethodSecurityConfiguration</strong>: 这个配置类用来提供<strong>MethodSecurityMetadataSource</strong> 和 <strong>Methodinterceptor</strong> 两个关键对象。 如果开发者自定义配置类继承自<strong>GlobalMethodsecurityConfiguration</strong> ，则这里不会导入这个外部配置类。</li><li><strong>Js1250MetadataSourceConfiguration</strong>: 如果开启了<strong>JSR-250</strong> 注解，则会导入该配置类。该配置类主要用来提供 <strong>JSR-250</strong> 注解所需的<strong>JsI250MethodSecurityMetadataSource</strong>对象。</li></ul><p>这四个导入的外部配置类中，<strong>MethodsecurityMetadataSourceAdvisorRegistrar</strong> 是用来配置 <strong>MethodSecuritvMetadataSourceAdvisor</strong> 的，而 <strong>MethodSecuritvMetadataSourceAdvisor</strong>则提供 了<strong>AOP</strong> 所需的<strong>pointcut</strong> 和<strong>advice</strong> 。先来看<strong>MethodSecurityMetadataSourceAdvisorRegistrar</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodSecurityMetadataSourceAdvisorRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br><span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">advisor</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder<br>.rootBeanDefinition(MethodSecurityMetadataSourceAdvisor.class);<br>advisor.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);<br>advisor.addConstructorArgValue(<span class="hljs-string">&quot;methodSecurityInterceptor&quot;</span>);<br>advisor.addConstructorArgReference(<span class="hljs-string">&quot;methodSecurityMetadataSource&quot;</span>);<br>advisor.addConstructorArgValue(<span class="hljs-string">&quot;methodSecurityMetadataSource&quot;</span>);<br>MultiValueMap&lt;String, Object&gt; attributes = importingClassMetadata<br>.getAllAnnotationAttributes(EnableGlobalMethodSecurity.class.getName());<br><span class="hljs-type">Integer</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> (Integer) attributes.getFirst(<span class="hljs-string">&quot;order&quot;</span>);<br><span class="hljs-keyword">if</span> (order != <span class="hljs-literal">null</span>) &#123;<br>advisor.addPropertyValue(<span class="hljs-string">&quot;order&quot;</span>, order);<br>&#125;<br>registry.registerBeanDefinition(<span class="hljs-string">&quot;metaDataSourceAdvisor&quot;</span>, advisor.getBeanDefinition());<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​这个类很好理解，在<strong>registerBeanDefinitions</strong> 方法中，首先定义<strong>BeanDefinitionBuilder</strong>，然 后给目标对象<strong>MethodsecurityMetadataSourceAdvisor</strong> 的构造方法设置参数，参数一共有三个: 第一个是要引用的<strong>MethodInterceptor</strong> 对象名;第二是要引用的<strong>MethodSecurityMetadataSource</strong> 对象名;第三个参数和第二个一样，只不过一个是引用， 一个是字符串。所有属性都配置好之后，将其注册到Spring 容器中。</p><p>​我们再来看<strong>MethodsecurityMetadataSourceAdvisor</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodSecurityMetadataSourceAdvisor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractPointcutAdvisor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> MethodSecurityMetadataSource attributeSource;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> MethodInterceptor interceptor;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pointcut</span> <span class="hljs-variable">pointcut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodSecurityMetadataSourcePointcut</span>();<br><br><span class="hljs-keyword">private</span> BeanFactory beanFactory;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String adviceBeanName;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String metadataSourceBeanName;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Object</span> <span class="hljs-variable">adviceMonitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodSecurityMetadataSourceAdvisor</span><span class="hljs-params">(String adviceBeanName, MethodSecurityMetadataSource attributeSource,</span><br><span class="hljs-params">String attributeSourceBeanName)</span> &#123;<br>Assert.notNull(adviceBeanName, <span class="hljs-string">&quot;The adviceBeanName cannot be null&quot;</span>);<br>Assert.notNull(attributeSource, <span class="hljs-string">&quot;The attributeSource cannot be null&quot;</span>);<br>Assert.notNull(attributeSourceBeanName, <span class="hljs-string">&quot;The attributeSourceBeanName cannot be null&quot;</span>);<br><span class="hljs-built_in">this</span>.adviceBeanName = adviceBeanName;<br><span class="hljs-built_in">this</span>.attributeSource = attributeSource;<br><span class="hljs-built_in">this</span>.metadataSourceBeanName = attributeSourceBeanName;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Pointcut <span class="hljs-title function_">getPointcut</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.pointcut;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Advice <span class="hljs-title function_">getAdvice</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.adviceMonitor) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.interceptor == <span class="hljs-literal">null</span>) &#123;<br>Assert.notNull(<span class="hljs-built_in">this</span>.adviceBeanName, <span class="hljs-string">&quot;&#x27;adviceBeanName&#x27; must be set for use with bean factory lookup.&quot;</span>);<br>Assert.state(<span class="hljs-built_in">this</span>.beanFactory != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;BeanFactory must be set to resolve &#x27;adviceBeanName&#x27;&quot;</span>);<br><span class="hljs-built_in">this</span>.interceptor = <span class="hljs-built_in">this</span>.beanFactory.getBean(<span class="hljs-built_in">this</span>.adviceBeanName, MethodInterceptor.class);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.interceptor;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>ois.defaultReadObject();<br><span class="hljs-built_in">this</span>.adviceMonitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-built_in">this</span>.attributeSource = <span class="hljs-built_in">this</span>.beanFactory.getBean(<span class="hljs-built_in">this</span>.metadataSourceBeanName,<br>MethodSecurityMetadataSource.class);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodSecurityMetadataSourcePointcut</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StaticMethodMatcherPointcut</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(Method m, Class&lt;?&gt; targetClass)</span> &#123;<br><span class="hljs-type">MethodSecurityMetadataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> MethodSecurityMetadataSourceAdvisor.<span class="hljs-built_in">this</span>.attributeSource;<br><span class="hljs-keyword">return</span> !CollectionUtils.isEmpty(source.getAttributes(m, targetClass));<br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​<strong>MethodSecurityMetadataSourceAdvisor</strong> 継承自 <strong>AbstractPointcutAdvisor</strong> , 主要定了<strong>AOP</strong> 的<strong>pointcut</strong>和<strong>advice</strong>。<strong>MethodSecurityMetadataSource.Advisor</strong>构造方法所需的三个参数就是前面<strong>MethodSecurityMetadataSourceAdvisorRegistrar</strong> 类中提供的三个参数。</p><p>​<strong>pointcut</strong>也就是切点，可以简单理解为方法的拦截规则，即哪些方法需要拦截，哪些方法不需要拦截。不用看代码我们也知道，加了权限注解的方法需要拦截 下来，没加权限注解的方法则不需要拦截。</p><p>​这里的<strong>pointcut</strong>対象就是内部类<strong>MethodSecurityMetadataSourcePointcut</strong> , 在它的 <strong>matches</strong> 方法中，定义了具体的拦截规则。通过 <strong>attributeSource#getAttributes</strong> 方法去查看目标方法上有没有相应的权限注解, 如果有, 则返回<strong>true</strong> ， 目标方法就被拦截下来; 如果没有 ，则返回<strong>false</strong> , 目标方法就不会被拦截。这里的<strong>attributeSource</strong> 实际上就是<strong>MethodsecurityMetadataSource</strong> 对象，也就是我们在之前小节中介绍的提供权限元数据的类。</p><p>​<strong>advice</strong>也就是增强&#x2F;通知，就是将方法拦截下来之后要增强的功能。<strong>advice</strong>由<strong>getAdvice()<strong>方法返回，在该方法内部，就是去Spring 容器中查找 一个名为</strong>methodSecurityinterceptor</strong> 的 <strong>MethodInterceptor</strong> 对象，这就是<strong>advice</strong></p><p>​此时 ，读者己经明白了<strong>AOP</strong>的切点和增强&#x2F;通知是如何定义的了 ，这里涉及两个关键对象: 一个名为<strong>methodSecurityInterceptor</strong> 的 <strong>MethodInterceptor</strong> 对象和一个名为 <strong>methodSecurityMetadataSource</strong> 的<strong>MethodSecurityMetadataSource</strong> 対象。</p><p>​这两个关键对象在<strong>GlobalMethodSecurityConfiguration</strong> 类中定义，相关的方法比较长，我们先来看<strong>MethodSecurityMetadataSource</strong> 对象的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="hljs-keyword">public</span> MethodSecurityMetadataSource <span class="hljs-title function_">methodSecurityMetadataSource</span><span class="hljs-params">()</span> &#123;<br>List&lt;MethodSecurityMetadataSource&gt; sources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">ExpressionBasedAnnotationAttributeFactory</span> <span class="hljs-variable">attributeFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionBasedAnnotationAttributeFactory</span>(<br>getExpressionHandler());<br><span class="hljs-type">MethodSecurityMetadataSource</span> <span class="hljs-variable">customMethodSecurityMetadataSource</span> <span class="hljs-operator">=</span> customMethodSecurityMetadataSource();<br><span class="hljs-keyword">if</span> (customMethodSecurityMetadataSource != <span class="hljs-literal">null</span>) &#123;<br>sources.add(customMethodSecurityMetadataSource);<br>&#125;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasCustom</span> <span class="hljs-operator">=</span> customMethodSecurityMetadataSource != <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isPrePostEnabled</span> <span class="hljs-operator">=</span> prePostEnabled();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSecuredEnabled</span> <span class="hljs-operator">=</span> securedEnabled();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isJsr250Enabled</span> <span class="hljs-operator">=</span> jsr250Enabled();<br>Assert.state(isPrePostEnabled || isSecuredEnabled || isJsr250Enabled || hasCustom,<br><span class="hljs-string">&quot;In the composition of all global method configuration, &quot;</span><br>+ <span class="hljs-string">&quot;no annotation support was actually activated&quot;</span>);<br><span class="hljs-keyword">if</span> (isPrePostEnabled) &#123;<br>sources.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrePostAnnotationSecurityMetadataSource</span>(attributeFactory));<br>&#125;<br><span class="hljs-keyword">if</span> (isSecuredEnabled) &#123;<br>sources.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecuredAnnotationSecurityMetadataSource</span>());<br>&#125;<br><span class="hljs-keyword">if</span> (isJsr250Enabled) &#123;<br><span class="hljs-type">GrantedAuthorityDefaults</span> <span class="hljs-variable">grantedAuthorityDefaults</span> <span class="hljs-operator">=</span> getSingleBeanOrNull(GrantedAuthorityDefaults.class);<br><span class="hljs-type">Jsr250MethodSecurityMetadataSource</span> <span class="hljs-variable">jsr250MethodSecurityMetadataSource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.context<br>.getBean(Jsr250MethodSecurityMetadataSource.class);<br><span class="hljs-keyword">if</span> (grantedAuthorityDefaults != <span class="hljs-literal">null</span>) &#123;<br>jsr250MethodSecurityMetadataSource.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());<br>&#125;<br>sources.add(jsr250MethodSecurityMetadataSource);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelegatingMethodSecurityMetadataSource</span>(sources);<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到，这里首先创建了一个<strong>List</strong>集合，用来保存所有的<strong>MethodSecurityMetadataSource</strong> 对象，然后调用<strong>customMethodSecurityMetadataSource</strong> 方法去获取自定义的<strong>MethodSecurityMetadataSource</strong>，默认情况下该方法返回<strong>null</strong>，如果项目有需要，开发者可以重写<strong>customMethodSecurityMetadataSource</strong> 方法来提供自定义的<strong>MethodSecurityMetadataSource</strong> 对象。接下来就是根据注解中配置的属性值，来向<strong>sources</strong>集合中添加相应的<strong>MethodSecurityMetadataSource</strong>对象:</p><ul><li>如果**@EnableGlobalMethodsecurity<strong>注解配置了</strong>prePostEnabled&#x3D;true<strong>，则加入</strong>PrePostAnnotationSecurityMetadataSource** 对象来解析相应的注解。</li><li>如果**@EnableGlobalMethodSecurity<strong>注解配置了</strong>securedEnabled&#x3D;true<strong>，则加入</strong>SecuredAnnotationSecurityMetadataSource** 对象来解析相应的注解。</li><li>如果**@EnableGlobalMethodsecurity<strong>注解配置了</strong>jsr250Enabled&#x3D; true<strong>，则加入</strong>Jsr250MethodSecurityMetadataSource** 对象来解析相应的注解。</li><li>最后构建一个代理对象<strong>DelegatingMethodSecurityMetadataSource</strong>返回即可。</li></ul><p>​可以看到，默认提供的<strong>MethodSecurityMetadataSource</strong> 对象实际上是 一个代理对象，它包含多个不同的<strong>MethodSecurityMetadatasource</strong> 实例。</p><p>​回顾前面所讲的切点定义，在判断 一个方法是否需要被拦截下来时，由这些被代理的对象逐个去解析目标方法是否含有相应的注解 (例如 ，<strong>PrePostAnnotationSecurityMetadataSource</strong>可以检查出目标方法是否含有**@PostAuthorize<strong>、</strong>@PostFilter<strong>、</strong>@PreAuthorize** 以及**@PreFilter** 四种注解 )，如果有，则请求就会被拦截下来。因此，使用哪个权限注解， 一定要先在**@EnableGlobalMethodSecurity** 中开启对应的配置。</p><p>​再来看<strong>MethodInterceptor</strong>的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MethodInterceptor <span class="hljs-title function_">methodSecurityInterceptor</span><span class="hljs-params">(MethodSecurityMetadataSource methodSecurityMetadataSource)</span> &#123;<br><span class="hljs-built_in">this</span>.methodSecurityInterceptor = isAspectJ() ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">AspectJMethodSecurityInterceptor</span>()<br>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodSecurityInterceptor</span>();<br><span class="hljs-built_in">this</span>.methodSecurityInterceptor.setAccessDecisionManager(accessDecisionManager());<br><span class="hljs-built_in">this</span>.methodSecurityInterceptor.setAfterInvocationManager(afterInvocationManager());<br><span class="hljs-built_in">this</span>.methodSecurityInterceptor.setSecurityMetadataSource(methodSecurityMetadataSource);<br><span class="hljs-type">RunAsManager</span> <span class="hljs-variable">runAsManager</span> <span class="hljs-operator">=</span> runAsManager();<br><span class="hljs-keyword">if</span> (runAsManager != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.methodSecurityInterceptor.setRunAsManager(runAsManager);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.methodSecurityInterceptor;<br>&#125;<br><br><span class="hljs-keyword">protected</span> AccessDecisionManager <span class="hljs-title function_">accessDecisionManager</span><span class="hljs-params">()</span> &#123;<br>List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">if</span> (prePostEnabled()) &#123;<br><span class="hljs-type">ExpressionBasedPreInvocationAdvice</span> <span class="hljs-variable">expressionAdvice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionBasedPreInvocationAdvice</span>();<br>expressionAdvice.setExpressionHandler(getExpressionHandler());<br>decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PreInvocationAuthorizationAdviceVoter</span>(expressionAdvice));<br>&#125;<br><span class="hljs-keyword">if</span> (jsr250Enabled()) &#123;<br>decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jsr250Voter</span>());<br>&#125;<br><span class="hljs-type">RoleVoter</span> <span class="hljs-variable">roleVoter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleVoter</span>();<br><span class="hljs-type">GrantedAuthorityDefaults</span> <span class="hljs-variable">grantedAuthorityDefaults</span> <span class="hljs-operator">=</span> getSingleBeanOrNull(GrantedAuthorityDefaults.class);<br><span class="hljs-keyword">if</span> (grantedAuthorityDefaults != <span class="hljs-literal">null</span>) &#123;<br>roleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());<br>&#125;<br>decisionVoters.add(roleVoter);<br>decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticatedVoter</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AffirmativeBased</span>(decisionVoters);<br>&#125;<br><br><span class="hljs-keyword">protected</span> AfterInvocationManager <span class="hljs-title function_">afterInvocationManager</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (prePostEnabled()) &#123;<br><span class="hljs-type">AfterInvocationProviderManager</span> <span class="hljs-variable">invocationProviderManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AfterInvocationProviderManager</span>();<br><span class="hljs-type">ExpressionBasedPostInvocationAdvice</span> <span class="hljs-variable">postAdvice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionBasedPostInvocationAdvice</span>(<br>getExpressionHandler());<br><span class="hljs-type">PostInvocationAdviceProvider</span> <span class="hljs-variable">postInvocationAdviceProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostInvocationAdviceProvider</span>(postAdvice);<br>List&lt;AfterInvocationProvider&gt; afterInvocationProviders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>afterInvocationProviders.add(postInvocationAdviceProvider);<br>invocationProviderManager.setProviders(afterInvocationProviders);<br><span class="hljs-keyword">return</span> invocationProviderManager;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>MethodInterceptor</strong> 的创建，首先看代理的方式，默认使用Spring 自带的<strong>AOP</strong>，所以使用 <strong>MethodSecurityInterceptor</strong> 来创建对应的 <strong>MethodInterceptor</strong> 实例。然后给 <strong>methodSecurityInterceptor</strong> 对象设置 AccesDecisionManager 决策管理器，默认的決策管理器是 Affirmative Based，根据 @EnableGlobalMethodSecurity 注解的配置，在角色管理器中配置不同的投票器;</p><p>​接下来给<strong>methodSecurityInterceptor</strong> 配置后置处理器，如果**@EnableGlobalMethodSecurity<strong>注解配置了 <strong>prePostEnabled&#x3D;true</strong> ， 则添加一个后置处理 器 <strong>PostInvocationAdviceProvider</strong> ， 该类用来处理</strong>@PostAuthorize** 和**@PostFilter** 两个注解;最后再把前面创建好的<strong>MethodSecurityMetadataSource</strong> 对象配置给<strong>methodSecurityInterceptor</strong> 。</p><p>​至于<strong>methodSecurityinterceptor</strong> 对象的工作逻辑，我们在本小节一开始就已经介绍了。</p><h2 id="第十三章-OAuth2"><a href="#第十三章-OAuth2" class="headerlink" title="第十三章 OAuth2"></a>第十三章 OAuth2</h2><h3 id="13-1-OAuth2-简介"><a href="#13-1-OAuth2-简介" class="headerlink" title="13.1 OAuth2 简介"></a>13.1 OAuth2 简介</h3><p>​<strong>OAuth</strong> 是一个开放的非常重要的认证标准&#x2F;协议，该标准允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如头像、照片、视频等），并且在这个过程中无须将用户名和密码提供给第三方应用。通过令牌（token）可以实现这一功能，每一个令牌授权一个特定的网站在特定的时段内允许可特定的资源。<strong>OAuth</strong> 让用户可以授权第三方网站灵活访问它们存储在另外一些资源服务器上的特定信息，而非所有内容。对于用户而言，我们在互联网应用中最常见的 OAuth 应用就是各种第三方登录，例如QQ授权登录、微信授权登录、微博授权登录、GitHub 授权登录等。</p><p>​例如用户想登录 Ruby China，传统方式是使用用户名密码但是这样并不安全，因为网站会存储你的用户名密码，这样可能会导致密码泄露。这种授权方式安全隐患很大，如果使用 <strong>OAuth</strong> 协议就能很好地解决这一问题。</p><p><img src="/2022/01/26/SpringSecurity/image-20230727112033363.png" alt="image-20230727112033363"></p><blockquote><p>注意: OAuth2 是OAuth 协议的下一版本，但不兼容 OAuth 1.0。 OAuth2 关注客户端开发者的简易性，同时为 Web 应用、桌面应用、移动设备、IoT 设备提供专门的认证流程。</p></blockquote><h3 id="13-2-OAuth2-授权总体流程"><a href="#13-2-OAuth2-授权总体流程" class="headerlink" title="13.2 OAuth2 授权总体流程"></a>13.2 OAuth2 授权总体流程</h3><p>角色梳理:    第三方应用   &lt;—-&gt;  存储用户私密信息应用  —-&gt; 授权服务器  —-&gt; 资源服务器</p><p>整体流程如下:<img src="/2022/01/26/SpringSecurity/image-20230727112305380.png" alt="image-20230727112305380"></p><ol><li>用户打开客户端以后，客户端要求用户给予授权。</li><li>用户同意给予客户端授权。</li><li>客户端使用上一步获得的授权，向认证服务器申请令牌。</li><li>认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</li><li>客户端使用令牌，向资源服务器申请获取资源。</li><li>资源服务器确认令牌无误，同意向客户端开放资源。</li></ol><p>从上图中我们可以看出六个步骤之中，B是关键，即用户怎样才能给于客户端授权。同时会发现 <strong>OAuth2</strong> 中包含四种不同的角色：</p><ul><li><strong>Client：</strong>第三方应用。</li><li><strong>Resource Owner</strong>：资源所有者。</li><li><strong>Authorization Server</strong> ：授权服务器。</li><li><strong>Resource Server</strong>： 资源服务器。</li></ul><h3 id="13-3-四种授权模式"><a href="#13-3-四种授权模式" class="headerlink" title="13.3 四种授权模式"></a>13.3 四种授权模式</h3><h4 id="13-3-1-授权码模式"><a href="#13-3-1-授权码模式" class="headerlink" title="13.3.1 授权码模式"></a>13.3.1 授权码模式</h4><p><strong>授权码模式（<code>Authorization Code</code>）</strong> 是功能最完整、流程最严密、最安全并且使用最广泛的一种<strong>OAuth2</strong>授权模式。同时也是最复杂的一种授权模式，它的特点就是通过客户端的后台服务器，与<code>服务提供商</code>的认证服务器进行互动。其具体的授权流程如图所示: </p><ul><li>Third-party application：第三方应用程序，简称”客户端”（client）；</li><li>Resource Owner：资源所有者，简称”用户”（user）；</li><li>User Agent：用户代理，是指浏览器；</li><li>Authorization Server：认证服务器，即服务端专门用来处理认证的服务器；</li><li>Resource Server：资源服务器，即服务端存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。</li></ul><p><img src="/2022/01/26/SpringSecurity/image-20230727131354290.png" alt="image-20230727131354290"></p><p>具体流程如下:</p><ul><li><p>（A）用户访问第三方应用，第三方应用通过浏览器导向认证服务器。</p></li><li><p>（B）用户选择是否给予客户端授权。</p></li><li><p>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。</p></li><li><p>（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p></li><li><p>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p></li></ul><p>核心参数:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://wx.com/oauth/authorize?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=http://www.baidu.com&amp;scope=read<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><strong>client_id</strong></td><td>客户端id, 授权服务器注册应用后的唯一标识</td></tr><tr><td><strong>response_type</strong></td><td>授权类型, 在授权码中必须为 code</td></tr><tr><td><strong>redirect_uri</strong></td><td>该参数表示在登录校验成功&#x2F;失败后，跳转的地址</td></tr><tr><td><strong>scope</strong></td><td>该参数表示授权范围,令牌可以访问资源权限: read 只读   all 读写</td></tr><tr><td>state</td><td>可选 存在原样返回客户端 用来防止 CSRF跨站攻击</td></tr></tbody></table><h4 id="13-3-2-简化模式"><a href="#13-3-2-简化模式" class="headerlink" title="13.3.2 简化模式"></a>13.3.2 简化模式</h4><p><strong>简化模式（<code>implicit</code> grant type）</strong>不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。其具体的授权流程如图所示:</p><p><img src="/2022/01/26/SpringSecurity/image-20230727132101274.png" alt="image-20230727132101274"></p><p>具体步骤如下:</p><ul><li>（A）第三方应用将用户导向认证服务器。</li><li>（B）用户决定是否给于客户端授权。</li><li>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。#token</li><li>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</li><li>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</li><li>（F）浏览器执行上一步获得的脚本，提取出令牌。</li><li>（G）浏览器将令牌发给客户端。</li></ul><p>核心参数:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://wx.com/oauth/authorize?response_type=token&amp;client_id=CLIENT_ID&amp;redirect_uri=http://www.baidu.com&amp;scope=read<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>client_id</td><td>授权服务器注册应用后的唯一标识</td></tr><tr><td>response_type</td><td>必须 固定值  在授权码中必须为 token</td></tr><tr><td>redirect_uri</td><td>必须 通过客户端注册的重定向URL</td></tr><tr><td>scope</td><td>必须 令牌可以访问资源权限</td></tr><tr><td>state</td><td>可选 存在原样返回客户端 用来防止 CSRF跨站攻击</td></tr></tbody></table><h4 id="13-3-3-密码模式"><a href="#13-3-3-密码模式" class="headerlink" title="13.3.3 密码模式"></a>13.3.3 密码模式</h4><p><strong>密码模式（Resource Owner <code>Password</code> Credentials Grant）</strong>中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个相同公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。其具体的授权流程如图所示: </p><p><img src="/2022/01/26/SpringSecurity/image-20230727132519885.png" alt="image-20230727132519885"></p><p>具体步骤如下:</p><ul><li><p>（A）用户向客户端提供用户名和密码。</p></li><li><p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p></li><li><p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p></li></ul><p>核心参数: </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://wx.com/token?grant_type=password&amp;username=USERNAME&amp;password=PASSWORD&amp;client_id=CLIENT_ID<br></code></pre></td></tr></table></figure><h4 id="13-3-4-客户端模式"><a href="#13-3-4-客户端模式" class="headerlink" title="13.3.4 客户端模式"></a>13.3.4 客户端模式</h4><p><strong>客户端模式（<code>Client Credentials</code> Grant）</strong>指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</p><p><img src="/2022/01/26/SpringSecurity/image-20230727132707072.png" alt="image-20230727132707072"></p><p>具体步骤如下:</p><ul><li><p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p></li><li><p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://wx.com/token?grant_type=client_credentials&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET<br></code></pre></td></tr></table></figure><h3 id="13-4-OAuth2-标准接口"><a href="#13-4-OAuth2-标准接口" class="headerlink" title="13.4 OAuth2 标准接口"></a>13.4 OAuth2 标准接口</h3><ul><li><p><code>/oauth/authorize</code>：授权端点</p></li><li><p><code>/oauth/token</code>：获取令牌端点</p></li><li><p>&#x2F;oauth&#x2F;confirm_access：用户确认授权提交端点</p></li><li><p>&#x2F;oauth&#x2F;error：授权服务错误信息端点</p></li><li><p>&#x2F;oauth&#x2F;check_token：用于资源服务访问的令牌解析端点</p></li><li><p>&#x2F;oauth&#x2F;token_key：提供公有密匙的端点，如果使用JWT令牌的话</p></li></ul><h3 id="13-5-GitHub-授权登录"><a href="#13-5-GitHub-授权登录" class="headerlink" title="13.5 GitHub 授权登录"></a>13.5 GitHub 授权登录</h3><h4 id="13-5-1-创建-OAuth-应用"><a href="#13-5-1-创建-OAuth-应用" class="headerlink" title="13.5.1 创建 OAuth 应用"></a>13.5.1 创建 OAuth 应用</h4><ul><li>访问 github 并登录，在<a href="https://github.com/settings/profile%E4%B8%AD%E6%89%BE%E5%88%B0">https://github.com/settings/profile中找到</a> Developer Settings 选项</li></ul><p><img src="/2022/01/26/SpringSecurity/image-20230727140150475.png" alt="image-20230727140150475"></p><ul><li>创建 OAuth App并输入一下基本信息:</li></ul><p><img src="/2022/01/26/SpringSecurity/image-20230727140401153.png" alt="image-20230727140401153"></p><ul><li>注册成功后会获取到对应的 Client ID 和 Client Secret。<img src="/2022/01/26/SpringSecurity/image-20230727140444111.png" alt="image-20230727140444111"></li></ul><h4 id="13-5-2-client开发"><a href="#13-5-2-client开发" class="headerlink" title="13.5.2 client开发"></a>13.5.2 client开发</h4><ul><li>创建 springboot 应用，并引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建测试 controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> DefaultOAuth2User <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello &quot;</span>);<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-keyword">return</span> (DefaultOAuth2User) authentication.getPrincipal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置 security</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and()<br>                .oauth2Login();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br><span class="hljs-attr">security</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">oauth2</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">client</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">registration</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">github</span>:<span class="hljs-string"></span><br>            <span class="hljs-attr">client-id</span>: <span class="hljs-string">5f38065c40f3d99682ab</span><br>            <span class="hljs-attr">client-secret</span>: <span class="hljs-string">2fe5a049f5339776da79dc307ed15c7786207eab</span><br><span class="hljs-comment">            # 一定要和github配置的重定向回调url一致</span><br>            <span class="hljs-attr">redirect-uri</span>: <span class="hljs-string">http://localhost:9200/login/oauth2/code/github</span><br></code></pre></td></tr></table></figure><ul><li><p>启动测试</p><p><img src="/2022/01/26/SpringSecurity/image-20230727143108798.png" alt="image-20230727143108798"></p></li></ul><ul><li>点击同意授权再点击 <strong>github</strong> 登录,登录后发现<strong>github</strong>跳转到<code>https://github.com/login/oauth/authorize?client_id=5f38065c40f3d99682ab&amp;redirect_uri=http%3A%2F%2Flocalhost%3A9200%2Flogin%2Foauth2%2Fcode%2Fgithub&amp;response_type=code&amp;scope=read%3Auser&amp;state=8COH5vw1zNuxXXTswVPBQFzGDf-HZ1AMfCEt5_l8TXg%3D</code></li></ul><p><img src="/2022/01/26/SpringSecurity/image-20230728223519418.png" alt="image-20230728223519418"></p><ul><li><p>访问 hello 接口</p><p><img src="/2022/01/26/SpringSecurity/image-20230727143142650.png" alt="image-20230727143142650"></p></li></ul><h4 id="13-5-3-client原理剖析"><a href="#13-5-3-client原理剖析" class="headerlink" title="13.5.3 client原理剖析"></a>13.5.3 client原理剖析</h4><p>​可以看到，接入Github 第三方登录整个过程非常顺畅，开发者几乎不需要做什么事情， GitHub上注册应用，项目中配置 一下ClientID和ClientSecret，然后再开启 一下OAuth2登录就可以了。</p><p>​那么Spring Security如何得知GitHub授权地址、用户接口、令牌接口等信息?</p><p>​由于用户接口、令牌接口、授权地址等信息一般不会轻易变化，所以Spring Security将一些常用的第三方登录如Google 、GitHub、Facebook、Okta 的信息收集起来，保存在一个枚举类<strong>CommonOAuth2Provider</strong> 中，当我们在<strong>application.properties</strong> 中配置<strong>GitHub</strong> 时，就会自动选择枚举类中的<strong>GITHUB</strong>。我们来看 一下<strong>CommonOAuth2Provider</strong> 中关于<strong>GITHUB</strong> 信息的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">GITHUB &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">getBuilder</span><span class="hljs-params">(String registrationId)</span> &#123;<br>ClientRegistration.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getBuilder(registrationId,<br>ClientAuthenticationMethod.BASIC, DEFAULT_REDIRECT_URL);<br>builder.scope(<span class="hljs-string">&quot;read:user&quot;</span>);<br>builder.authorizationUri(<span class="hljs-string">&quot;https://github.com/login/oauth/authorize&quot;</span>);<br>builder.tokenUri(<span class="hljs-string">&quot;https://github.com/login/oauth/access_token&quot;</span>);<br>builder.userInfoUri(<span class="hljs-string">&quot;https://api.github.com/user&quot;</span>);<br>builder.userNameAttributeName(<span class="hljs-string">&quot;id&quot;</span>);<br>builder.clientName(<span class="hljs-string">&quot;GitHub&quot;</span>);<br><span class="hljs-keyword">return</span> builder;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，需要用到的地址都提前定义好 了。</p><p>当我们开启<strong>OAuth2</strong>自动登录<code>http.oauth2Login()</code>之后，在SpringSecurity 过滤器链中多了两个过滤器:</p><ul><li><strong>OAuth2AuthorizationRequestRedirectFilter</strong></li><li><strong>OAuth2LoginAuthenticationFilter</strong></li></ul><p>这两个过滤器链是如何初始化以及配置的详情可看<strong>OAuth2LoginConfigurer#init、configure</strong></p><p> 当用户在没有登录时就去访问 <strong><a href="http://localhost:8080/hello">http://localhost:8080/hello</a></strong> 地址，会被自动导入到 GitHub 授权页面，这个过程是由 <strong>OAuth2AuthorizationRequestRedirectFilter</strong> 过滤器完成的。</p><p>​接下来用户进行GitHub 登录，登录成功并确认授权后，GitHub授权服务器会调用回调地址，同时返回一个授权码，客户端再根据授权码去GitHub授权服务器上获取<strong>AccessToken</strong>，有了<strong>AccessToken</strong> 就可以获取用户信息了，这个过程是由<strong>OAuth2LoginAuthenticationFilter</strong> 过滤器来完成的。</p><p>​</p><p>​接下来我们先对这里涉及的几个关键类进行简单分析:</p><h5 id="OAuth2ClientRegistrationRepositoryConfiguration"><a href="#OAuth2ClientRegistrationRepositoryConfiguration" class="headerlink" title="OAuth2ClientRegistrationRepositoryConfiguration"></a>OAuth2ClientRegistrationRepositoryConfiguration</h5><p><strong>OAuth2ClientRegistrationRepositoryConfiguration</strong> 是一个配置类，当项目启动时，该类会自动加载，并向Spring 容器中注册 一个<strong>InMemoryClientRegistrationRepository</strong> 实例，该实例保存了客户端注册表信息 ， 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;OAuth2ClientProperties.class&#125;)</span><br><span class="hljs-meta">@Conditional(&#123;ClientsConfiguredCondition.class&#125;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OAuth2ClientRegistrationRepositoryConfiguration</span> &#123;<br>  OAuth2ClientRegistrationRepositoryConfiguration() &#123;<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConditionalOnMissingBean(&#123;ClientRegistrationRepository.class&#125;)</span><br>  InMemoryClientRegistrationRepository <span class="hljs-title function_">clientRegistrationRepository</span><span class="hljs-params">(OAuth2ClientProperties properties)</span> &#123;<br>    List&lt;ClientRegistration&gt; registrations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(OAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryClientRegistrationRepository</span>(registrations);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​可以看到，<strong>clientRegistrationRepository</strong> 方法的参数实际上就是我们在<strong>application.properties</strong> 中配置的<strong>GitHub</strong>的<strong>ClientID</strong>和<strong>ClientSecret</strong>。接下来调用<strong>getClientRegistrations</strong> 方法，会将 <strong>CommonOAuth2Provider</strong> 枚举类中预设的 <strong>GitHub</strong> 信息和用户配置的 <strong>GitHub</strong> 信息合并然后返回。如果<strong>application.properties</strong> 中只是配置了<strong>GitHub</strong>信息，则这里的<strong>registrations</strong>集合中就只有 一项: 如果<strong>application.properties</strong>中还配置了FaceBook、Google等 信 息 ， 则 <strong>registrations</strong>集合中就包含多项。</p><p>这里就解释了我们配置github是如何加载的</p><h5 id="OAuth2AuthorizationRequestRedirectFilter"><a href="#OAuth2AuthorizationRequestRedirectFilter" class="headerlink" title="OAuth2AuthorizationRequestRedirectFilter"></a>OAuth2AuthorizationRequestRedirectFilter</h5><p>​<strong>OAuth2AuthorizationRequestRedirectFilter</strong> 过滤器主要是判断当前请求是否是授权请求，如果是授权请求 ， 则进行重定向到GitHub授权页面, 否则执行下 一个过滤器 。</p><p>​我们来看一下该过滤器的<strong>doFilterInternal</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">OAuth2AuthorizationRequest</span> <span class="hljs-variable">authorizationRequest</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authorizationRequestResolver.resolve(request);<br><span class="hljs-keyword">if</span> (authorizationRequest != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.sendRedirectForAuthorization(request, response, authorizationRequest);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception failed) &#123;<br><span class="hljs-comment">//省略...</span><br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>filterChain.doFilter(request, response);<br>&#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br><span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​首先调用 <strong>authorizationRequestResolver#resolve</strong> 方法将当前请求解析为一个<strong>OAuth2AuthorizationRequest</strong> 对象: 如果当前请求是授权请求(如<strong>http:&#x2F; localhost:8080&#x2F;oauth2&#x2F;authorization&#x2F;github</strong>), 则根据<strong>InMemoryClientRegistrationRepository</strong> 中保存的客户端注册表信息，构造一个<strong>OAuth2AuthorizationRequest</strong> 对象并返回; 如果当前请求不是授权请求，而是一个普通请求，则这里返回的<strong>OAuth2AuthorizationRequest</strong> 对象为<strong>null</strong>。</p><p>​如果获取到的<strong>authorizationRequest</strong> 对象不为null，即当前请求是授权请求，则调用<strong>sendRedirectForAuthorization</strong> 方法进行重定向，重定向的地址就是GiHub 的授权地址(即枚举类<strong>CommonOAuth2Provider</strong>中<strong>authorizationUri</strong> 方法所配置的地址)。当然这里的地址会在该地址上再自动加上<strong>response_type</strong>、<strong>clientId</strong>、<strong>scope</strong>、<strong>state</strong>以及<strong>redirectUri</strong> 参数(<strong>这些参数都可以从枚举类中获取</strong>).  另外，在重定向之前，还会将当前授权请求保存到一个Map 集合中，并将Map 集合保存到<strong>HttpSession</strong> 中，以备后续使用。</p><p>​<span style="color:red;">总的来说: <strong>OAuth2AuthorizationRequestRedirectFilter</strong>的作用是处理授权请求, 重定向到三方的授权网站</span></p><h5 id="OAuth2LoginAuthenticationFilter"><a href="#OAuth2LoginAuthenticationFilter" class="headerlink" title="OAuth2LoginAuthenticationFilter"></a>OAuth2LoginAuthenticationFilter</h5><p>​通过前面的讲解，可能有读者会疑惑，GitHub 授权服务器登录成功后的回调地址是 <a href="http://localhost:8080/login/oauth2/code/github%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E4%BB%AC%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%AE%9A%E4%B9%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%83%BD%E8%B0%83%E7%94%A8%E6%88%90%E5%8A%9F%E5%91%A2?%E8%BF%99%E5%B0%B1%E6%98%AF**OAuth2LoginAuthenticationFilter">http://localhost:8080/login/oauth2/code/github，但是我们的项目中并没有定义这样一个接口，为什么还能调用成功呢?这就是**OAuth2LoginAuthenticationFilter</a>** 过滤器所起的作用了!</p><p>​<strong>OAuth2LoginAuthenticationFilter</strong> 继承自 <strong>AbstractAuthenticationProcessingFilter</strong>， 它目前的角色相当于我们之前所讲的<strong>UsernamePaswordAuthenticationFilter</strong> 过滤器的角色。在 <strong>AbstractAuthenticationProcessingFilter</strong> 过滤器中会拦截下认证请求进行处理 。我们来看 一<strong>AbstractAuthenticationProcessingFilter#doFilter</strong>方法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-comment">//省略...</span><br><span class="hljs-keyword">if</span> (!requiresAuthentication(request, response)) &#123;<br>chain.doFilter(request, response);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br>   <span class="hljs-comment">//省略...</span><br> &#125;<br></code></pre></td></tr></table></figure><p>​如果使用了<strong>OAuth2</strong>登录, 这里的逻辑就是判断当前请求接口是否是**&#x2F;login&#x2F;oauth2&#x2F;code&#x2F;<em><strong>格式, 如果是, 这是一个认证请求, 将该请求拦截下来交给</strong>OAuth2LoginAuthenticationFilter#attempAuthentication</em>*方法去处理; 如果不是, 则继续下一个过滤器.</p><p>​我们来看一 下<strong>OAuth2LoginAuthenticationFilter#attemptAuthentication</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><br>MultiValueMap&lt;String, String&gt; params = OAuth2AuthorizationResponseUtils.toMultiMap(request.getParameterMap());<br><span class="hljs-keyword">if</span> (!OAuth2AuthorizationResponseUtils.isAuthorizationResponse(params)) &#123;<br>      <span class="hljs-comment">//对请求参数进行校验，请求必须包含授权码code和state 两个参数，否则会抛出异常。</span><br><span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2Error</span>(OAuth2ErrorCodes.INVALID_REQUEST);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());<br>&#125;<br><span class="hljs-comment">//从HttpSession中获取在OAuth2AuthorizationRequestRedirectFilter过滤器中保存</span><br><span class="hljs-type">OAuth2AuthorizationRequest</span> <span class="hljs-variable">authorizationRequest</span> <span class="hljs-operator">=</span><br><span class="hljs-built_in">this</span>.authorizationRequestRepository.removeAuthorizationRequest(request, response);<br><span class="hljs-keyword">if</span> (authorizationRequest == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2Error</span>(AUTHORIZATION_REQUEST_NOT_FOUND_ERROR_CODE);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());<br>&#125;<br><span class="hljs-comment">//检查当前注册应用中是否有授权请求时的应用，如果没有，则拋出异常。</span><br><span class="hljs-type">String</span> <span class="hljs-variable">registrationId</span> <span class="hljs-operator">=</span> authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);<br><span class="hljs-type">ClientRegistration</span> <span class="hljs-variable">clientRegistration</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.clientRegistrationRepository.findByRegistrationId(registrationId);<br><span class="hljs-keyword">if</span> (clientRegistration == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2Error</span>(CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE,<br><span class="hljs-string">&quot;Client Registration not found with Id: &quot;</span> + registrationId, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    构造一个未经认证的OAuth2LoginAuthenticationToken对象，并调用authenticate</span><br><span class="hljs-comment">方法进行认证。认证成功后，最终封装成一个OAuth2AuthenticationToken 对象并返回。注意的是，这里认证时调用的AuthenticationProvider是OAutb2LoginAuthenticationProvider是在初始化时注入的</span><br><span class="hljs-comment">**/</span><br><span class="hljs-type">String</span> <span class="hljs-variable">redirectUri</span> <span class="hljs-operator">=</span> UriComponentsBuilder.fromHttpUrl(UrlUtils.buildFullRequestUrl(request))<br>.replaceQuery(<span class="hljs-literal">null</span>)<br>.build()<br>.toUriString();<br><span class="hljs-type">OAuth2AuthorizationResponse</span> <span class="hljs-variable">authorizationResponse</span> <span class="hljs-operator">=</span> OAuth2AuthorizationResponseUtils.convert(params, redirectUri);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">authenticationDetails</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authenticationDetailsSource.buildDetails(request);<br><span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">authenticationRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2LoginAuthenticationToken</span>(<br>clientRegistration, <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthorizationExchange</span>(authorizationRequest, authorizationResponse));<br>authenticationRequest.setDetails(authenticationDetails);<br><br>    <span class="hljs-comment">//调用AuthenticationManage认证</span><br><span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">authenticationResult</span> <span class="hljs-operator">=</span><br>(OAuth2LoginAuthenticationToken) <span class="hljs-built_in">this</span>.getAuthenticationManager().authenticate(authenticationRequest);<br><br><span class="hljs-type">OAuth2AuthenticationToken</span> <span class="hljs-variable">oauth2Authentication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthenticationToken</span>(<br>authenticationResult.getPrincipal(),<br>authenticationResult.getAuthorities(),<br>authenticationResult.getClientRegistration().getRegistrationId());<br>oauth2Authentication.setDetails(authenticationDetails);<br><br><span class="hljs-type">OAuth2AuthorizedClient</span> <span class="hljs-variable">authorizedClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthorizedClient</span>(<br>authenticationResult.getClientRegistration(),<br>oauth2Authentication.getName(),<br>authenticationResult.getAccessToken(),<br>authenticationResult.getRefreshToken());<br><br><span class="hljs-built_in">this</span>.authorizedClientRepository.saveAuthorizedClient(authorizedClient, oauth2Authentication, request, response);<br><br><span class="hljs-keyword">return</span> oauth2Authentication;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="OAuth2LoginAuthenticationProvider"><a href="#OAuth2LoginAuthenticationProvider" class="headerlink" title="OAuth2LoginAuthenticationProvider"></a>OAuth2LoginAuthenticationProvider</h5><p><strong>OAuth2LoginAuthenticationProvider</strong> 负责最终的校验工作，作用类似了之前小节所讲的<strong>DaoAuthenticationProvider</strong>，我们来看一下它的<strong>authenticate</strong> 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">authorizationCodeAuthentication</span> <span class="hljs-operator">=</span><br>(OAuth2LoginAuthenticationToken) authentication;<br><br><span class="hljs-comment">//判断是否为OpenID Connect 认证，如果是，则返回 null，请求交给 OidcAuthorizationCodeAuthenticationProvider 去处理。</span><br><span class="hljs-keyword">if</span> (authorizationCodeAuthentication.getAuthorizationExchange()<br>.getAuthorizationRequest().getScopes().contains(<span class="hljs-string">&quot;openid&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">//是根据授权码code去请求https://github.com/login/oauth/access_token 接口获取 AccessToken，这一步调用到了OAuth2AuthorizationCodeAuthenticationProvider#authenticate 方法，并在该方法中调用 DefaultAuthorizationCode TokenResponseClient#getTokenResponse 方法发起网络请求，底层使用的网络请求工具是RestTemplate。</span><br>OAuth2AccessTokenResponse accessTokenResponse;<br><span class="hljs-keyword">try</span> &#123;<br>OAuth2AuthorizationExchangeValidator.validate(<br>authorizationCodeAuthentication.getAuthorizationExchange());<br><br>accessTokenResponse = <span class="hljs-built_in">this</span>.accessTokenResponseClient.getTokenResponse(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthorizationCodeGrantRequest</span>(<br>authorizationCodeAuthentication.getClientRegistration(),<br>authorizationCodeAuthentication.getAuthorizationExchange()));<br><br>&#125; <span class="hljs-keyword">catch</span> (OAuth2AuthorizationException ex) &#123;<br><span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> ex.getError();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());<br>&#125;<br><span class="hljs-comment">//根据上一步的结果，提取出AccessToken对象 。</span><br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">accessToken</span> <span class="hljs-operator">=</span> accessTokenResponse.getAccessToken();<br>Map&lt;String, Object&gt; additionalParameters = accessTokenResponse.getAdditionalParameters();<br><span class="hljs-comment">//根据获取到的AccessToken对象，向https://api.github.com/user 地址发起请求，获取用户信息，并最终封装为一个OAuth2User对象。</span><br><span class="hljs-type">OAuth2User</span> <span class="hljs-variable">oauth2User</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userService.loadUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2UserRequest</span>(<br>authorizationCodeAuthentication.getClientRegistration(), accessToken, additionalParameters));<br><br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; mappedAuthorities =<br><span class="hljs-built_in">this</span>.authoritiesMapper.mapAuthorities(oauth2User.getAuthorities());<br><span class="hljs-comment">//构造一个OAuth2LoginAuthenticationToken(Authentication)对象并返回。</span><br><span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">authenticationResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2LoginAuthenticationToken</span>(<br>authorizationCodeAuthentication.getClientRegistration(),<br>authorizationCodeAuthentication.getAuthorizationExchange(),<br>oauth2User,<br>mappedAuthorities,<br>accessToken,<br>accessTokenResponse.getRefreshToken());<br>authenticationResult.setDetails(authorizationCodeAuthentication.getDetails());<br><br><span class="hljs-keyword">return</span> authenticationResult;<br>&#125;<br></code></pre></td></tr></table></figure><p>​我们在<strong>GitHub</strong>上配置的<code>http:/localhost:8080/login/oauth2/code/github </code>地址其实类似于登录请求，当<strong>GitHub</strong> 授权服务器重定向到该地址时，重定向请求携带了授权码参数，客户端根据授权码获取 <strong>AccessToken</strong> ，再根据 <strong>AccessToken</strong> 加载到用户对象，最终构建 <strong>OAuth2LoginAuthenticationToken</strong> 并返回。</p><p>​至此,  整个<strong>GitHub</strong> 授权登录就分析完了</p><h4 id="13-5-4-自定义配置"><a href="#13-5-4-自定义配置" class="headerlink" title="13.5.4 自定义配置"></a>13.5.4 自定义配置</h4><h5 id="自定义ClientRegistrationRepository"><a href="#自定义ClientRegistrationRepository" class="headerlink" title="自定义ClientRegistrationRepository"></a>自定义ClientRegistrationRepository</h5><p>​完全使用自动化配置虽然方便，但是灵活性却降低了。假如我们在GitHub 上注册App时， 填写的回调地址不是<code>http://localhost:8080/1ogin/oauth2/code/github</code>，而是其他地址，此时就需要我们手动配置了。</p><p>​举个简单例子，假设我们在GitHub上注册App时填写的回调地址是<code>http:/localhost:8080/authorization_code</code>，那么可以通过如下方式配置客户端。</p><p>​使用Java代码配置时，可以删除<strong>application.properties</strong> 中的所有配置，然后修改配置类， 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ClientRegistration <span class="hljs-title function_">githubClientRegistration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> ClientRegistration.withRegistrationId(<span class="hljs-string">&quot;github&quot;</span>)<br>        .clientId(<span class="hljs-string">&quot;5f38065c40f3d99682ab&quot;</span>)<br>        .clientSecret(<span class="hljs-string">&quot;2fe5a049f5339776da79dc307ed15c7786207eab&quot;</span>)<br>        .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)<br>        .userNameAttributeName(<span class="hljs-string">&quot;id&quot;</span>)<br>        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)<br>        .redirectUriTemplate(<span class="hljs-string">&quot;http://localhost:8080/authorization_code&quot;</span>)<br>        .scope(<span class="hljs-string">&quot;read:user&quot;</span>)<br>        .authorizationUri(<span class="hljs-string">&quot;https://github.com/login/oauth/authorize&quot;</span>)<br>        .tokenUri(<span class="hljs-string">&quot;https://github.com/login/oauth/access_token&quot;</span>)<br>        .userInfoUri(<span class="hljs-string">&quot;https://api.github.com/user&quot;</span>)<br>        .clientName(<span class="hljs-string">&quot;GitHub&quot;</span>)<br>        .build();<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> ClientRegistrationRepository <span class="hljs-title function_">clientRegistrationRepository</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryClientRegistrationRepository</span>(githubClientRegistration());<br>  &#125;<br></code></pre></td></tr></table></figure><p>​我们只需要向Spring 容器中注册 一个<strong>ClientRegistrationRepository</strong> 实例，然后在该实例中提供GitHub 的配置信息即可，此时<strong>OAuth2ClientRegistrationRepositoryConfiguration</strong> 配置类自动配置的<strong>ClientRegistrationRepository</strong> 实例就会失效。</p><p>​这种配置方式非常直观也非常灵活，所有需要的配置信息现在都摆出来了，需要修改哪个直接修改即可。</p><h3 id="13-6-Spring-Security-OAuth2"><a href="#13-6-Spring-Security-OAuth2" class="headerlink" title="13.6 Spring Security OAuth2"></a>13.6 Spring Security OAuth2</h3><p>Spring Security 对 OAuth2 提供了很好的支持，这使得我们在 Spring Security中使用 OAuth2 非常地方便。然而由于历史原因，Spring Seaurity对 OAuth2 的支持比较混乱，这里简单梳理一下。</p><p>大约十年前，Spring 引入了一个社区驱动的开源项目 Spring Security OAuth， 并将其纳入 Spring 项目组合中。到今天为止，这个项目己经发展成为一个成熟的项目，可以支持大部分OAuth 规范，包括资源服务器、 客户端和授权服务器等。</p><p>然而早期的项目存在一些问题，例如：</p><ul><li><p>OAuth 是在早期完成的，开发者无法预料未来的变化以及这些代码到底要被怎么使用，</p><p>这导致很多 Spring 项目提供了自己的 OAuth 支持，也就带来了 OAuth 支持的碎片化。</p></li><li><p>最早的OAuth项目同时支特 OAuth1.0 和 OAuth2.0，而现在OAuth1.0 早已经不再使用，</p><p>可以放弃了。</p></li><li><p>现在我们有更多的库可以选择，可以在这些库的基础上去开发，以便更好地支持JWT等新技术。</p></li></ul><p>基于以上这些原因，官方决定重写 Spring Security OAuth， 以便更好地协调 Spring 和OAuth，并简化代码库，使Spring 的 OAuth 支持更加灵活。然而，在重写的过程中，发生了不少波折。</p><p>2018年1月30日，Spring 官方发了一个通知，表示要逐渐停止现有的 OAuth2支持，然后在 Spring Security 5中构建下一代 OAuth2.0 支持。这么做的原因是因为当时 OAuth2 的落地方案比较混乱，在 Spring Security OAuth、 Spring Cloud Security、Spring Boot 1.5.x 以及当时最新的Spring Security 5.x 中都提供了对 OAuth2 的实现。以至于当开发者需要使用 OAuth2 时，不得不问，到底选哪一个依赖合适呢？</p><p>所以Spring 官方决定有必要将 OAuth2.0 的支持统一到一个项目中，以便为用户提供明确的选择，并避免任何潜在的混乱，同时 OAuth2.0 的开发文档也要重新编写，以方便开发人员学习。所有的决定将在 Spring Security 5 中开始，构建下一代 OAuth2.0的支持。从那个时候起，Spring Security OAuth 项目就正式处于维护模式。官方将提供至少一年的错识&#x2F;安全修复程序，并且会考虑添加次要功能，但不会添加主要功能。同时将 Spring Security OAuth中的所有功能重构到 Spring Security 5.x 中。</p><p>到了2019年11月14日，Spring 官方又发布一个通知，这次的通知首先表示 Spring Security OAuth 在迁往 Spring Security 5.x 的过程非常顺利，大都分迁程工作已经完成了，剩下的将在5.3 版本中完成迁移，在迁移的过程中还添加了许多新功能。包括对 OpenID Connect1.0 的支持。同时还宣布将不再支持授权服务器，不支持的原因有两个：</p><ol><li><code>在2019年，已经有大量的商业和开源授权服务器可用。</code></li><li><code>授权服务器是使用一个库来构建产品，而 Spring Security 作为框架，并不适合做这件事情。</code></li></ol><p>一石激起千层浪，许多开发者表示对此难以接受。这件事也在Spring 社区引发了激烈的讨论，好在 Spring 官方愿意倾听来自社区的声音。</p><p>到了2020年4月15日，Spring 官方宣布启动 Spring Authorization server 项目。这是一个由 Spring Security 团队领导的社区驱动的项目，致力于向 Spring 社区提供 Authorization Server支持，也就是说，Spring 又重新支持授权服务器了。</p><p>2020年8月21日，Spring Authorization Server 0.0.1 正式发布！</p><p>这就是 OAuth2 在Spring 家族中的发展历程了。在后面的学习中，客户端和资源服务器都将采用最新的方式来构建，授权服务器依然采用旧的方式来构建，因为目前的 Spring Authorization Server 0.0.1 功能较少且 BUG 较多。</p><p>一般来说，当我们在项目中使用 OAuth2 时，都是开发客户端，授权服务器和资源服务器都是由外部提供。例如我们想在自己搭建网站上集成 GitHub 第三方登录，只需要开发自己的客户端即可，认证服务器和授权服务器都是由 GitHub 提供的。</p><p>前面的 GitHub 授权登录主要向大家展示了 OAuth2 中客户端的工作模式。对于大部分的开发者而言，日常接触到的 OAuth2 都是开发客户端，例如接入 QQ 登录、接入微信登录等。不过也有少量场景，可能需要开发者提供授权服务器与资源服务器，接下来我们就通过一个完整的案例演示如何搭建授权服务器与资源服务器。</p><p>搭建授权服务器，我们可以选择一些现成的开源项目，直接运行即可，例如：</p><ul><li>Keycloak： RedFat 公司提供的开源工具，提供了很多实用功能，倒如单点登录、支持OpenID、可视化后台管理等。</li><li>Apache Oltu: Apache 上的开源项目，最近几年没怎么维护了。</li></ul><p>接下来我们将搭建一个包含授权服务器、资源服务器以及客户端在内的 OAuth2 案例。</p><p>项目规划首先把项目分为三部分：</p><ul><li>授权服务器：采用较早的 <strong>spring-cloud-starter-oauth2</strong> 来搭建授权服务器。</li><li>资源服务器：采用最新的 <strong>Spring Security 5.x</strong> 搭建资源服务器，</li><li>客户端: 采用最新的 <strong>Spring Security5.x</strong> 搭建客户端。</li></ul><h4 id="13-6-1-授权服务器搭建"><a href="#13-6-1-授权服务器搭建" class="headerlink" title="13.6.1 授权服务器搭建"></a>13.6.1 授权服务器搭建</h4><h5 id="1-基于内存客户端和令牌存储"><a href="#1-基于内存客户端和令牌存储" class="headerlink" title="1. 基于内存客户端和令牌存储"></a>1. 基于内存客户端和令牌存储</h5><p>创建 springboot 应用,并引入依赖</p><blockquote><p>注意: 降低 springboot 版本为 2.2.5.RELEASE左右</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写配置类,添加 security 配置类以及 oauth 配置类</p><blockquote><p>Spring Security 配置类:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">protected</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManager();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">inMemoryUserDetailsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.withUsername(<span class="hljs-string">&quot;root&quot;</span>).password(passwordEncoder().encode(<span class="hljs-string">&quot;123&quot;</span>)).roles(<span class="hljs-string">&quot;ADMIN&quot;</span>).build();<br>        inMemoryUserDetailsManager.createUser(user);<br>        <span class="hljs-keyword">return</span> inMemoryUserDetailsManager;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable().formLogin();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>AuthorizationServer 配置类:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthorizationServer</span><span class="hljs-params">(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br>        <span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置客户端细节 如 客户端 id 秘钥 重定向 url 等</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        clients.inMemory().withClient(<span class="hljs-string">&quot;client&quot;</span>)<br>                .secret(passwordEncoder.encode(<span class="hljs-string">&quot;secret&quot;</span>))<br>                .redirectUris(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br>                .scopes(<span class="hljs-string">&quot;client:read,user:read&quot;</span>)<br>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>,<span class="hljs-string">&quot;implicit&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;client_credentials&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        endpoints.userDetailsService(userDetailsService);<span class="hljs-comment">//开启刷新令牌必须指定</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录之后进行授权码获取(这里必须要先登录), 请求这个接口:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost:9200/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20230728150344086.png" alt="image-20230728150344086"></p><p>根据授权码,申请令牌:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &#x27;grant_type=authorization_code&amp;code=IwvCtx&amp;redirect_uri=http://www.baidu.com&#x27; &quot;http://client:secret@localhost:8080/oauth/token&quot;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20230728150427327.png" alt="image-20230728150427327"></p><p>刷新令牌: 拿生成token接口返回的refresh_token来刷新token</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &#x27;grant_type=refresh_token&amp;refresh_token=f6583d8a-598c-46bb-81d8-01fa6484cf05&amp;client_id=client&#x27; &quot;http://client:secret@localhost:8080/oauth/token&quot;<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20230729212101843.png" alt="image-20230729212101843"></p><h5 id="2-基于数据库客户端和令牌存储"><a href="#2-基于数据库客户端和令牌存储" class="headerlink" title="2. 基于数据库客户端和令牌存储"></a>2. 基于数据库客户端和令牌存储</h5><p>在上面的案例中，<strong>TokenStore 的默认</strong>实现为 <strong>InMemoryTokenStore</strong> 即内存存储，对于 <strong>Client</strong> 信息，<strong>ClientDetailsService</strong> 接口负责从存储仓库中读取数据，在上面的案例中默认使用的也是 <strong>InMemoryClientDetailsService</strong> 实现类。</p><p>如果要想使用数据库存储，只要提供这些接口的实现类即可，而框架已经为我们写好 <strong>JdbcTokenStore</strong> 和 <strong>JdbcClientDetailsService</strong></p><blockquote><p>建表:</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql<br># 注意: 并用 BLOB 替换语句中的 LONGVARBINARY 类型<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = 0;<br><br>-- ----------------------------<br>-- Table structure for clientdetails<br>-- ----------------------------<br>DROP TABLE IF EXISTS `clientdetails`;<br>CREATE TABLE `clientdetails` (<br>  `appId` varchar(256) NOT NULL,<br>  `resourceIds` varchar(256) DEFAULT NULL,<br>  `appSecret` varchar(256) DEFAULT NULL,<br>  `scope` varchar(256) DEFAULT NULL,<br>  `grantTypes` varchar(256) DEFAULT NULL,<br>  `redirectUrl` varchar(256) DEFAULT NULL,<br>  `authorities` varchar(256) DEFAULT NULL,<br>  `access_token_validity` int(11) DEFAULT NULL,<br>  `refresh_token_validity` int(11) DEFAULT NULL,<br>  `additionalInformation` varchar(4096) DEFAULT NULL,<br>  `autoApproveScopes` varchar(256) DEFAULT NULL,<br>  PRIMARY KEY (`appId`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_access_token<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_access_token`;<br>CREATE TABLE `oauth_access_token` (<br>  `token_id` varchar(256) DEFAULT NULL,<br>  `token` blob,<br>  `authentication_id` varchar(256) NOT NULL,<br>  `user_name` varchar(256) DEFAULT NULL,<br>  `client_id` varchar(256) DEFAULT NULL,<br>  `authentication` blob,<br>  `refresh_token` varchar(256) DEFAULT NULL,<br>  PRIMARY KEY (`authentication_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_approvals<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_approvals`;<br>CREATE TABLE `oauth_approvals` (<br>  `userId` varchar(256) DEFAULT NULL,<br>  `clientId` varchar(256) DEFAULT NULL,<br>  `scope` varchar(256) DEFAULT NULL,<br>  `status` varchar(10) DEFAULT NULL,<br>  `expiresAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,<br>  `lastModifiedAt` date DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_client_details<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_client_details`;<br>CREATE TABLE `oauth_client_details` (<br>  `client_id` varchar(256) NOT NULL,<br>  `resource_ids` varchar(256) DEFAULT NULL,<br>  `client_secret` varchar(256) DEFAULT NULL,<br>  `scope` varchar(256) DEFAULT NULL,<br>  `authorized_grant_types` varchar(256) DEFAULT NULL,<br>  `web_server_redirect_uri` varchar(256) DEFAULT NULL,<br>  `authorities` varchar(256) DEFAULT NULL,<br>  `access_token_validity` int(11) DEFAULT NULL,<br>  `refresh_token_validity` int(11) DEFAULT NULL,<br>  `additional_information` varchar(4096) DEFAULT NULL,<br>  `autoapprove` varchar(256) DEFAULT NULL,<br>  PRIMARY KEY (`client_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_client_token<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_client_token`;<br>CREATE TABLE `oauth_client_token` (<br>  `token_id` varchar(256) DEFAULT NULL,<br>  `token` blob,<br>  `authentication_id` varchar(256) NOT NULL,<br>  `user_name` varchar(256) DEFAULT NULL,<br>  `client_id` varchar(256) DEFAULT NULL,<br>  PRIMARY KEY (`authentication_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_code<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_code`;<br>CREATE TABLE `oauth_code` (<br>  `code` varchar(256) DEFAULT NULL,<br>  `authentication` blob<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>-- ----------------------------<br>-- Table structure for oauth_refresh_token<br>-- ----------------------------<br>DROP TABLE IF EXISTS `oauth_refresh_token`;<br>CREATE TABLE `oauth_refresh_token` (<br>  `token_id` varchar(256) DEFAULT NULL,<br>  `token` blob,<br>  `authentication` blob<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>SET FOREIGN_KEY_CHECKS = 1;<br><br>-- 写入客户端信息<br>INSERT INTO `oauth_client_details` VALUES (&#x27;client&#x27;, NULL, &#x27;$2a$10$QCsINtuRfP8kM112xRVdvuI58MrefLlEP2mM0kzB5KZCPhnOf4392&#x27;, &#x27;read&#x27;, &#x27;authorization_code,refresh_token&#x27;, &#x27;http://www.baidu.com&#x27;, NULL, NULL, NULL, NULL, NULL);<br></code></pre></td></tr></table></figure><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>编写配置文件</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/oauth?characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><blockquote><p>编写数据库信息实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcAuthorizationServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DataSource dataSource;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdbcAuthorizationServer</span><span class="hljs-params">(AuthenticationManager authenticationManager, PasswordEncoder passwordEncoder, DataSource dataSource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br>        <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 声明TokenStore实现</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenStore</span>(dataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 声明 ClientDetails实现</span><br>    <span class="hljs-keyword">public</span> ClientDetailsService <span class="hljs-title function_">clientDetails</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JdbcClientDetailsService</span> <span class="hljs-variable">jdbcClientDetailsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcClientDetailsService</span>(dataSource);<br>        jdbcClientDetailsService.setPasswordEncoder(passwordEncoder);<br>        <span class="hljs-keyword">return</span> jdbcClientDetailsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//配置使用数据库实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        endpoints.authenticationManager(authenticationManager);<span class="hljs-comment">//认证管理器</span><br>        endpoints.tokenStore(tokenStore());<span class="hljs-comment">//配置令牌存储为数据库存储</span><br><br>        <span class="hljs-comment">// 配置TokenServices参数</span><br>        <span class="hljs-type">DefaultTokenServices</span> <span class="hljs-variable">tokenServices</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTokenServices</span>();<span class="hljs-comment">//修改默认令牌生成服务</span><br>        tokenServices.setTokenStore(endpoints.getTokenStore());<span class="hljs-comment">//基于数据库令牌生成</span><br>        tokenServices.setSupportRefreshToken(<span class="hljs-literal">true</span>);<span class="hljs-comment">//是否支持刷新令牌</span><br>        tokenServices.setReuseRefreshToken(<span class="hljs-literal">true</span>);<span class="hljs-comment">//是否重复使用刷新令牌（直到过期）</span><br><br>        tokenServices.setClientDetailsService(endpoints.getClientDetailsService());<span class="hljs-comment">//设置客户端信息</span><br>        tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());<span class="hljs-comment">//用来控制令牌存储增强策略</span><br>        <span class="hljs-comment">//访问令牌的默认有效期（以秒为单位）。过期的令牌为零或负数。</span><br>        tokenServices.setAccessTokenValiditySeconds((<span class="hljs-type">int</span>) TimeUnit.DAYS.toSeconds(<span class="hljs-number">30</span>)); <span class="hljs-comment">// 30天</span><br>        <span class="hljs-comment">//刷新令牌的有效性（以秒为单位）。如果小于或等于零，则令牌将不会过期</span><br>        tokenServices.setRefreshTokenValiditySeconds((<span class="hljs-type">int</span>) TimeUnit.DAYS.toSeconds(<span class="hljs-number">3</span>)); <span class="hljs-comment">//3天</span><br>        endpoints.tokenServices(tokenServices);<span class="hljs-comment">//使用配置令牌服务</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        clients.withClientDetails(clientDetails());<span class="hljs-comment">//使用 jdbc存储</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动测试,发现数据库中已经存储相关的令牌<img src="/2022/01/26/SpringSecurity/image-20230728170038378.png" alt="image-20230728170038378"></p><h4 id="13-6-2-资源服务器搭建"><a href="#13-6-2-资源服务器搭建" class="headerlink" title="13.6.2 资源服务器搭建"></a>13.6.2 资源服务器搭建</h4><blockquote><p> 引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>创建资源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编写资源服务器配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableResourceServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResourceServerConfigurerAdapter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DataSource dataSource;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResourceServerConfig</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        resources.tokenStore(tokenStore());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenStore</span>(dataSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编写配置文件</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">logging.level.org.springframework.jdbc.core</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>启动测试,生成令牌之后带有令牌访问:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">curl -H &quot;Authorization:Bearer dffa62d2-1078-457e-8a2b-4bd46fae0f47&quot; http://localhost:8081/hello<br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20220812153300057.png" alt="image-20220812153300057"></p><h4 id="13-6-3-使用-JWT"><a href="#13-6-3-使用-JWT" class="headerlink" title="13.6.3 使用 JWT"></a>13.6.3 使用 JWT</h4><h5 id="1-授权服务器颁发-JWT-令牌"><a href="#1-授权服务器颁发-JWT-令牌" class="headerlink" title="1. 授权服务器颁发 JWT 令牌"></a>1. 授权服务器颁发 JWT 令牌</h5><p>配置颁发 JWT 令牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtAuthServerConfig</span><span class="hljs-params">(PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager, DataSource dataSource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br>        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>    &#125;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//配置使用 jwt 方式颁发令牌,同时配置 jwt 转换器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        endpoints.tokenStore(tokenStore())<br>                .accessTokenConverter(jwtAccessTokenConverter())<br>                .authenticationManager(authenticationManager);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//使用JWT方式生成令牌</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenStore</span>(jwtAccessTokenConverter());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//使用同一个密钥来编码 JWT 中的  OAuth2 令牌</span><br>    <span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title function_">jwtAccessTokenConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JwtAccessTokenConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessTokenConverter</span>();<br>        converter.setSigningKey(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//可以采用属性注入方式 生产中建议加密</span><br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 声明 ClientDetails实现</span><br>    <span class="hljs-keyword">public</span> ClientDetailsService <span class="hljs-title function_">clientDetails</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JdbcClientDetailsService</span> <span class="hljs-variable">jdbcClientDetailsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcClientDetailsService</span>(dataSource);<br>        jdbcClientDetailsService.setPasswordEncoder(passwordEncoder);<br>        <span class="hljs-keyword">return</span> jdbcClientDetailsService;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//使用数据库方式客户端存储</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        clients.withClientDetails(clientDetails());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,根据授权码获取令牌</p><p><img src="/2022/01/26/SpringSecurity/image-20220812155121319.png" alt="image-20220812155121319"></p><h5 id="2-使用-JWT-令牌资源服务器"><a href="#2-使用-JWT-令牌资源服务器" class="headerlink" title="2. 使用 JWT 令牌资源服务器"></a>2. 使用 JWT 令牌资源服务器</h5><p>配置资源服务器解析jwt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableResourceServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResourceServerConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        resources.tokenStore(tokenStore());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenStore</span>(jwtAccessTokenConverter());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title function_">jwtAccessTokenConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JwtAccessTokenConverter</span> <span class="hljs-variable">jwtAccessTokenConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessTokenConverter</span>();<br>        jwtAccessTokenConverter.setSigningKey(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">return</span> jwtAccessTokenConverter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动测试,通过 jwt 令牌访问资源</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">curl -H &quot;Authorization:Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjAzMzM4MjgsInVzZXJfbmFtZSI6InJvb3QiLCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIl0sImp0aSI6ImJmZGVjMzg1LWQyYmYtNDc5Yi05YjhhLTgyZWE4YTRkNzgzMyIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFwcDpyZWFkIl19.QlELW7LMLuD4OghbEFFzJpIxjW80hC3WHd3I0PiuI7Y&quot; http://localhost:8081/hello<br></code></pre></td></tr></table></figure><h3 id="13-7-OAuth2微服务实战"><a href="#13-7-OAuth2微服务实战" class="headerlink" title="13.7 OAuth2微服务实战"></a>13.7 OAuth2微服务实战</h3><p>本篇主要介绍如何自定义模式来实现登录</p><h4 id="13-7-1-账号密码模式"><a href="#13-7-1-账号密码模式" class="headerlink" title="13.7.1 账号密码模式"></a>13.7.1 账号密码模式</h4><blockquote><p>Security相关配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.config;<br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.provider.SMSAuthenticationProvider;<br><span class="hljs-keyword">import</span> com.whq.security.oauth.service.MyUserDetailsService;<br><span class="hljs-keyword">import</span> com.whq.security.oauth.service.SMSUserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * spring security 相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhqSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyUserDetailsService myUserDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.配置基本认证方式</span><br>        http.authorizeRequests()<br>                <span class="hljs-comment">// 角色为“ADMIN”的用户才可以访问/test/admin/相关的接口</span><br>                <span class="hljs-comment">//.antMatchers(&quot;/test/admin/**&quot;).hasRole(&quot;ADMIN&quot;)</span><br>                <span class="hljs-comment">// 角色为&quot;USER&quot;、“ADMIN”的用户才可以访问/test/user/相关的接口</span><br>                <span class="hljs-comment">//.antMatchers(&quot;/test/user/**&quot;).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)</span><br>                <span class="hljs-comment">// 所有用户都可以访问的接口</span><br>                .antMatchers(<span class="hljs-string">&quot;/swagger/**&quot;</span>, <span class="hljs-string">&quot;/oauth/token/**&quot;</span>).permitAll()<br>                <span class="hljs-comment">// 对任意请求都进行认证（其他路径的请求登录后才可以访问）</span><br>                .anyRequest()<br>                .authenticated()<br>                <span class="hljs-comment">//开启basic认证</span><br>                .and().httpBasic()<br>                .and().formLogin();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化security的认证管理器</span><br>    <span class="hljs-meta">@Bean(&quot;authenticationManager&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>    <span class="hljs-comment">// 账号密码登录设置获取用户UserDetailsService</span><br>    <span class="hljs-comment">// 如果所有登录方式获取用户的方式一致，则可以在AuthorizationServerConfigurerAdapter的AuthorizationServerEndpointsConfigurer中设置UserDetailsService</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DaoAuthenticationProvider <span class="hljs-title function_">getDaoAuthenticationProvider</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>        daoAuthenticationProvider.setUserDetailsService(myUserDetailsService);<br>        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());<br><br>        <span class="hljs-keyword">return</span> daoAuthenticationProvider;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.authenticationProvider(getDaoAuthenticationProvider());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>授权服务器配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.config;<br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.granter.WhqTokenGranter;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.TokenGranter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancerChain;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * spring security oauth2 相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenStore tokenStore;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenEnhancer jwtTokenEnhancer;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtAccessTokenConverter jwtAccessTokenConverter;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> &#123;<br>        <span class="hljs-comment">//获取自定义tokenGranter</span><br>        <span class="hljs-type">TokenGranter</span> <span class="hljs-variable">tokenGranter</span> <span class="hljs-operator">=</span> WhqTokenGranter.getTokenGranter(authenticationManager, endpoints);<br>        endpoints.tokenStore(tokenStore)<br>                .authenticationManager(authenticationManager)<br>                .tokenGranter(tokenGranter);<br>        <span class="hljs-comment">// 扩展token返回结果</span><br>        <span class="hljs-keyword">if</span> (jwtAccessTokenConverter != <span class="hljs-literal">null</span> &amp;&amp; jwtTokenEnhancer != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">TokenEnhancerChain</span> <span class="hljs-variable">tokenEnhancerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenEnhancerChain</span>();<br>            List&lt;TokenEnhancer&gt; enhancerList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            enhancerList.add(jwtTokenEnhancer);<br>            enhancerList.add(jwtAccessTokenConverter);<br>            tokenEnhancerChain.setTokenEnhancers(enhancerList);<br>            <span class="hljs-comment">// jwt增强</span><br>            endpoints.tokenEnhancer(tokenEnhancerChain).accessTokenConverter(jwtAccessTokenConverter);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 将client-secret存储在内存中</span><br>        <span class="hljs-comment">// 如果需要从数据库加载则继承JdbcClientDetailsService类自定义处理</span><br>        <span class="hljs-comment">// clients.withClientDetails();</span><br><br>        <span class="hljs-comment">// basic验证用户名：whqClient 密码：whqSecret</span><br>        clients.inMemory().withClient(<span class="hljs-string">&quot;whqClient&quot;</span>).secret(passwordEncoder.encode(<span class="hljs-string">&quot;whqSecret&quot;</span>))<br>                <span class="hljs-comment">// 令牌有效时间，单位秒</span><br>                .accessTokenValiditySeconds(<span class="hljs-number">7200</span>)<br>                <span class="hljs-comment">// 支持账号密码模式登录</span><br>                .authorizedGrantTypes(<span class="hljs-string">&quot;refresh_token&quot;</span>,  <span class="hljs-string">&quot;pwd&quot;</span>)<br>                <span class="hljs-comment">// 权限有哪些,如果这两配置了该参数，客户端发请求可以不带参数，使用配置的参数</span><br>                .scopes(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;write&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>JWT生成token相关配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.config;<br><br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.factory.JwtTokenEnhancer;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jwt 生成token相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenStoreConfiguration</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用jwtTokenStore存储token</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">jwtTokenStore</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenStore</span>(jwtAccessTokenConverter());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于生成jwt</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title function_">jwtAccessTokenConverter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">JwtAccessTokenConverter</span> <span class="hljs-variable">accessTokenConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessTokenConverter</span>();<br>accessTokenConverter.setSigningKey(<span class="hljs-string">&quot;whq&quot;</span>);<br><span class="hljs-keyword">return</span> accessTokenConverter;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于扩展jwt</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;jwtTokenEnhancer&quot;)</span><br><span class="hljs-keyword">public</span> TokenEnhancer <span class="hljs-title function_">jwtTokenEnhancer</span><span class="hljs-params">(JwtAccessTokenConverter jwtAccessTokenConverter)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenEnhancer</span>(jwtAccessTokenConverter);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>token参数增强设置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.whq.security.oauth.factory;<br><br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.user.MyUser;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.common.OAuth2AccessToken;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenEnhancer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenEnhancer</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtAccessTokenConverter jwtAccessTokenConverter;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OAuth2AccessToken <span class="hljs-title function_">enhance</span><span class="hljs-params">(OAuth2AccessToken accessToken, OAuth2Authentication authentication)</span> &#123;<br><span class="hljs-type">MyUser</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (MyUser) authentication.getUserAuthentication().getPrincipal();<br><br><span class="hljs-comment">// token参数增强</span><br><span class="hljs-comment">// todo 以下可根据自身业务自由设置，方便于解析token后获取到有价值的信息</span><br>Map&lt;String, Object&gt; info = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br>info.put(<span class="hljs-string">&quot;user_id&quot;</span>, principal.getUserId());<br>info.put(<span class="hljs-string">&quot;user_name&quot;</span>, principal.getUsername());<br>info.put(<span class="hljs-string">&quot;user_phone&quot;</span>, <span class="hljs-string">&quot;18788888888&quot;</span>);<br>((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(info);<br><br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">oAuth2AccessToken</span> <span class="hljs-operator">=</span> jwtAccessTokenConverter.enhance(accessToken, authentication);<br><span class="hljs-type">String</span> <span class="hljs-variable">tokenValue</span> <span class="hljs-operator">=</span> oAuth2AccessToken.getValue();<br><span class="hljs-type">String</span> <span class="hljs-variable">tenantId</span> <span class="hljs-operator">=</span> principal.getTenantId();<br><span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> principal.getUserId() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : principal.getUserId().toString();<br><span class="hljs-comment">// todo 此处可以将token存入redis</span><br><span class="hljs-comment">// RedisTokenUtil.addAccessToken();</span><br><br><span class="hljs-keyword">return</span> accessToken;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>granter设置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.whq.security.oauth.granter;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.CompositeTokenGranter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.TokenGranter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义拓展TokenGranter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhqTokenGranter</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义tokenGranter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TokenGranter <span class="hljs-title function_">getTokenGranter</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AuthenticationManager authenticationManager, <span class="hljs-keyword">final</span> AuthorizationServerEndpointsConfigurer endpoints)</span> &#123;<br><span class="hljs-comment">// 默认tokenGranter集合</span><br>List&lt;TokenGranter&gt; granters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Collections.singletonList(endpoints.getTokenGranter()));<br><span class="hljs-comment">// 账号密码模式</span><br>granters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordGranter</span>(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));<br><span class="hljs-comment">// 组合tokenGranter集合</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeTokenGranter</span>(granters);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>账号密码登录granter</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.granter;<br><br><span class="hljs-keyword">import</span> org.springframework.security.authentication.*;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.common.exceptions.InvalidGrantException;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.*;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.AbstractTokenGranter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordGranter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTokenGranter</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GRANT_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pwd&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PasswordGranter</span><span class="hljs-params">(AuthenticationManager authenticationManager,</span><br><span class="hljs-params">                           AuthorizationServerTokenServices tokenServices,</span><br><span class="hljs-params">   ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory)</span> &#123;<br><span class="hljs-built_in">this</span>(authenticationManager, tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">PasswordGranter</span><span class="hljs-params">(AuthenticationManager authenticationManager, AuthorizationServerTokenServices tokenServices,</span><br><span class="hljs-params">  ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory, String grantType)</span> &#123;<br><span class="hljs-built_in">super</span>(tokenServices, clientDetailsService, requestFactory, grantType);<br><span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> OAuth2Authentication <span class="hljs-title function_">getOAuth2Authentication</span><span class="hljs-params">(ClientDetails client, TokenRequest tokenRequest)</span> &#123;<br>Map&lt;String, String&gt; parameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>(tokenRequest.getRequestParameters());<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> parameters.get(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">cryptPassword</span> <span class="hljs-operator">=</span> parameters.get(<span class="hljs-string">&quot;password&quot;</span>);<br><br><span class="hljs-type">Authentication</span> <span class="hljs-variable">userAuth</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(username, cryptPassword);<br>((AbstractAuthenticationToken) userAuth).setDetails(parameters);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 以下代码为spring security 授权认证逻辑</span><br>userAuth = authenticationManager.authenticate(userAuth);<br>&#125; <span class="hljs-keyword">catch</span> (AccountStatusException | BadCredentialsException ase) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidGrantException</span>(ase.getMessage());<br>&#125;<br><br><span class="hljs-keyword">if</span> (userAuth == <span class="hljs-literal">null</span> || !userAuth.isAuthenticated()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidGrantException</span>(<span class="hljs-string">&quot;Could not authenticate user: &quot;</span> + username);<br>&#125;<br><br><span class="hljs-type">OAuth2Request</span> <span class="hljs-variable">storedOAuth2Request</span> <span class="hljs-operator">=</span> getRequestFactory().createOAuth2Request(client, tokenRequest);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2Authentication</span>(storedOAuth2Request, userAuth);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>UserDetailsService配置</p></blockquote><p>此处设置加载用户信息的方式，账号密码使用登录账号获取用户信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.service;<br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.user.MyUser;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-comment">// 后续登录使用此方法加载用户信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">MyUser</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> MyUser.getUser(username);<br>        <span class="hljs-comment">// 模拟的用户查询数据为明文密码，实际使用时都是加密存储，此处手动加密模拟处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> passwordEncoder.encode(result.getPassword());<br>        <span class="hljs-comment">// 用户不存在，抛出异常</span><br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">MyUser</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUser</span>(result.getUsername(), encode);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src="/2022/01/26/SpringSecurity/image-20230801112450944.png" alt="image-20230801112450944"></p><h4 id="13-7-2-短信验证码模式"><a href="#13-7-2-短信验证码模式" class="headerlink" title="13.7.2 短信验证码模式"></a>13.7.2 短信验证码模式</h4><blockquote><p>AuthorizationServerConfig添加短信验证码登录模式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 将client-secret存储在内存中</span><br>        <span class="hljs-comment">// 如果需要从数据库加载则继承JdbcClientDetailsService类自定义处理</span><br>        <span class="hljs-comment">// clients.withClientDetails();</span><br><br>        <span class="hljs-comment">// basic验证用户名：whqClient 密码：whqSecret</span><br>        clients.inMemory().withClient(<span class="hljs-string">&quot;whqClient&quot;</span>).secret(passwordEncoder.encode(<span class="hljs-string">&quot;whqSecret&quot;</span>))<br>                <span class="hljs-comment">// 令牌有效时间，单位秒</span><br>                .accessTokenValiditySeconds(<span class="hljs-number">7200</span>)<br>                <span class="hljs-comment">// 支持短信验证码、账号密码模式登录</span><br>                .authorizedGrantTypes(<span class="hljs-string">&quot;refresh_token&quot;</span>, <span class="hljs-string">&quot;SMSVerification&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>)<br>                <span class="hljs-comment">// 权限有哪些,如果这两配置了该参数，客户端发请求可以不带参数，使用配置的参数</span><br>                .scopes(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;write&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>SecurityConfig添加短信验证码provider配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.config;<br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.provider.SMSAuthenticationProvider;<br><span class="hljs-keyword">import</span> com.whq.security.oauth.service.MyUserDetailsService;<br><span class="hljs-keyword">import</span> com.whq.security.oauth.service.SMSUserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * spring security 相关配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhqSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyUserDetailsService myUserDetailsService;<br><br>    <span class="hljs-comment">// 短信验证时获取用户方式改变</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SMSUserDetailsService smsUserDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.配置基本认证方式</span><br>        http.authorizeRequests()<br>                <span class="hljs-comment">// 角色为“ADMIN”的用户才可以访问/test/admin/相关的接口</span><br>                <span class="hljs-comment">//.antMatchers(&quot;/test/admin/**&quot;).hasRole(&quot;ADMIN&quot;)</span><br>                <span class="hljs-comment">// 角色为&quot;USER&quot;、“ADMIN”的用户才可以访问/test/user/相关的接口</span><br>                <span class="hljs-comment">//.antMatchers(&quot;/test/user/**&quot;).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)</span><br>                <span class="hljs-comment">// 所有用户都可以访问的接口</span><br>                .antMatchers(<span class="hljs-string">&quot;/swagger/**&quot;</span>, <span class="hljs-string">&quot;/oauth/token/**&quot;</span>).permitAll()<br>                <span class="hljs-comment">// 对任意请求都进行认证（其他路径的请求登录后才可以访问）</span><br>                .anyRequest()<br>                .authenticated()<br>                <span class="hljs-comment">//开启basic认证</span><br>                .and().httpBasic()<br>                .and().formLogin();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化security的认证管理器</span><br>    <span class="hljs-meta">@Bean(&quot;authenticationManager&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>    <span class="hljs-comment">// 账号密码登录设置获取用户UserDetailsService</span><br>    <span class="hljs-comment">// 如果所有登录方式获取用户的方式一致，则可以在AuthorizationServerConfigurerAdapter的AuthorizationServerEndpointsConfigurer中设置UserDetailsService</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DaoAuthenticationProvider <span class="hljs-title function_">getDaoAuthenticationProvider</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">daoAuthenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br>        daoAuthenticationProvider.setUserDetailsService(myUserDetailsService);<br>        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());<br><br>        <span class="hljs-keyword">return</span> daoAuthenticationProvider;<br>    &#125;<br><br>    <span class="hljs-comment">// 短信验证provider初始化</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SMSAuthenticationProvider <span class="hljs-title function_">getSMSAuthenticationProvider</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SMSAuthenticationProvider</span> <span class="hljs-variable">smsAuthenticationProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMSAuthenticationProvider</span>();<br>        smsAuthenticationProvider.setUserDetailsService(smsUserDetailsService);<br><br>        <span class="hljs-keyword">return</span> smsAuthenticationProvider;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.authenticationProvider(getDaoAuthenticationProvider());<br>        <span class="hljs-comment">// 添加短信验证provider</span><br>        auth.authenticationProvider(getSMSAuthenticationProvider());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>短信验证码模式granter</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.granter;<br><br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.token.SMSVerificationAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AbstractAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AccountStatusException;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.BadCredentialsException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.common.exceptions.InvalidGrantException;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.*;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.AbstractTokenGranter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSVerificationTokenGranter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTokenGranter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GRANT_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SMSVerification&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SMSVerificationTokenGranter</span><span class="hljs-params">(AuthenticationManager authenticationManager,</span><br><span class="hljs-params">                                       AuthorizationServerTokenServices tokenServices,</span><br><span class="hljs-params">                                       ClientDetailsService clientDetailsService,</span><br><span class="hljs-params">                                       OAuth2RequestFactory requestFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>(authenticationManager, tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">SMSVerificationTokenGranter</span><span class="hljs-params">(AuthenticationManager authenticationManager,</span><br><span class="hljs-params">                                          AuthorizationServerTokenServices tokenServices,</span><br><span class="hljs-params">                                          ClientDetailsService clientDetailsService,</span><br><span class="hljs-params">                                          OAuth2RequestFactory requestFactory,</span><br><span class="hljs-params">                                          String grantType)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tokenServices, clientDetailsService, requestFactory, grantType);<br>        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> OAuth2Authentication <span class="hljs-title function_">getOAuth2Authentication</span><span class="hljs-params">(ClientDetails client, TokenRequest tokenRequest)</span> &#123;<br><br>        Map&lt;String, String&gt; parameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>(tokenRequest.getRequestParameters());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">smsCode</span> <span class="hljs-operator">=</span> parameters.get(<span class="hljs-string">&quot;SMS-Code&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> parameters.get(<span class="hljs-string">&quot;phone&quot;</span>);<br>        parameters.remove(<span class="hljs-string">&quot;SMS-Code&quot;</span>);<br><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">userAuth</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMSVerificationAuthenticationToken</span>(phone, smsCode);<br>        ((AbstractAuthenticationToken) userAuth).setDetails(parameters);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 以下代码为spring security 授权认证逻辑</span><br>            userAuth = authenticationManager.authenticate(userAuth);<br>        &#125; <span class="hljs-keyword">catch</span> (AccountStatusException | BadCredentialsException ase) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidGrantException</span>(ase.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (userAuth == <span class="hljs-literal">null</span> || !userAuth.isAuthenticated()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidGrantException</span>(<span class="hljs-string">&quot;Could not authenticate user: &quot;</span> + phone);<br>        &#125;<br><br>        <span class="hljs-type">OAuth2Request</span> <span class="hljs-variable">storedOAuth2Request</span> <span class="hljs-operator">=</span> getRequestFactory().createOAuth2Request(client, tokenRequest);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2Authentication</span>(storedOAuth2Request, userAuth);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><strong>WhqTokenGranter类中对SMSVerificationTokenGranter进行初始化</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TokenGranter <span class="hljs-title function_">getTokenGranter</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AuthenticationManager authenticationManager, <span class="hljs-keyword">final</span> AuthorizationServerEndpointsConfigurer endpoints)</span> &#123;<br><span class="hljs-comment">// 默认tokenGranter集合</span><br>List&lt;TokenGranter&gt; granters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Collections.singletonList(endpoints.getTokenGranter()));<br><span class="hljs-comment">// 账号密码模式</span><br>granters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordGranter</span>(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));<br><span class="hljs-comment">// 短信验证码模式</span><br>granters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SMSVerificationTokenGranter</span>(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));<br><span class="hljs-comment">// 组合tokenGranter集合</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeTokenGranter</span>(granters);<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>短信验证码provider</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.provider;<br><br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.token.SMSVerificationAuthenticationToken;<br><span class="hljs-keyword">import</span> com.whq.security.oauth.user.MyUser;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.InternalAuthenticationServiceException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSAuthenticationProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationProvider</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDetailsService</span><span class="hljs-params">(UserDetailsService userDetailsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 短信认证</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 获取手机号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> (authentication.getPrincipal() == <span class="hljs-literal">null</span> ) ? <span class="hljs-literal">null</span> : authentication.getPrincipal().toString();<br>        <span class="hljs-comment">// 获取短信验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">smsCode</span> <span class="hljs-operator">=</span> (authentication.getCredentials() == <span class="hljs-literal">null</span> ) ? <span class="hljs-literal">null</span> : authentication.getCredentials().toString();<br>        <span class="hljs-comment">// todo 在此处进行短信验证码的校验</span><br>        <span class="hljs-comment">// 此处模拟短信验证码为123</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;123&quot;</span>.equals(smsCode)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDeniedAuthorizationException</span>(<span class="hljs-string">&quot;验证码不正确&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">MyUser</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> (MyUser) userDetailsService.loadUserByUsername(phone);<br>        <span class="hljs-keyword">if</span> (userDetails == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalAuthenticationServiceException</span>(<span class="hljs-string">&quot;当前手机号不存在,请先注册&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">SMSVerificationAuthenticationToken</span> <span class="hljs-variable">smsVerificationAuthenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMSVerificationAuthenticationToken</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(), userDetails, authentication.getCredentials());<br>        smsVerificationAuthenticationToken.setDetails(authentication.getDetails());<br>        <span class="hljs-keyword">return</span> smsVerificationAuthenticationToken;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否支持此登录方式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; authentication)</span> &#123;<br>        <span class="hljs-keyword">return</span> (SMSVerificationAuthenticationToken.class.isAssignableFrom(authentication));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>短信验证码UserDetailsService</p></blockquote><p>此处如果账号密码获取用户信息的方式与短信验证码相同（比如：账号密码登录时也是通过手机号登录）则无需再添加此类，同时WhqSecurityConfig类中的配置只需要给SMSAuthenticationProvider设置相同的UserDetailsService即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.service;<br><br><span class="hljs-keyword">import</span> com.whq.security.oauth.user.MyUser;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-comment">// 后续登录使用此方法加载用户信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String phone)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">// 用户使用手机号登录</span><br>        <span class="hljs-type">MyUser</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> MyUser.getUserByPhone(phone);<br>        <span class="hljs-comment">// 模拟的用户查询数据为明文密码，实际使用时都是加密存储，此处手动加密模拟处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> passwordEncoder.encode(result.getPassword());<br>        <span class="hljs-comment">// 用户不存在，抛出异常</span><br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">MyUser</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUser</span>(result.getUsername(), encode);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>短信验证码AuthenticationToken</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.whq.security.oauth.token;<br><br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AbstractAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSVerificationAuthenticationToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAuthenticationToken</span> &#123;<br><br>    <span class="hljs-comment">// 存储登录手机号</span><br>    <span class="hljs-keyword">private</span> Object principal;<br><br>    <span class="hljs-comment">// 存储登录短信验证码</span><br>    <span class="hljs-keyword">private</span> Object credentials;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SMSVerificationAuthenticationToken</span><span class="hljs-params">(Object principal, Object credentials)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.principal = principal;<br>        <span class="hljs-built_in">this</span>.credentials = credentials;<br>        <span class="hljs-built_in">super</span>.setAuthenticated(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验通过时使用此构造函数</span><br><span class="hljs-comment">     * 设置参数super.setAuthenticated(true); 表示短信验证码登录校验通过，准备生成token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SMSVerificationAuthenticationToken</span><span class="hljs-params">(Collection&lt;? extends GrantedAuthority&gt; authorities, Object principal, Object credentials)</span> &#123;<br>        <span class="hljs-built_in">super</span>(authorities);<br>        <span class="hljs-built_in">this</span>.principal = principal;<br>        <span class="hljs-built_in">this</span>.credentials = credentials;<br>        <span class="hljs-comment">// 设置校验通过</span><br>        <span class="hljs-built_in">super</span>.setAuthenticated(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getCredentials</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.credentials;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getPrincipal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.principal;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/2022/01/26/SpringSecurity/image-20230801113314907.png" alt="image-20230801113314907"></p><h4 id="13-7-3-原理"><a href="#13-7-3-原理" class="headerlink" title="13.7.3 原理"></a>13.7.3 原理</h4><h5 id="授权服务发布token"><a href="#授权服务发布token" class="headerlink" title="授权服务发布token"></a>授权服务发布token</h5><p>接下来, 我们来分析下springSecurity与springOAuth2框架实现的登录接口<code>/oauth/token</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/oauth/token&quot;, method=RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;OAuth2AccessToken&gt; <span class="hljs-title function_">postAccessToken</span><span class="hljs-params">(Principal principal, <span class="hljs-meta">@RequestParam</span></span><br><span class="hljs-params">Map&lt;String, String&gt; parameters)</span> <span class="hljs-keyword">throws</span> HttpRequestMethodNotSupportedException &#123;<br><br><span class="hljs-keyword">if</span> (!(principal <span class="hljs-keyword">instanceof</span> Authentication)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsufficientAuthenticationException</span>(<br><span class="hljs-string">&quot;There is no client authentication. Try adding an appropriate authentication filter.&quot;</span>);<br>&#125;<br><span class="hljs-comment">//获取clientId</span><br><span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> getClientId(principal);<br>   <span class="hljs-comment">//从我们配置的clientDetailsService中获取ClientDetails</span><br><span class="hljs-type">ClientDetails</span> <span class="hljs-variable">authenticatedClient</span> <span class="hljs-operator">=</span> getClientDetailsService().loadClientByClientId(clientId);<br><br><span class="hljs-type">TokenRequest</span> <span class="hljs-variable">tokenRequest</span> <span class="hljs-operator">=</span> getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);<br><br><span class="hljs-keyword">if</span> (clientId != <span class="hljs-literal">null</span> &amp;&amp; !clientId.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br><span class="hljs-comment">// Only validate the client details if a client authenticated during this</span><br><span class="hljs-comment">// request.</span><br><span class="hljs-keyword">if</span> (!clientId.equals(tokenRequest.getClientId())) &#123;<br><span class="hljs-comment">// double check to make sure that the client ID in the token request is the same as that in the</span><br><span class="hljs-comment">// authenticated client</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClientException</span>(<span class="hljs-string">&quot;Given client ID does not match authenticated client&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (authenticatedClient != <span class="hljs-literal">null</span>) &#123;<br>oAuth2RequestValidator.validateScope(tokenRequest, authenticatedClient);<br>&#125;<br><span class="hljs-keyword">if</span> (!StringUtils.hasText(tokenRequest.getGrantType())) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidRequestException</span>(<span class="hljs-string">&quot;Missing grant type&quot;</span>);<br>&#125;<br>   <br>   <span class="hljs-comment">//默认就不支持简化模式</span><br><span class="hljs-keyword">if</span> (tokenRequest.getGrantType().equals(<span class="hljs-string">&quot;implicit&quot;</span>)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidGrantException</span>(<span class="hljs-string">&quot;Implicit grant type not supported from token endpoint&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (isAuthCodeRequest(parameters)) &#123;<br><span class="hljs-comment">// The scope was requested or determined during the authorization step</span><br><span class="hljs-keyword">if</span> (!tokenRequest.getScope().isEmpty()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Clearing scope of incoming token request&quot;</span>);<br>tokenRequest.setScope(Collections.&lt;String&gt; emptySet());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (isRefreshTokenRequest(parameters)) &#123;<br><span class="hljs-comment">// A refresh token has its own default scopes, so we should ignore any added by the factory here.</span><br>tokenRequest.setScope(OAuth2Utils.parseParameterList(parameters.get(OAuth2Utils.SCOPE)));<br>&#125;<br><br>   <span class="hljs-comment">//我们配置的tokenGranter来发放token</span><br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);<br><span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedGrantTypeException</span>(<span class="hljs-string">&quot;Unsupported grant type: &quot;</span> + tokenRequest.getGrantType());<br>&#125;<br><br><span class="hljs-keyword">return</span> getResponse(token);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们来看下<strong>grant</strong>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeTokenGranter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenGranter</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;TokenGranter&gt; tokenGranters;<br><br><span class="hljs-keyword">public</span> OAuth2AccessToken <span class="hljs-title function_">grant</span><span class="hljs-params">(String grantType, TokenRequest tokenRequest)</span> &#123;<br><span class="hljs-keyword">for</span> (TokenGranter granter : tokenGranters) &#123;<br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">grant</span> <span class="hljs-operator">=</span> granter.grant(grantType, tokenRequest);<br><span class="hljs-keyword">if</span> (grant!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> grant;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>代码很简单，通过循环去判断到底使用哪一个<strong>granter</strong>去处理。通过入参<strong>grant_type&#x3D;SMSVerification</strong>，咱们直接就看看<strong>SMSVerificationTokenGranter</strong>的代码。会发现<strong>SMSVerificationTokenGranter</strong> 继承自<strong>AbstractTokenGranter</strong>，而且没有重写<strong>AbstractTokenGranter</strong>#<strong>grant</strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> OAuth2AccessToken <span class="hljs-title function_">grant</span><span class="hljs-params">(String grantType, TokenRequest tokenRequest)</span> &#123;<br><span class="hljs-comment">//判断grantType是否符合</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.grantType.equals(grantType)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> tokenRequest.getClientId();<br><span class="hljs-type">ClientDetails</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> clientDetailsService.loadClientByClientId(clientId);<br>validateGrantType(grantType, client);<br><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Getting access token for: &quot;</span> + clientId);<br>&#125;<br><br>  <span class="hljs-comment">//获取token</span><br><span class="hljs-keyword">return</span> getAccessToken(client, tokenRequest);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们主要看下这个获取token的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> OAuth2AccessToken <span class="hljs-title function_">getAccessToken</span><span class="hljs-params">(ClientDetails client, TokenRequest tokenRequest)</span> &#123;<br><span class="hljs-keyword">return</span> tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在实现<strong>SMSVerificationTokenGranter</strong>的时候实现了<strong>getOAuth2Authentication</strong>方法来认证并返回<strong>Authentication</strong>, 这里就不多说了, 我们在来说下通过<strong>Authentication</strong>生成<strong>token</strong>的方法<strong>createAccessToken</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultTokenServices</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthorizationServerTokenServices</span>, ResourceServerTokenServices,<br>ConsumerTokenServices, InitializingBean &#123;<br><br><span class="hljs-keyword">public</span> OAuth2AccessToken <span class="hljs-title function_">createAccessToken</span><span class="hljs-params">(OAuth2Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">existingAccessToken</span> <span class="hljs-operator">=</span> tokenStore.getAccessToken(authentication);<br><span class="hljs-type">OAuth2RefreshToken</span> <span class="hljs-variable">refreshToken</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (existingAccessToken != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (existingAccessToken.isExpired()) &#123;<br><span class="hljs-keyword">if</span> (existingAccessToken.getRefreshToken() != <span class="hljs-literal">null</span>) &#123;<br>refreshToken = existingAccessToken.getRefreshToken();<br>tokenStore.removeRefreshToken(refreshToken);<br>&#125;<br>tokenStore.removeAccessToken(existingAccessToken);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>tokenStore.storeAccessToken(existingAccessToken, authentication);<br><span class="hljs-keyword">return</span> existingAccessToken;<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (refreshToken == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">//如果没有刷新令牌则生成一个UUID令牌</span><br>refreshToken = createRefreshToken(authentication);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (refreshToken <span class="hljs-keyword">instanceof</span> ExpiringOAuth2RefreshToken) &#123;<br><span class="hljs-type">ExpiringOAuth2RefreshToken</span> <span class="hljs-variable">expiring</span> <span class="hljs-operator">=</span> (ExpiringOAuth2RefreshToken) refreshToken;<br><span class="hljs-keyword">if</span> (System.currentTimeMillis() &gt; expiring.getExpiration().getTime()) &#123;<br>refreshToken = createRefreshToken(authentication);<br>&#125;<br>&#125;<br><br>  <span class="hljs-comment">//生成AccessToken</span><br><span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">accessToken</span> <span class="hljs-operator">=</span> createAccessToken(authentication, refreshToken);<br>  <span class="hljs-comment">//存储生成的AccessToken, jwt不做操作则不存储</span><br>tokenStore.storeAccessToken(accessToken, authentication);<br>refreshToken = accessToken.getRefreshToken();<br><span class="hljs-keyword">if</span> (refreshToken != <span class="hljs-literal">null</span>) &#123;<br>tokenStore.storeRefreshToken(refreshToken, authentication);<br>&#125;<br><span class="hljs-keyword">return</span> accessToken;<br><br>&#125;<br>      <br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要要看下这个生成token方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultTokenServices</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthorizationServerTokenServices</span>, ResourceServerTokenServices,<br>ConsumerTokenServices, InitializingBean &#123;<br><br>  <span class="hljs-keyword">private</span> OAuth2AccessToken <span class="hljs-title function_">createAccessToken</span><span class="hljs-params">(OAuth2Authentication authentication, OAuth2RefreshToken refreshToken)</span> &#123;<br><span class="hljs-type">DefaultOAuth2AccessToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultOAuth2AccessToken</span>(UUID.randomUUID().toString());<br><span class="hljs-type">int</span> <span class="hljs-variable">validitySeconds</span> <span class="hljs-operator">=</span> getAccessTokenValiditySeconds(authentication.getOAuth2Request());<br><span class="hljs-keyword">if</span> (validitySeconds &gt; <span class="hljs-number">0</span>) &#123;<br>token.setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + (validitySeconds * <span class="hljs-number">1000L</span>)));<br>&#125;<br>token.setRefreshToken(refreshToken);<br>token.setScope(authentication.getOAuth2Request().getScope());<br><br><span class="hljs-keyword">return</span> accessTokenEnhancer != <span class="hljs-literal">null</span> ? accessTokenEnhancer.enhance(token, authentication) : token;<br>&#125;<br>      <br>&#125;<br></code></pre></td></tr></table></figure><p>​此方法前面只是创建<strong>DefaultOAuth2AccessToken</strong>对象并初始化部分参数信息。主要看return语句，从DEBUG信息中我们可以知道return的时候执行的是<strong>this.accessTokenEnhancer.enhance(token, authentication)<strong>方法。这里我们就可以自定于</strong>token</strong>增强来扩展一些参数</p><h5 id="资源服务检查token"><a href="#资源服务检查token" class="headerlink" title="资源服务检查token"></a>资源服务检查token</h5><p>主要是这个<strong>OAuth2AuthenticationProcessingFilter</strong>在起作用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OAuth2AuthenticationProcessingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>, InitializingBean &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException,<br>ServletException &#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//省略....</span><br>      <span class="hljs-comment">//将请求封装为Authentication</span><br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> tokenExtractor.extract(request);<br><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//省略....</span><br>        <span class="hljs-comment">//这里调用OAuth2AuthenticationManager#authenticate来认证</span><br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authResult</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authentication);<br><br><span class="hljs-keyword">if</span> (debug) &#123;<br>logger.debug(<span class="hljs-string">&quot;Authentication success: &quot;</span> + authResult);<br>&#125;<br><br>eventPublisher.publishAuthenticationSuccess(authResult);<br>        <span class="hljs-comment">//设置进上下文</span><br>SecurityContextHolder.getContext().setAuthentication(authResult);<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (OAuth2Exception failed) &#123;<br>SecurityContextHolder.clearContext();<br><br><span class="hljs-keyword">if</span> (debug) &#123;<br>logger.debug(<span class="hljs-string">&quot;Authentication request failed: &quot;</span> + failed);<br>&#125;<br>eventPublisher.publishAuthenticationFailure(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(failed.getMessage(), failed),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PreAuthenticatedAuthenticationToken</span>(<span class="hljs-string">&quot;access-token&quot;</span>, <span class="hljs-string">&quot;N/A&quot;</span>));<br><br>authenticationEntryPoint.commence(request, response,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InsufficientAuthenticationException</span>(failed.getMessage(), failed));<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>chain.doFilter(request, response);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们主要看下认证的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br><br><span class="hljs-keyword">if</span> (authentication == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidTokenException</span>(<span class="hljs-string">&quot;Invalid token (token not found)&quot;</span>);<br>&#125;<br>  <span class="hljs-comment">//获取AccessToken</span><br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (String) authentication.getPrincipal();<br>  <span class="hljs-comment">//调用tokenService来认证</span><br><span class="hljs-type">OAuth2Authentication</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> tokenServices.loadAuthentication(token);<br><span class="hljs-keyword">if</span> (auth == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidTokenException</span>(<span class="hljs-string">&quot;Invalid token: &quot;</span> + token);<br>&#125;<br><br>Collection&lt;String&gt; resourceIds = auth.getOAuth2Request().getResourceIds();<br><span class="hljs-keyword">if</span> (resourceId != <span class="hljs-literal">null</span> &amp;&amp; resourceIds != <span class="hljs-literal">null</span> &amp;&amp; !resourceIds.isEmpty() &amp;&amp; !resourceIds.contains(resourceId)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuth2AccessDeniedException</span>(<span class="hljs-string">&quot;Invalid token does not contain resource id (&quot;</span> + resourceId + <span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br><br>checkClientDetails(auth);<br><br><span class="hljs-keyword">if</span> (authentication.getDetails() <span class="hljs-keyword">instanceof</span> OAuth2AuthenticationDetails) &#123;<br><span class="hljs-type">OAuth2AuthenticationDetails</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> (OAuth2AuthenticationDetails) authentication.getDetails();<br><span class="hljs-comment">// Guard against a cached copy of the same details</span><br><span class="hljs-keyword">if</span> (!details.equals(auth.getDetails())) &#123;<br><span class="hljs-comment">// Preserve the authentication details from the one loaded by token services</span><br>details.setDecodedDetails(auth.getDetails());<br>&#125;<br>&#125;<br>auth.setDetails(authentication.getDetails());<br>auth.setAuthenticated(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> auth;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要是使用的<strong>TokenService</strong>来认证, 最后通过<strong>token</strong>返回<strong>OAuth2Authentication</strong>(<strong>Authentication</strong>), 这里默认是<strong>RemoteTokenServices</strong>通过<strong>RestTemplate</strong>远程调用的授权服务器<code> /oauth/check_token</code>, 如果我们不想去校验<strong>token</strong>可以自定义<strong>TokenService</strong>(一般jwt令牌是不会校验的)</p>]]></content>
    
    
    <categories>
      
      <category>认证鉴权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
